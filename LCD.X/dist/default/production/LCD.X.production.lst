

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Feb 17 15:37:54 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F6490
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.41
    22                           ; Generated 25/01/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F6490 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _LCDPS	set	3928
    56  0000                     _LCDCON	set	3929
    57  0000                     _LCDSE3	set	3933
    58  0000                     _LCDSE2	set	3932
    59  0000                     _LCDSE1	set	3931
    60  0000                     _LCDSE0	set	3930
    61  0000                     _TRISCbits	set	3988
    62  0000                     _SSPCON2	set	4037
    63  0000                     _SSPCON1	set	4038
    64  0000                     _SSPSTAT	set	4039
    65  0000                     _PORTDbits	set	3971
    66  0000                     _TRISD	set	3989
    67  0000                     _PORTD	set	3971
    68  0000                     _SSPADD	set	4040
    69  0000                     _T0CONbits	set	4053
    70  0000                     _TMR0L	set	4054
    71  0000                     _TMR0H	set	4055
    72  0000                     _T0CON	set	4053
    73  0000                     _INTCONbits	set	4082
    74  0000                     _PORTC	set	3970
    75  0000                     _PORTB	set	3969
    76  0000                     _PORTA	set	3968
    77  0000                     _TRISG	set	3992
    78  0000                     _TRISC	set	3988
    79  0000                     _TRISB	set	3987
    80  0000                     _TRISA	set	3986
    81  0000                     _ADCON1	set	4033
    82  0000                     _OSCCON	set	4051
    83                           
    84                           	psect	smallconst
    85  000300                     __psmallconst:
    86                           	opt stack 0
    87  000300  00                 	db	0
    88  000301                     STR_3:
    89  000301  53                 	db	83	;'S'
    90  000302  74                 	db	116	;'t'
    91  000303  75                 	db	117	;'u'
    92  000304  64                 	db	100	;'d'
    93  000305  65                 	db	101	;'e'
    94  000306  6E                 	db	110	;'n'
    95  000307  74                 	db	116	;'t'
    96  000308  43                 	db	67	;'C'
    97  000309  6F                 	db	111	;'o'
    98  00030A  6D                 	db	109	;'m'
    99  00030B  70                 	db	112	;'p'
   100  00030C  61                 	db	97	;'a'
   101  00030D  6E                 	db	110	;'n'
   102  00030E  69                 	db	105	;'i'
   103  00030F  6F                 	db	111	;'o'
   104  000310  6E                 	db	110	;'n'
   105  000311  00                 	db	0
   106  000312                     STR_1:
   107  000312  20                 	db	32
   108  000313  20                 	db	32
   109  000314  48                 	db	72	;'H'
   110  000315  65                 	db	101	;'e'
   111  000316  6C                 	db	108	;'l'
   112  000317  6C                 	db	108	;'l'
   113  000318  6F                 	db	111	;'o'
   114  000319  20                 	db	32
   115  00031A  57                 	db	87	;'W'
   116  00031B  6F                 	db	111	;'o'
   117  00031C  72                 	db	114	;'r'
   118  00031D  6C                 	db	108	;'l'
   119  00031E  64                 	db	100	;'d'
   120  00031F  21                 	db	33
   121  000320  00                 	db	0
   122  000321                     STR_2:
   123  000321  20                 	db	32
   124  000322  20                 	db	32
   125  000323  20                 	db	32
   126  000324  4C                 	db	76	;'L'
   127  000325  43                 	db	67	;'C'
   128  000326  44                 	db	68	;'D'
   129  000327  20                 	db	32
   130  000328  44                 	db	68	;'D'
   131  000329  69                 	db	105	;'i'
   132  00032A  73                 	db	115	;'s'
   133  00032B  70                 	db	112	;'p'
   134  00032C  6C                 	db	108	;'l'
   135  00032D  61                 	db	97	;'a'
   136  00032E  79                 	db	121	;'y'
   137  00032F  00                 	db	0
   138                           
   139                           ; #config settings
   140  000330  00                 	db	0	; dummy byte at the end
   141  0000                     
   142                           	psect	cinit
   143  0006A2                     __pcinit:
   144                           	opt stack 0
   145  0006A2                     start_initialization:
   146                           	opt stack 0
   147  0006A2                     __initialization:
   148                           	opt stack 0
   149  0006A2                     end_of_initialization:
   150                           	opt stack 0
   151  0006A2                     __end_of__initialization:
   152                           	opt stack 0
   153  0006A2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   154  0006A4  6EF8               	movwf	tblptru,c
   155  0006A6  0E03               	movlw	high __Lsmallconst
   156  0006A8  6EF7               	movwf	tblptrh,c
   157  0006AA  0100               	movlb	0
   158  0006AC  EF99  F001         	goto	_main	;jump to C main() function
   159                           tblptru	equ	0xFF8
   160                           tblptrh	equ	0xFF7
   161                           
   162                           	psect	cstackCOMRAM
   163  000001                     __pcstackCOMRAM:
   164                           	opt stack 0
   165  000001                     ??_Delay_Seconds:
   166  000001                     OpenI2C@slew:
   167                           	opt stack 0
   168  000001                     LCDWriteNibble@ch:
   169                           	opt stack 0
   170                           
   171                           ; 2 bytes @ 0x0
   172  000001                     	ds	1
   173  000002                     Delay_Seconds@z:
   174                           	opt stack 0
   175  000002                     OpenI2C@sync_mode:
   176                           	opt stack 0
   177                           
   178                           ; 1 bytes @ 0x1
   179  000002                     	ds	1
   180  000003                     Delay_Seconds@y:
   181                           	opt stack 0
   182  000003                     LCDWriteNibble@rs:
   183                           	opt stack 0
   184                           
   185                           ; 2 bytes @ 0x2
   186  000003                     	ds	1
   187  000004                     Delay_Seconds@x:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x3
   191  000004                     	ds	1
   192  000005                     ??_LCDWriteNibble:
   193                           
   194                           ; 1 bytes @ 0x4
   195  000005                     	ds	3
   196  000008                     LCDPutChar@ch:
   197                           	opt stack 0
   198  000008                     LCDPutCmd@ch:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x7
   202  000008                     	ds	2
   203  00000A                     ??_LCDPutCmd:
   204  00000A                     ??_LCDPutChar:
   205                           
   206                           ; 1 bytes @ 0x9
   207  00000A                     	ds	2
   208  00000C                     ??_LCD_Initialize:
   209  00000C                     LCDPutStr@str:
   210                           	opt stack 0
   211  00000C                     LCDGoto@pos:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0xB
   215  00000C                     	ds	2
   216  00000E                     ??_LCDPutStr:
   217  00000E                     LCDGoto@ln:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0xD
   221  00000E                     	ds	2
   222  000010                     ??_LCDGoto:
   223  000010                     LCDPutStr@i:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0xF
   227  000010                     	ds	1
   228  000011                     _LCDGoto$221:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x10
   232  000011                     	ds	2
   233  000013                     tblptru	equ	0xFF8
   234                           tblptrh	equ	0xFF7
   235                           
   236                           ; 1 bytes @ 0x12
   237 ;;
   238 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   239 ;;
   240 ;; *************** function _main *****************
   241 ;; Defined at:
   242 ;;		line 98 in file "LCDmain.c"
   243 ;; Parameters:    Size  Location     Type
   244 ;;		None
   245 ;; Auto vars:     Size  Location     Type
   246 ;;		None
   247 ;; Return value:  Size  Location     Type
   248 ;;                  1    wreg      void 
   249 ;; Registers used:
   250 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   251 ;; Tracked objects:
   252 ;;		On entry : 0/0
   253 ;;		On exit  : 0/0
   254 ;;		Unchanged: 0/0
   255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   256 ;;      Params:         0       0       0       0
   257 ;;      Locals:         0       0       0       0
   258 ;;      Temps:          0       0       0       0
   259 ;;      Totals:         0       0       0       0
   260 ;;Total ram usage:        0 bytes
   261 ;; Hardware stack levels required when called:    3
   262 ;; This function calls:
   263 ;;		_Delay_Seconds
   264 ;;		_Init
   265 ;;		_LCDGoto
   266 ;;		_LCDPutChar
   267 ;;		_LCDPutCmd
   268 ;;		_LCDPutStr
   269 ;;		_LCD_Initialize
   270 ;; This function is called by:
   271 ;;		Startup code after reset
   272 ;; This function uses a non-reentrant model
   273 ;;
   274                           
   275                           	psect	text0
   276  000332                     __ptext0:
   277                           	opt stack 0
   278  000332                     _main:
   279                           	opt stack 28
   280                           
   281                           ;LCDmain.c: 100: Init();
   282                           
   283                           ;incstack = 0
   284  000332  EC2D  F002         	call	_Init	;wreg free
   285                           
   286                           ;LCDmain.c: 103: LCD_Initialize();
   287  000336  EC8A  F002         	call	_LCD_Initialize	;wreg free
   288                           
   289                           ;LCDmain.c: 134: LCDPutStr("  Hello World!");
   290  00033A  0E12               	movlw	low STR_1
   291  00033C  6E0C               	movwf	LCDPutStr@str,c
   292  00033E  0E03               	movlw	high STR_1
   293  000340  6E0D               	movwf	LCDPutStr@str+1,c
   294  000342  ECDF  F002         	call	_LCDPutStr	;wreg free
   295                           
   296                           ;LCDmain.c: 135: LCDGoto(8,1);
   297  000346  0E00               	movlw	0
   298  000348  6E0D               	movwf	LCDGoto@pos+1,c
   299  00034A  0E08               	movlw	8
   300  00034C  6E0C               	movwf	LCDGoto@pos,c
   301  00034E  0E00               	movlw	0
   302  000350  6E0F               	movwf	LCDGoto@ln+1,c
   303  000352  0E01               	movlw	1
   304  000354  6E0E               	movwf	LCDGoto@ln,c
   305  000356  ECB6  F002         	call	_LCDGoto	;wreg free
   306                           
   307                           ;LCDmain.c: 136: LCDPutChar('1');
   308  00035A  0E00               	movlw	0
   309  00035C  6E09               	movwf	LCDPutChar@ch+1,c
   310  00035E  0E31               	movlw	49
   311  000360  6E08               	movwf	LCDPutChar@ch,c
   312  000362  EC5D  F002         	call	_LCDPutChar	;wreg free
   313                           
   314                           ;LCDmain.c: 137: Delay_Seconds(1);
   315  000366  0E01               	movlw	1
   316  000368  EC28  F003         	call	_Delay_Seconds
   317                           
   318                           ;LCDmain.c: 138: LCDGoto(8,1);
   319  00036C  0E00               	movlw	0
   320  00036E  6E0D               	movwf	LCDGoto@pos+1,c
   321  000370  0E08               	movlw	8
   322  000372  6E0C               	movwf	LCDGoto@pos,c
   323  000374  0E00               	movlw	0
   324  000376  6E0F               	movwf	LCDGoto@ln+1,c
   325  000378  0E01               	movlw	1
   326  00037A  6E0E               	movwf	LCDGoto@ln,c
   327  00037C  ECB6  F002         	call	_LCDGoto	;wreg free
   328                           
   329                           ;LCDmain.c: 139: LCDPutChar('2');
   330  000380  0E00               	movlw	0
   331  000382  6E09               	movwf	LCDPutChar@ch+1,c
   332  000384  0E32               	movlw	50
   333  000386  6E08               	movwf	LCDPutChar@ch,c
   334  000388  EC5D  F002         	call	_LCDPutChar	;wreg free
   335                           
   336                           ;LCDmain.c: 140: Delay_Seconds(1);
   337  00038C  0E01               	movlw	1
   338  00038E  EC28  F003         	call	_Delay_Seconds
   339                           
   340                           ;LCDmain.c: 141: LCDGoto(8,1);
   341  000392  0E00               	movlw	0
   342  000394  6E0D               	movwf	LCDGoto@pos+1,c
   343  000396  0E08               	movlw	8
   344  000398  6E0C               	movwf	LCDGoto@pos,c
   345  00039A  0E00               	movlw	0
   346  00039C  6E0F               	movwf	LCDGoto@ln+1,c
   347  00039E  0E01               	movlw	1
   348  0003A0  6E0E               	movwf	LCDGoto@ln,c
   349  0003A2  ECB6  F002         	call	_LCDGoto	;wreg free
   350                           
   351                           ;LCDmain.c: 142: LCDPutChar('3');
   352  0003A6  0E00               	movlw	0
   353  0003A8  6E09               	movwf	LCDPutChar@ch+1,c
   354  0003AA  0E33               	movlw	51
   355  0003AC  6E08               	movwf	LCDPutChar@ch,c
   356  0003AE  EC5D  F002         	call	_LCDPutChar	;wreg free
   357                           
   358                           ;LCDmain.c: 143: Delay_Seconds(1);
   359  0003B2  0E01               	movlw	1
   360  0003B4  EC28  F003         	call	_Delay_Seconds
   361                           
   362                           ;LCDmain.c: 144: LCDPutCmd(0x01);
   363  0003B8  0E00               	movlw	0
   364  0003BA  6E09               	movwf	LCDPutCmd@ch+1,c
   365  0003BC  0E01               	movlw	1
   366  0003BE  6E08               	movwf	LCDPutCmd@ch,c
   367  0003C0  ECF9  F001         	call	_LCDPutCmd	;wreg free
   368                           
   369                           ;LCDmain.c: 146: LCDPutStr("   LCD Display");
   370  0003C4  0E21               	movlw	low STR_2
   371  0003C6  6E0C               	movwf	LCDPutStr@str,c
   372  0003C8  0E03               	movlw	high STR_2
   373  0003CA  6E0D               	movwf	LCDPutStr@str+1,c
   374  0003CC  ECDF  F002         	call	_LCDPutStr	;wreg free
   375                           
   376                           ;LCDmain.c: 147: LCDGoto(0,1);
   377  0003D0  0E00               	movlw	0
   378  0003D2  6E0D               	movwf	LCDGoto@pos+1,c
   379  0003D4  0E00               	movlw	0
   380  0003D6  6E0C               	movwf	LCDGoto@pos,c
   381  0003D8  0E00               	movlw	0
   382  0003DA  6E0F               	movwf	LCDGoto@ln+1,c
   383  0003DC  0E01               	movlw	1
   384  0003DE  6E0E               	movwf	LCDGoto@ln,c
   385  0003E0  ECB6  F002         	call	_LCDGoto	;wreg free
   386                           
   387                           ;LCDmain.c: 148: LCDPutStr("StudentCompanion");
   388  0003E4  0E01               	movlw	low STR_3
   389  0003E6  6E0C               	movwf	LCDPutStr@str,c
   390  0003E8  0E03               	movlw	high STR_3
   391  0003EA  6E0D               	movwf	LCDPutStr@str+1,c
   392  0003EC  ECDF  F002         	call	_LCDPutStr	;wreg free
   393  0003F0                     l96:
   394                           
   395                           ;LCDmain.c: 150: {
   396  0003F0  D7FF               	goto	l96
   397  0003F2                     __end_of_main:
   398                           	opt stack 0
   399                           tblptru	equ	0xFF8
   400                           tblptrh	equ	0xFF7
   401                           
   402 ;; *************** function _LCD_Initialize *****************
   403 ;; Defined at:
   404 ;;		line 217 in file "lcd.h"
   405 ;; Parameters:    Size  Location     Type
   406 ;;		None
   407 ;; Auto vars:     Size  Location     Type
   408 ;;		None
   409 ;; Return value:  Size  Location     Type
   410 ;;                  1    wreg      void 
   411 ;; Registers used:
   412 ;;		wreg, status,2, status,0, cstack
   413 ;; Tracked objects:
   414 ;;		On entry : 0/0
   415 ;;		On exit  : 0/0
   416 ;;		Unchanged: 0/0
   417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   418 ;;      Params:         0       0       0       0
   419 ;;      Locals:         0       0       0       0
   420 ;;      Temps:          1       0       0       0
   421 ;;      Totals:         1       0       0       0
   422 ;;Total ram usage:        1 bytes
   423 ;; Hardware stack levels used:    1
   424 ;; Hardware stack levels required when called:    2
   425 ;; This function calls:
   426 ;;		_LCDPutCmd
   427 ;; This function is called by:
   428 ;;		_main
   429 ;; This function uses a non-reentrant model
   430 ;;
   431                           
   432                           	psect	text1
   433  000514                     __ptext1:
   434                           	opt stack 0
   435  000514                     _LCD_Initialize:
   436                           	opt stack 28
   437                           
   438                           ;lcd.h: 220: PORTD = 0;
   439                           
   440                           ;incstack = 0
   441  000514  0E00               	movlw	0
   442  000516  6E83               	movwf	3971,c	;volatile
   443                           
   444                           ;lcd.h: 222: TRISD = 0x00;
   445  000518  0E00               	movlw	0
   446  00051A  6E95               	movwf	3989,c	;volatile
   447                           
   448                           ;lcd.h: 225: PORTDbits.RD7 = 1;
   449  00051C  8E83               	bsf	3971,7,c	;volatile
   450                           
   451                           ;lcd.h: 228: _delay((unsigned long)((15)*(8000000/4000.0)));
   452  00051E  0E27               	movlw	39
   453  000520  6E0C               	movwf	??_LCD_Initialize& (0+255),c
   454  000522  0EF5               	movlw	245
   455  000524                     u167:
   456  000524  2EE8               	decfsz	wreg,f,c
   457  000526  D7FE               	bra	u167
   458  000528  2E0C               	decfsz	??_LCD_Initialize& (0+255),f,c
   459  00052A  D7FC               	bra	u167
   460  00052C  F000               	nop	
   461                           
   462                           ;lcd.h: 231: LCDPutCmd(0x32);
   463  00052E  0E00               	movlw	0
   464  000530  6E09               	movwf	LCDPutCmd@ch+1,c
   465  000532  0E32               	movlw	50
   466  000534  6E08               	movwf	LCDPutCmd@ch,c
   467  000536  ECF9  F001         	call	_LCDPutCmd	;wreg free
   468                           
   469                           ;lcd.h: 234: LCDPutCmd(0x28);
   470  00053A  0E00               	movlw	0
   471  00053C  6E09               	movwf	LCDPutCmd@ch+1,c
   472  00053E  0E28               	movlw	40
   473  000540  6E08               	movwf	LCDPutCmd@ch,c
   474  000542  ECF9  F001         	call	_LCDPutCmd	;wreg free
   475                           
   476                           ;lcd.h: 237: LCDPutCmd(0x0C);
   477  000546  0E00               	movlw	0
   478  000548  6E09               	movwf	LCDPutCmd@ch+1,c
   479  00054A  0E0C               	movlw	12
   480  00054C  6E08               	movwf	LCDPutCmd@ch,c
   481  00054E  ECF9  F001         	call	_LCDPutCmd	;wreg free
   482                           
   483                           ;lcd.h: 239: LCDPutCmd(0x01);
   484  000552  0E00               	movlw	0
   485  000554  6E09               	movwf	LCDPutCmd@ch+1,c
   486  000556  0E01               	movlw	1
   487  000558  6E08               	movwf	LCDPutCmd@ch,c
   488  00055A  ECF9  F001         	call	_LCDPutCmd	;wreg free
   489                           
   490                           ;lcd.h: 242: LCDPutCmd(0x06);
   491  00055E  0E00               	movlw	0
   492  000560  6E09               	movwf	LCDPutCmd@ch+1,c
   493  000562  0E06               	movlw	6
   494  000564  6E08               	movwf	LCDPutCmd@ch,c
   495  000566  ECF9  F001         	call	_LCDPutCmd	;wreg free
   496  00056A  0012               	return		;funcret
   497  00056C                     __end_of_LCD_Initialize:
   498                           	opt stack 0
   499                           tblptru	equ	0xFF8
   500                           tblptrh	equ	0xFF7
   501                           wreg	equ	0xFE8
   502                           
   503 ;; *************** function _LCDPutStr *****************
   504 ;; Defined at:
   505 ;;		line 306 in file "lcd.h"
   506 ;; Parameters:    Size  Location     Type
   507 ;;  str             2   11[COMRAM] PTR const unsigned char 
   508 ;;		 -> STR_3(17), STR_2(15), STR_1(15), 
   509 ;; Auto vars:     Size  Location     Type
   510 ;;  i               2   15[COMRAM] int 
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   520 ;;      Params:         2       0       0       0
   521 ;;      Locals:         2       0       0       0
   522 ;;      Temps:          2       0       0       0
   523 ;;      Totals:         6       0       0       0
   524 ;;Total ram usage:        6 bytes
   525 ;; Hardware stack levels used:    1
   526 ;; Hardware stack levels required when called:    2
   527 ;; This function calls:
   528 ;;		_LCDPutChar
   529 ;; This function is called by:
   530 ;;		_main
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           	psect	text2
   535  0005BE                     __ptext2:
   536                           	opt stack 0
   537  0005BE                     _LCDPutStr:
   538                           	opt stack 28
   539                           
   540                           ;lcd.h: 308: int i=0;
   541                           
   542                           ;incstack = 0
   543  0005BE  0E00               	movlw	0
   544  0005C0  6E11               	movwf	LCDPutStr@i+1,c
   545  0005C2  0E00               	movlw	0
   546  0005C4  6E10               	movwf	LCDPutStr@i,c
   547                           
   548                           ;lcd.h: 311: while (str[i])
   549  0005C6  D012               	goto	l948
   550  0005C8                     l944:
   551                           
   552                           ;lcd.h: 312: {
   553                           ;lcd.h: 314: LCDPutChar(str[i++]);
   554  0005C8  5010               	movf	LCDPutStr@i,w,c
   555  0005CA  240C               	addwf	LCDPutStr@str,w,c
   556  0005CC  6E0E               	movwf	??_LCDPutStr& (0+255),c
   557  0005CE  5011               	movf	LCDPutStr@i+1,w,c
   558  0005D0  200D               	addwfc	LCDPutStr@str+1,w,c
   559  0005D2  6E0F               	movwf	(??_LCDPutStr+1)& (0+255),c
   560  0005D4  C00E  FFF6         	movff	??_LCDPutStr,tblptrl
   561  0005D8  C00F  FFF7         	movff	??_LCDPutStr+1,tblptrh
   562  0005DC                     	if	0	;tblptru may be non-zero
   563  0005DC                     	endif
   564  0005DC                     	if	0	;tblptru may be non-zero
   565  0005DC                     	endif
   566  0005DC  0008               	tblrd		*
   567  0005DE  50F5               	movf	tablat,w,c
   568  0005E0  6E08               	movwf	LCDPutChar@ch,c
   569  0005E2  6A09               	clrf	LCDPutChar@ch+1,c
   570  0005E4  EC5D  F002         	call	_LCDPutChar	;wreg free
   571  0005E8  4A10               	infsnz	LCDPutStr@i,f,c
   572  0005EA  2A11               	incf	LCDPutStr@i+1,f,c
   573  0005EC                     l948:
   574  0005EC  5010               	movf	LCDPutStr@i,w,c
   575  0005EE  240C               	addwf	LCDPutStr@str,w,c
   576  0005F0  6E0E               	movwf	??_LCDPutStr& (0+255),c
   577  0005F2  5011               	movf	LCDPutStr@i+1,w,c
   578  0005F4  200D               	addwfc	LCDPutStr@str+1,w,c
   579  0005F6  6E0F               	movwf	(??_LCDPutStr+1)& (0+255),c
   580  0005F8  C00E  FFF6         	movff	??_LCDPutStr,tblptrl
   581  0005FC  C00F  FFF7         	movff	??_LCDPutStr+1,tblptrh
   582  000600                     	if	0	;tblptru may be non-zero
   583  000600                     	endif
   584  000600                     	if	0	;tblptru may be non-zero
   585  000600                     	endif
   586  000600  0008               	tblrd		*
   587  000602  50F5               	movf	tablat,w,c
   588  000604  0900               	iorlw	0
   589  000606  B4D8               	btfsc	status,2,c
   590  000608  0012               	return	
   591  00060A  D7DE               	goto	l944
   592  00060C                     __end_of_LCDPutStr:
   593                           	opt stack 0
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           wreg	equ	0xFE8
   599                           status	equ	0xFD8
   600                           
   601 ;; *************** function _LCDPutChar *****************
   602 ;; Defined at:
   603 ;;		line 274 in file "lcd.h"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  ch              2    7[COMRAM] int 
   606 ;; Auto vars:     Size  Location     Type
   607 ;;		None
   608 ;; Return value:  Size  Location     Type
   609 ;;                  1    wreg      void 
   610 ;; Registers used:
   611 ;;		wreg, status,2, status,0, cstack
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   617 ;;      Params:         2       0       0       0
   618 ;;      Locals:         0       0       0       0
   619 ;;      Temps:          2       0       0       0
   620 ;;      Totals:         4       0       0       0
   621 ;;Total ram usage:        4 bytes
   622 ;; Hardware stack levels used:    1
   623 ;; Hardware stack levels required when called:    1
   624 ;; This function calls:
   625 ;;		_LCDWriteNibble
   626 ;; This function is called by:
   627 ;;		_LCDPutStr
   628 ;;		_main
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632                           	psect	text3
   633  0004BA                     __ptext3:
   634                           	opt stack 0
   635  0004BA                     _LCDPutChar:
   636                           	opt stack 28
   637                           
   638                           ;lcd.h: 276: _delay((unsigned long)((5)*(8000000/4000.0)));
   639                           
   640                           ;incstack = 0
   641  0004BA  0E0D               	movlw	13
   642  0004BC  6E0A               	movwf	??_LCDPutChar& (0+255),c
   643  0004BE  0EFC               	movlw	252
   644  0004C0                     u177:
   645  0004C0  2EE8               	decfsz	wreg,f,c
   646  0004C2  D7FE               	bra	u177
   647  0004C4  2E0A               	decfsz	??_LCDPutChar& (0+255),f,c
   648  0004C6  D7FC               	bra	u177
   649                           
   650                           ;lcd.h: 279: LCDWriteNibble(ch,1);
   651  0004C8  C008  F001         	movff	LCDPutChar@ch,LCDWriteNibble@ch
   652  0004CC  C009  F002         	movff	LCDPutChar@ch+1,LCDWriteNibble@ch+1
   653  0004D0  0E00               	movlw	0
   654  0004D2  6E04               	movwf	LCDWriteNibble@rs+1,c
   655  0004D4  0E01               	movlw	1
   656  0004D6  6E03               	movwf	LCDWriteNibble@rs,c
   657  0004D8  EC06  F003         	call	_LCDWriteNibble	;wreg free
   658                           
   659                           ;lcd.h: 282: ch = (ch << 4);
   660  0004DC  C008  F00A         	movff	LCDPutChar@ch,??_LCDPutChar
   661  0004E0  C009  F00B         	movff	LCDPutChar@ch+1,??_LCDPutChar+1
   662  0004E4  3A0A               	swapf	??_LCDPutChar,f,c
   663  0004E6  3A0B               	swapf	??_LCDPutChar+1,f,c
   664  0004E8  0EF0               	movlw	240
   665  0004EA  160B               	andwf	??_LCDPutChar+1,f,c
   666  0004EC  500A               	movf	??_LCDPutChar,w,c
   667  0004EE  0B0F               	andlw	15
   668  0004F0  120B               	iorwf	??_LCDPutChar+1,f,c
   669  0004F2  0EF0               	movlw	240
   670  0004F4  160A               	andwf	??_LCDPutChar,f,c
   671  0004F6  C00A  F008         	movff	??_LCDPutChar,LCDPutChar@ch
   672  0004FA  C00B  F009         	movff	??_LCDPutChar+1,LCDPutChar@ch+1
   673                           
   674                           ;lcd.h: 285: LCDWriteNibble(ch,1);
   675  0004FE  C008  F001         	movff	LCDPutChar@ch,LCDWriteNibble@ch
   676  000502  C009  F002         	movff	LCDPutChar@ch+1,LCDWriteNibble@ch+1
   677  000506  0E00               	movlw	0
   678  000508  6E04               	movwf	LCDWriteNibble@rs+1,c
   679  00050A  0E01               	movlw	1
   680  00050C  6E03               	movwf	LCDWriteNibble@rs,c
   681  00050E  EC06  F003         	call	_LCDWriteNibble	;wreg free
   682  000512  0012               	return		;funcret
   683  000514                     __end_of_LCDPutChar:
   684                           	opt stack 0
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           wreg	equ	0xFE8
   690                           status	equ	0xFD8
   691                           
   692 ;; *************** function _LCDGoto *****************
   693 ;; Defined at:
   694 ;;		line 319 in file "lcd.h"
   695 ;; Parameters:    Size  Location     Type
   696 ;;  pos             2   11[COMRAM] int 
   697 ;;  ln              2   13[COMRAM] int 
   698 ;; Auto vars:     Size  Location     Type
   699 ;;		None
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, status,2, status,0, cstack
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   709 ;;      Params:         4       0       0       0
   710 ;;      Locals:         2       0       0       0
   711 ;;      Temps:          1       0       0       0
   712 ;;      Totals:         7       0       0       0
   713 ;;Total ram usage:        7 bytes
   714 ;; Hardware stack levels used:    1
   715 ;; Hardware stack levels required when called:    2
   716 ;; This function calls:
   717 ;;		_LCDPutCmd
   718 ;; This function is called by:
   719 ;;		_main
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           	psect	text4
   724  00056C                     __ptext4:
   725                           	opt stack 0
   726  00056C                     _LCDGoto:
   727                           	opt stack 28
   728                           
   729                           ;lcd.h: 322: if ((ln > (2-1)) || (pos > (16-1)))
   730                           
   731                           ;incstack = 0
   732  00056C  BE0F               	btfsc	LCDGoto@ln+1,7,c
   733  00056E  D006               	goto	l952
   734  000570  500F               	movf	LCDGoto@ln+1,w,c
   735  000572  E124               	bnz	l81
   736  000574  0E02               	movlw	2
   737  000576  5C0E               	subwf	LCDGoto@ln,w,c
   738  000578  B0D8               	btfsc	status,0,c
   739  00057A  0012               	return	
   740  00057C                     l952:
   741  00057C  BE0D               	btfsc	LCDGoto@pos+1,7,c
   742  00057E  D006               	goto	l954
   743  000580  500D               	movf	LCDGoto@pos+1,w,c
   744  000582  E11C               	bnz	l81
   745  000584  0E10               	movlw	16
   746  000586  5C0C               	subwf	LCDGoto@pos,w,c
   747  000588  B0D8               	btfsc	status,0,c
   748  00058A  0012               	return	
   749  00058C                     l954:
   750                           
   751                           ;lcd.h: 326: }
   752                           ;lcd.h: 329: LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
   753  00058C  040E               	decf	LCDGoto@ln,w,c
   754  00058E  100F               	iorwf	LCDGoto@ln+1,w,c
   755  000590  B4D8               	btfsc	status,2,c
   756  000592  D002               	goto	l958
   757  000594  0E80               	movlw	128
   758  000596  D001               	goto	L1
   759  000598                     l958:
   760  000598  0EC0               	movlw	192
   761  00059A                     L1:
   762  00059A  100C               	iorwf	LCDGoto@pos,w,c
   763  00059C  6E11               	movwf	_LCDGoto$221,c
   764  00059E  500D               	movf	LCDGoto@pos+1,w,c
   765  0005A0  6E12               	movwf	_LCDGoto$221+1,c
   766  0005A2  C011  F008         	movff	_LCDGoto$221,LCDPutCmd@ch
   767  0005A6  C012  F009         	movff	_LCDGoto$221+1,LCDPutCmd@ch+1
   768  0005AA  ECF9  F001         	call	_LCDPutCmd	;wreg free
   769                           
   770                           ;lcd.h: 332: _delay((unsigned long)((5)*(8000000/4000.0)));
   771  0005AE  0E0D               	movlw	13
   772  0005B0  6E10               	movwf	??_LCDGoto& (0+255),c
   773  0005B2  0EFC               	movlw	252
   774  0005B4                     u187:
   775  0005B4  2EE8               	decfsz	wreg,f,c
   776  0005B6  D7FE               	bra	u187
   777  0005B8  2E10               	decfsz	??_LCDGoto& (0+255),f,c
   778  0005BA  D7FC               	bra	u187
   779  0005BC                     l81:
   780  0005BC  0012               	return		;funcret
   781  0005BE                     __end_of_LCDGoto:
   782                           	opt stack 0
   783                           tblptru	equ	0xFF8
   784                           tblptrh	equ	0xFF7
   785                           tblptrl	equ	0xFF6
   786                           tablat	equ	0xFF5
   787                           wreg	equ	0xFE8
   788                           status	equ	0xFD8
   789                           
   790 ;; *************** function _LCDPutCmd *****************
   791 ;; Defined at:
   792 ;;		line 289 in file "lcd.h"
   793 ;; Parameters:    Size  Location     Type
   794 ;;  ch              2    7[COMRAM] int 
   795 ;; Auto vars:     Size  Location     Type
   796 ;;		None
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg, status,2, status,0, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   806 ;;      Params:         2       0       0       0
   807 ;;      Locals:         0       0       0       0
   808 ;;      Temps:          2       0       0       0
   809 ;;      Totals:         4       0       0       0
   810 ;;Total ram usage:        4 bytes
   811 ;; Hardware stack levels used:    1
   812 ;; Hardware stack levels required when called:    1
   813 ;; This function calls:
   814 ;;		_LCDWriteNibble
   815 ;; This function is called by:
   816 ;;		_LCD_Initialize
   817 ;;		_LCDGoto
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text5
   823  0003F2                     __ptext5:
   824                           	opt stack 0
   825  0003F2                     _LCDPutCmd:
   826                           	opt stack 28
   827                           
   828                           ;lcd.h: 291: _delay((unsigned long)((5)*(8000000/4000.0)));
   829                           
   830                           ;incstack = 0
   831  0003F2  0E0D               	movlw	13
   832  0003F4  6E0A               	movwf	??_LCDPutCmd& (0+255),c
   833  0003F6  0EFC               	movlw	252
   834  0003F8                     u197:
   835  0003F8  2EE8               	decfsz	wreg,f,c
   836  0003FA  D7FE               	bra	u197
   837  0003FC  2E0A               	decfsz	??_LCDPutCmd& (0+255),f,c
   838  0003FE  D7FC               	bra	u197
   839                           
   840                           ;lcd.h: 294: LCDWriteNibble(ch,0);
   841  000400  C008  F001         	movff	LCDPutCmd@ch,LCDWriteNibble@ch
   842  000404  C009  F002         	movff	LCDPutCmd@ch+1,LCDWriteNibble@ch+1
   843  000408  0E00               	movlw	0
   844  00040A  6E04               	movwf	LCDWriteNibble@rs+1,c
   845  00040C  0E00               	movlw	0
   846  00040E  6E03               	movwf	LCDWriteNibble@rs,c
   847  000410  EC06  F003         	call	_LCDWriteNibble	;wreg free
   848                           
   849                           ;lcd.h: 297: ch = (ch << 4);
   850  000414  C008  F00A         	movff	LCDPutCmd@ch,??_LCDPutCmd
   851  000418  C009  F00B         	movff	LCDPutCmd@ch+1,??_LCDPutCmd+1
   852  00041C  3A0A               	swapf	??_LCDPutCmd,f,c
   853  00041E  3A0B               	swapf	??_LCDPutCmd+1,f,c
   854  000420  0EF0               	movlw	240
   855  000422  160B               	andwf	??_LCDPutCmd+1,f,c
   856  000424  500A               	movf	??_LCDPutCmd,w,c
   857  000426  0B0F               	andlw	15
   858  000428  120B               	iorwf	??_LCDPutCmd+1,f,c
   859  00042A  0EF0               	movlw	240
   860  00042C  160A               	andwf	??_LCDPutCmd,f,c
   861  00042E  C00A  F008         	movff	??_LCDPutCmd,LCDPutCmd@ch
   862  000432  C00B  F009         	movff	??_LCDPutCmd+1,LCDPutCmd@ch+1
   863                           
   864                           ;lcd.h: 299: _delay((unsigned long)((1)*(8000000/4000.0)));
   865  000436  0E03               	movlw	3
   866  000438  6E0A               	movwf	??_LCDPutCmd& (0+255),c
   867  00043A  0E98               	movlw	152
   868  00043C                     u207:
   869  00043C  2EE8               	decfsz	wreg,f,c
   870  00043E  D7FE               	bra	u207
   871  000440  2E0A               	decfsz	??_LCDPutCmd& (0+255),f,c
   872  000442  D7FC               	bra	u207
   873                           
   874                           ;lcd.h: 302: LCDWriteNibble(ch,0);
   875  000444  C008  F001         	movff	LCDPutCmd@ch,LCDWriteNibble@ch
   876  000448  C009  F002         	movff	LCDPutCmd@ch+1,LCDWriteNibble@ch+1
   877  00044C  0E00               	movlw	0
   878  00044E  6E04               	movwf	LCDWriteNibble@rs+1,c
   879  000450  0E00               	movlw	0
   880  000452  6E03               	movwf	LCDWriteNibble@rs,c
   881  000454  EC06  F003         	call	_LCDWriteNibble	;wreg free
   882  000458  0012               	return		;funcret
   883  00045A                     __end_of_LCDPutCmd:
   884                           	opt stack 0
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           wreg	equ	0xFE8
   890                           status	equ	0xFD8
   891                           
   892 ;; *************** function _LCDWriteNibble *****************
   893 ;; Defined at:
   894 ;;		line 247 in file "lcd.h"
   895 ;; Parameters:    Size  Location     Type
   896 ;;  ch              2    0[COMRAM] int 
   897 ;;  rs              2    2[COMRAM] int 
   898 ;; Auto vars:     Size  Location     Type
   899 ;;		None
   900 ;; Return value:  Size  Location     Type
   901 ;;                  1    wreg      void 
   902 ;; Registers used:
   903 ;;		wreg, status,2, status,0
   904 ;; Tracked objects:
   905 ;;		On entry : 0/0
   906 ;;		On exit  : 0/0
   907 ;;		Unchanged: 0/0
   908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   909 ;;      Params:         4       0       0       0
   910 ;;      Locals:         0       0       0       0
   911 ;;      Temps:          3       0       0       0
   912 ;;      Totals:         7       0       0       0
   913 ;;Total ram usage:        7 bytes
   914 ;; Hardware stack levels used:    1
   915 ;; This function calls:
   916 ;;		Nothing
   917 ;; This function is called by:
   918 ;;		_LCDPutChar
   919 ;;		_LCDPutCmd
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           	psect	text6
   924  00060C                     __ptext6:
   925                           	opt stack 0
   926  00060C                     _LCDWriteNibble:
   927                           	opt stack 28
   928                           
   929                           ;lcd.h: 250: ch = (ch >> 4);
   930                           
   931                           ;incstack = 0
   932  00060C  C001  F005         	movff	LCDWriteNibble@ch,??_LCDWriteNibble
   933  000610  C002  F006         	movff	LCDWriteNibble@ch+1,??_LCDWriteNibble+1
   934  000614  0E04               	movlw	4
   935  000616  6E07               	movwf	(??_LCDWriteNibble+2)& (0+255),c
   936  000618                     u105:
   937  000618  3406               	rlcf	??_LCDWriteNibble+1,w,c
   938  00061A  3206               	rrcf	??_LCDWriteNibble+1,f,c
   939  00061C  3205               	rrcf	??_LCDWriteNibble,f,c
   940  00061E  2E07               	decfsz	(??_LCDWriteNibble+2)& (0+255),f,c
   941  000620  D7FB               	goto	u105
   942  000622  C005  F001         	movff	??_LCDWriteNibble,LCDWriteNibble@ch
   943  000626  C006  F002         	movff	??_LCDWriteNibble+1,LCDWriteNibble@ch+1
   944                           
   945                           ;lcd.h: 253: ch = (ch & 0x0F);
   946  00062A  0E0F               	movlw	15
   947  00062C  1401               	andwf	LCDWriteNibble@ch,w,c
   948  00062E  6E01               	movwf	LCDWriteNibble@ch,c
   949  000630  6A02               	clrf	LCDWriteNibble@ch+1,c
   950                           
   951                           ;lcd.h: 256: PORTD = (PORTD & 0xF0);
   952  000632  5083               	movf	3971,w,c	;volatile
   953  000634  0BF0               	andlw	240
   954  000636  6E83               	movwf	3971,c	;volatile
   955                           
   956                           ;lcd.h: 259: PORTD = (PORTD | ch);
   957  000638  5083               	movf	3971,w,c	;volatile
   958  00063A  1001               	iorwf	LCDWriteNibble@ch,w,c
   959  00063C  6E83               	movwf	3971,c	;volatile
   960                           
   961                           ;lcd.h: 262: PORTDbits.RD4 = rs;
   962  00063E  B003               	btfsc	LCDWriteNibble@rs,0,c
   963  000640  D002               	bra	u115
   964  000642  9883               	bcf	3971,4,c	;volatile
   965  000644  D001               	bra	u116
   966  000646                     u115:
   967  000646  8883               	bsf	3971,4,c	;volatile
   968  000648                     u116:
   969                           
   970                           ;lcd.h: 265: PORTDbits.RD5 = 0;
   971  000648  9A83               	bcf	3971,5,c	;volatile
   972                           
   973                           ;lcd.h: 268: PORTDbits.RD6 = 1;
   974  00064A  8C83               	bsf	3971,6,c	;volatile
   975                           
   976                           ;lcd.h: 271: PORTDbits.RD6 = 0;
   977  00064C  9C83               	bcf	3971,6,c	;volatile
   978  00064E  0012               	return		;funcret
   979  000650                     __end_of_LCDWriteNibble:
   980                           	opt stack 0
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           wreg	equ	0xFE8
   986                           status	equ	0xFD8
   987                           
   988 ;; *************** function _Init *****************
   989 ;; Defined at:
   990 ;;		line 49 in file "LCDmain.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  i               2    0        int 
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1004 ;;      Params:         0       0       0       0
  1005 ;;      Locals:         0       0       0       0
  1006 ;;      Temps:          0       0       0       0
  1007 ;;      Totals:         0       0       0       0
  1008 ;;Total ram usage:        0 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    1
  1011 ;; This function calls:
  1012 ;;		_OpenI2C
  1013 ;; This function is called by:
  1014 ;;		_main
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text7
  1019  00045A                     __ptext7:
  1020                           	opt stack 0
  1021  00045A                     _Init:
  1022                           	opt stack 29
  1023                           
  1024                           ;LCDmain.c: 51: int i;
  1025                           ;LCDmain.c: 53: OSCCON = 0b01110010;
  1026                           
  1027                           ;incstack = 0
  1028  00045A  0E72               	movlw	114
  1029  00045C  6ED3               	movwf	4051,c	;volatile
  1030                           
  1031                           ;LCDmain.c: 54: LCDSE0 = 0b11111111;
  1032  00045E  010F               	movlb	15	; () banked
  1033  000460  695A               	setf	90,b	;volatile
  1034                           
  1035                           ; BSR set to: 15
  1036                           ;LCDmain.c: 55: LCDSE1 = 0b11111111;
  1037  000462  010F               	movlb	15	; () banked
  1038  000464  695B               	setf	91,b	;volatile
  1039                           
  1040                           ; BSR set to: 15
  1041                           ;LCDmain.c: 56: LCDSE2 = 0b11111111;
  1042  000466  010F               	movlb	15	; () banked
  1043  000468  695C               	setf	92,b	;volatile
  1044                           
  1045                           ;LCDmain.c: 57: LCDSE3 = 0b00000000;
  1046  00046A  0E00               	movlw	0
  1047  00046C  010F               	movlb	15	; () banked
  1048  00046E  6F5D               	movwf	93,b	;volatile
  1049                           
  1050                           ;LCDmain.c: 58: LCDCON = 0b10001000;
  1051  000470  0E88               	movlw	136
  1052  000472  010F               	movlb	15	; () banked
  1053  000474  6F59               	movwf	89,b	;volatile
  1054                           
  1055                           ;LCDmain.c: 59: LCDPS = 0b00110110;
  1056  000476  0E36               	movlw	54
  1057  000478  010F               	movlb	15	; () banked
  1058  00047A  6F58               	movwf	88,b	;volatile
  1059                           
  1060                           ;LCDmain.c: 60: ADCON1 = 0b00111111;
  1061  00047C  0E3F               	movlw	63
  1062  00047E  6EC1               	movwf	4033,c	;volatile
  1063                           
  1064                           ;LCDmain.c: 61: TRISA = 0b00000011;
  1065  000480  0E03               	movlw	3
  1066  000482  6E92               	movwf	3986,c	;volatile
  1067                           
  1068                           ;LCDmain.c: 62: TRISB = 0b00100001;
  1069  000484  0E21               	movlw	33
  1070  000486  6E93               	movwf	3987,c	;volatile
  1071                           
  1072                           ;LCDmain.c: 63: TRISC = 0b00011000;
  1073  000488  0E18               	movlw	24
  1074  00048A  6E94               	movwf	3988,c	;volatile
  1075                           
  1076                           ; BSR set to: 15
  1077                           ;LCDmain.c: 64: TRISG = 0b11111111;
  1078  00048C  6898               	setf	3992,c	;volatile
  1079                           
  1080                           ;LCDmain.c: 65: PORTA = 0;
  1081  00048E  0E00               	movlw	0
  1082  000490  6E80               	movwf	3968,c	;volatile
  1083                           
  1084                           ;LCDmain.c: 66: PORTB = 0;
  1085  000492  0E00               	movlw	0
  1086  000494  6E81               	movwf	3969,c	;volatile
  1087                           
  1088                           ;LCDmain.c: 67: PORTC = 0;
  1089  000496  0E00               	movlw	0
  1090  000498  6E82               	movwf	3970,c	;volatile
  1091                           
  1092                           ; BSR set to: 15
  1093                           ;LCDmain.c: 68: INTCONbits.TMR0IF = 0;
  1094  00049A  94F2               	bcf	intcon,2,c	;volatile
  1095                           
  1096                           ;LCDmain.c: 70: T0CON = 0b00001000;
  1097  00049C  0E08               	movlw	8
  1098  00049E  6ED5               	movwf	4053,c	;volatile
  1099                           
  1100                           ;LCDmain.c: 71: TMR0H = 0;
  1101  0004A0  0E00               	movlw	0
  1102  0004A2  6ED7               	movwf	4055,c	;volatile
  1103                           
  1104                           ;LCDmain.c: 72: TMR0L = 0;
  1105  0004A4  0E00               	movlw	0
  1106  0004A6  6ED6               	movwf	4054,c	;volatile
  1107                           
  1108                           ; BSR set to: 15
  1109                           ;LCDmain.c: 73: T0CONbits.TMR0ON = 1;
  1110  0004A8  8ED5               	bsf	4053,7,c	;volatile
  1111                           
  1112                           ; BSR set to: 15
  1113                           ;LCDmain.c: 74: OpenI2C(0b00001000, 0b10000000);
  1114  0004AA  0E80               	movlw	128
  1115  0004AC  6E01               	movwf	OpenI2C@slew,c
  1116  0004AE  0E08               	movlw	8
  1117  0004B0  EC42  F003         	call	_OpenI2C
  1118                           
  1119                           ;LCDmain.c: 75: SSPADD = 0x3F;
  1120  0004B4  0E3F               	movlw	63
  1121  0004B6  6EC8               	movwf	4040,c	;volatile
  1122  0004B8  0012               	return	
  1123  0004BA                     __end_of_Init:
  1124                           	opt stack 0
  1125                           tblptru	equ	0xFF8
  1126                           tblptrh	equ	0xFF7
  1127                           tblptrl	equ	0xFF6
  1128                           tablat	equ	0xFF5
  1129                           intcon	equ	0xFF2
  1130                           wreg	equ	0xFE8
  1131                           status	equ	0xFD8
  1132                           
  1133 ;; *************** function _OpenI2C *****************
  1134 ;; Defined at:
  1135 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_open.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;  sync_mode       1    wreg     unsigned char 
  1138 ;;  slew            1    0[COMRAM] unsigned char 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  sync_mode       1    1[COMRAM] unsigned char 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  1    wreg      void 
  1143 ;; Registers used:
  1144 ;;		wreg, status,2, status,0
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1150 ;;      Params:         1       0       0       0
  1151 ;;      Locals:         1       0       0       0
  1152 ;;      Temps:          0       0       0       0
  1153 ;;      Totals:         2       0       0       0
  1154 ;;Total ram usage:        2 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; This function calls:
  1157 ;;		Nothing
  1158 ;; This function is called by:
  1159 ;;		_Init
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text8
  1164  000684                     __ptext8:
  1165                           	opt stack 0
  1166  000684                     _OpenI2C:
  1167                           	opt stack 29
  1168                           
  1169                           ;incstack = 0
  1170                           ;OpenI2C@sync_mode stored from wreg
  1171  000684  6E02               	movwf	OpenI2C@sync_mode,c
  1172  000686  0E3F               	movlw	63
  1173  000688  16C7               	andwf	4039,f,c	;volatile
  1174  00068A  0E00               	movlw	0
  1175  00068C  6EC6               	movwf	4038,c	;volatile
  1176  00068E  0E00               	movlw	0
  1177  000690  6EC5               	movwf	4037,c	;volatile
  1178  000692  5002               	movf	OpenI2C@sync_mode,w,c
  1179  000694  12C6               	iorwf	4038,f,c	;volatile
  1180  000696  5001               	movf	OpenI2C@slew,w,c
  1181  000698  12C7               	iorwf	4039,f,c	;volatile
  1182  00069A  8694               	bsf	3988,3,c	;volatile
  1183  00069C  8894               	bsf	3988,4,c	;volatile
  1184  00069E  8AC6               	bsf	4038,5,c	;volatile
  1185  0006A0  0012               	return		;funcret
  1186  0006A2                     __end_of_OpenI2C:
  1187                           	opt stack 0
  1188                           tblptru	equ	0xFF8
  1189                           tblptrh	equ	0xFF7
  1190                           tblptrl	equ	0xFF6
  1191                           tablat	equ	0xFF5
  1192                           intcon	equ	0xFF2
  1193                           wreg	equ	0xFE8
  1194                           status	equ	0xFD8
  1195                           
  1196 ;; *************** function _Delay_Seconds *****************
  1197 ;; Defined at:
  1198 ;;		line 90 in file "LCDmain.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  z               1    wreg     unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  z               1    1[COMRAM] unsigned char 
  1203 ;;  x               1    3[COMRAM] unsigned char 
  1204 ;;  y               1    2[COMRAM] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1214 ;;      Params:         0       0       0       0
  1215 ;;      Locals:         3       0       0       0
  1216 ;;      Temps:          1       0       0       0
  1217 ;;      Totals:         4       0       0       0
  1218 ;;Total ram usage:        4 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text9
  1228  000650                     __ptext9:
  1229                           	opt stack 0
  1230  000650                     _Delay_Seconds:
  1231                           	opt stack 30
  1232                           
  1233                           ;incstack = 0
  1234                           ;Delay_Seconds@z stored from wreg
  1235  000650  6E02               	movwf	Delay_Seconds@z,c
  1236                           
  1237                           ;LCDmain.c: 92: unsigned char x,y;
  1238                           ;LCDmain.c: 93: for (y = 0; y < z; y++)
  1239  000652  0E00               	movlw	0
  1240  000654  6E03               	movwf	Delay_Seconds@y,c
  1241  000656  D011               	goto	l836
  1242  000658                     l824:
  1243                           
  1244                           ;LCDmain.c: 94: {
  1245                           ;LCDmain.c: 95: for (x = 0; x < 100; x++)_delay((unsigned long)((10)*(8000000/4000.0)));
  1246  000658  0E00               	movlw	0
  1247  00065A  6E04               	movwf	Delay_Seconds@x,c
  1248  00065C                     l826:
  1249  00065C  0E63               	movlw	99
  1250  00065E  6404               	cpfsgt	Delay_Seconds@x,c
  1251  000660  D001               	goto	l830
  1252  000662  D00A               	goto	l834
  1253  000664                     l830:
  1254  000664  0E1A               	movlw	26
  1255  000666  6E01               	movwf	??_Delay_Seconds& (0+255),c
  1256  000668  0EF8               	movlw	248
  1257  00066A                     u217:
  1258  00066A  2EE8               	decfsz	wreg,f,c
  1259  00066C  D7FE               	bra	u217
  1260  00066E  2E01               	decfsz	??_Delay_Seconds& (0+255),f,c
  1261  000670  D7FC               	bra	u217
  1262  000672  D000               	nop2	
  1263  000674  2A04               	incf	Delay_Seconds@x,f,c
  1264  000676  D7F2               	goto	l826
  1265  000678                     l834:
  1266  000678  2A03               	incf	Delay_Seconds@y,f,c
  1267  00067A                     l836:
  1268  00067A  5002               	movf	Delay_Seconds@z,w,c
  1269  00067C  5C03               	subwf	Delay_Seconds@y,w,c
  1270  00067E  B0D8               	btfsc	status,0,c
  1271  000680  0012               	return	
  1272  000682  D7EA               	goto	l824
  1273  000684                     __end_of_Delay_Seconds:
  1274                           	opt stack 0
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           intcon	equ	0xFF2
  1280                           wreg	equ	0xFE8
  1281                           status	equ	0xFD8
  1282                           tblptru	equ	0xFF8
  1283                           tblptrh	equ	0xFF7
  1284                           tblptrl	equ	0xFF6
  1285                           tablat	equ	0xFF5
  1286                           intcon	equ	0xFF2
  1287                           wreg	equ	0xFE8
  1288                           status	equ	0xFD8
  1289                           
  1290                           	psect	rparam
  1291  0000                     tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           intcon	equ	0xFF2
  1296                           wreg	equ	0xFE8
  1297                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      18
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[17]), STR_2(CODE[15]), STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_LCDGoto
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble
    _Init->_OpenI2C

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6297
                      _Delay_Seconds
                               _Init
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutCmd
                          _LCDPutStr
                     _LCD_Initialize
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       1     1      0    1117
                                             11 COMRAM     1     1      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            6     4      2    1207
                                             11 COMRAM     6     4      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           4     2      2     925
                                              7 COMRAM     4     2      2
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              7     3      4    1763
                                             11 COMRAM     7     3      4
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            4     2      2    1117
                                              7 COMRAM     4     2      2
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       7     3      4     602
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Init                                                 2     2      0     108
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Delay_Seconds                                        4     4      0      60
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_Seconds
   _Init
     _OpenI2C
   _LCDGoto
     _LCDPutCmd
       _LCDWriteNibble
   _LCDPutChar
     _LCDWriteNibble
   _LCDPutCmd
     _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     12      12       1       18.9%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BANK1              100      0       0       5        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK1           100      0       0       9        0.0%
BIGRAM             2FF      0       0      10        0.0%
DATA                 0      0       0      11        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Feb 17 15:37:54 2017

         _LCD_Initialize 0514              __CFG_CP$OFF 000000              ?_LCDPutChar 0008  
                     l81 05BC                       l96 03F0              __CFG_BORV$3 000000  
                    l830 0664                      l824 0658                      l834 0678  
                    l826 065C                      l836 067A                      l952 057C  
                    l944 05C8                      l954 058C                      l948 05EC  
                    l958 0598                      u105 0618                      u115 0646  
                    u116 0648                      u207 043C                      u217 066A  
                    u167 0524                      u177 04C0                      u187 05B4  
                    u197 03F8                      wreg 000FE8          __end_of_LCDGoto 05BE  
           __CFG_WDT$OFF 000000                     STR_1 0312                     STR_2 0321  
                   STR_3 0301                     _Init 045A                     _main 0332  
     __size_of_LCDPutCmd 0068                     start 0000       __size_of_LCDPutStr 004E  
          __CFG_IESO$OFF 000000   __end_of_LCD_Initialize 056C            __CFG_MCLRE$ON 000000  
           ___param_bank 000000          __end_of_OpenI2C 06A2              LCDPutCmd@ch 0008  
                  ?_Init 0001                    ?_main 0001                    _T0CON 000FD5  
                  _LCDPS 000F58                    _TMR0H 000FD7                    _TMR0L 000FD6  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTD 000F83                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISG 000F98  
          __CFG_PWRT$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_BOREN$OFF 000000  
                  tablat 000FF5      __size_of_LCDPutChar 005A                    status 000FD8  
        ?_LCD_Initialize 0001          __initialization 06A2             __end_of_Init 04BA  
           __end_of_main 03F2                   ??_Init 0003                   ??_main 0013  
          __activetblptr 000001                ??_LCDGoto 0010        __end_of_LCDPutCmd 045A  
           LCDPutChar@ch 0008        __end_of_LCDPutStr 060C                   _ADCON1 000FC1  
                 _LCDCON 000F59                   _LCDSE0 000F5A                   _LCDSE1 000F5B  
                 _LCDSE2 000F5C                   _LCDSE3 000F5D              OpenI2C@slew 0001  
                 _OSCCON 000FD3             LCDPutStr@str 000C                   _SSPADD 000FC8  
         _LCDWriteNibble 060C                ??_OpenI2C 0002           __CFG_XINST$OFF 000000  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8   __end_of_LCDWriteNibble 0650               __accesstop 0060  
__end_of__initialization 06A2            ___rparam_used 000001                LCDGoto@ln 000E  
         __pcstackCOMRAM 0001             ??_LCDPutChar 000A          __CFG_OSC$INTIO7 000000  
        ?_LCDWriteNibble 0001       __end_of_LCDPutChar 0514           Delay_Seconds@x 0004  
         Delay_Seconds@y 0003           Delay_Seconds@z 0002   __size_of_Delay_Seconds 0034  
                _LCDGoto 056C                  _SSPCON1 000FC6                  _SSPCON2 000FC5  
                _SSPSTAT 000FC7         ??_LCD_Initialize 000C                  _OpenI2C 0684  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0300  
        __CFG_STVREN$OFF 000000                  __pcinit 06A2                  __ramtop 0300  
                __ptext0 0332                  __ptext1 0514                  __ptext2 05BE  
                __ptext3 04BA                  __ptext4 056C                  __ptext5 03F2  
                __ptext6 060C                  __ptext7 045A                  __ptext8 0684  
                __ptext9 0650                _T0CONbits 000FD5                _LCDPutCmd 03F2  
              _LCDPutStr 05BE     end_of_initialization 06A2            _Delay_Seconds 0650  
              _PORTDbits 000F83                _TRISCbits 000F94               ?_LCDPutCmd 0008  
             ?_LCDPutStr 000C           ?_Delay_Seconds 0001               LCDGoto@pos 000C  
             LCDPutStr@i 0010      start_initialization 06A2         ??_LCDWriteNibble 0005  
               ?_LCDGoto 000C          ??_Delay_Seconds 0001              ??_LCDPutCmd 000A  
            ??_LCDPutStr 000E                 ?_OpenI2C 0001         LCDWriteNibble@ch 0001  
       LCDWriteNibble@rs 0003              __smallconst 0300              _LCDGoto$221 0011  
       __size_of_LCDGoto 0052         OpenI2C@sync_mode 0002                 __Hrparam 0000  
       __size_of_OpenI2C 001E                 __Lrparam 0000             __Lsmallconst 0300  
__size_of_LCD_Initialize 0058            __size_of_Init 0060            __size_of_main 00C0  
             _LCDPutChar 04BA               _INTCONbits 000FF2    __end_of_Delay_Seconds 0684  
__size_of_LCDWriteNibble 0044  
