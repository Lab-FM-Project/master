

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
<<<<<<< HEAD
                                                                                               Sat Feb 18 22:33:35 2017
=======
                                                                                               Sun Feb 19 12:16:34 2017
>>>>>>> origin/master

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F6490
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
<<<<<<< HEAD
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           	psect	smallconst
    36  000300                     __psmallconst:
    37                           	opt stack 0
    38  000300  00                 	db	0
    39  000301                     _regDflt:
    40                           	opt stack 0
    41  000301  FFFF               	dw	65535
    42  000303  5B15               	dw	23317
    43  000305  D0B9               	dw	53433
    44  000307  A010               	dw	40976
    45  000309  0780               	dw	1920
    46  00030B  28AB               	dw	10411
    47  00030D  6400               	dw	25600
    48  00030F  1EE7               	dw	7911
    49  000311  7141               	dw	28993
    50  000313  007D               	dw	125
    51  000315  82C6               	dw	33478
    52  000317  4F55               	dw	20309
    53  000319  970C               	dw	38668
    54  00031B  B845               	dw	47173
    55  00031D  FC2D               	dw	64557
    56  00031F  8097               	dw	32919
    57  000321  04A1               	dw	1185
    58  000323  DF6A               	dw	57194
    59  000325                     __end_of_regDflt:
    60                           	opt stack 0
    61  000325                     setVolume@F6665:
    62                           	opt stack 0
    63  000325  0F                 	db	15
    64  000326  CF                 	db	207
    65  000327  DF                 	db	223
    66  000328  FF                 	db	255
    67  000329  CB                 	db	203
    68  00032A  DB                 	db	219
    69  00032B  FB                 	db	251
    70  00032C  FA                 	db	250
    71  00032D  F9                 	db	249
    72  00032E  F8                 	db	248
    73  00032F  F7                 	db	247
    74  000330  D6                 	db	214
    75  000331  E6                 	db	230
    76  000332  F6                 	db	246
    77  000333  E3                 	db	227
    78  000334  F3                 	db	243
    79  000335  F2                 	db	242
    80  000336  F1                 	db	241
    81  000337  F0                 	db	240
    82  000338                     __end_ofsetVolume@F6665:
    83                           	opt stack 0
    84  0000                     _LCDCON	set	3929
    85  0000                     _LCDPS	set	3928
    86  0000                     _LCDSE0	set	3930
    87  0000                     _LCDSE1	set	3931
    88  0000                     _LCDSE2	set	3932
    89  0000                     _LCDSE3	set	3933
    90  0000                     _ADCON1	set	4033
    91  0000                     _INTCONbits	set	4082
    92  0000                     _OSCCON	set	4051
    93  0000                     _PIR1bits	set	3998
    94  0000                     _PORTA	set	3968
    95  0000                     _PORTAbits	set	3968
    96  0000                     _PORTB	set	3969
    97  0000                     _PORTBbits	set	3969
    98  0000                     _PORTC	set	3970
    99  0000                     _PORTCbits	set	3970
   100  0000                     _PORTGbits	set	3974
   101  0000                     _SSPADD	set	4040
   102  0000                     _SSPBUF	set	4041
   103  0000                     _SSPCON1	set	4038
   104  0000                     _SSPCON1bits	set	4038
   105  0000                     _SSPCON2	set	4037
   106  0000                     _SSPCON2bits	set	4037
   107  0000                     _SSPSTAT	set	4039
   108  0000                     _SSPSTATbits	set	4039
   109  0000                     _T0CON	set	4053
   110  0000                     _T0CONbits	set	4053
   111  0000                     _TMR0H	set	4055
   112  0000                     _TMR0L	set	4054
   113  0000                     _TRISA	set	3986
   114  0000                     _TRISB	set	3987
   115  0000                     _TRISC	set	3988
   116  0000                     _TRISCbits	set	3988
   117  0000                     _TRISG	set	3992
   118  0000                     _LCDDATA0	set	3936
   119                           
   120                           ; #config settings
   121  000338  00                 	db	0	; dummy byte at the end
   122  0000                     
   123                           	psect	cinit
   124  000AB6                     __pcinit:
   125                           	opt stack 0
   126  000AB6                     start_initialization:
   127                           	opt stack 0
   128  000AB6                     __initialization:
   129                           	opt stack 0
   130                           
   131                           ; Clear objects allocated to COMRAM (36 bytes)
   132  000AB6  EE00  F034         	lfsr	0,__pbssCOMRAM
   133  000ABA  0E24               	movlw	36
   134  000ABC                     clear_0:
   135  000ABC  6AEE               	clrf	postinc0,c
   136  000ABE  06E8               	decf	wreg,f,c
   137  000AC0  E1FD               	bnz	clear_0
   138  000AC2                     end_of_initialization:
   139                           	opt stack 0
   140  000AC2                     __end_of__initialization:
   141                           	opt stack 0
   142  000AC2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   143  000AC4  6EF8               	movwf	tblptru,c
   144  000AC6  0100               	movlb	0
   145  000AC8  EF89  F003         	goto	_main	;jump to C main() function
   146                           tblptru	equ	0xFF8
   147                           postinc0	equ	0xFEE
   148                           wreg	equ	0xFE8
   149                           
   150                           	psect	bssCOMRAM
   151  000034                     __pbssCOMRAM:
   152                           	opt stack 0
   153  000034                     _regImg:
   154                           	opt stack 0
   155  000034                     	ds	36
   156                           tblptru	equ	0xFF8
   157                           postinc0	equ	0xFEE
   158                           wreg	equ	0xFE8
   159                           
   160                           	psect	cstackCOMRAM
   161  000001                     __pcstackCOMRAM:
   162                           	opt stack 0
   163  000001                     ??_IdleI2C:
   164  000001                     ?_butnEvent:
   165                           	opt stack 0
   166  000001                     OpenI2C@slew:
   167                           	opt stack 0
   168  000001                     dly@d:
   169                           	opt stack 0
   170  000001                     delay_10ms@n:
   171                           	opt stack 0
   172                           
   173                           ; 2 bytes @ 0x0
   174  000001                     	ds	1
   175  000002                     OpenI2C@sync_mode:
   176                           	opt stack 0
   177  000002                     WriteI2C@data_out:
   178                           	opt stack 0
   179                           
   180                           ; 1 bytes @ 0x1
   181  000002                     	ds	1
   182  000003                     ??_delay_10ms:
   183  000003                     ??_butnEvent:
   184  000003                     ??_FMwrite:
   185  000003                     dly@i:
   186                           	opt stack 0
   187  000003                     FMread@data:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0x2
   191  000003                     	ds	1
   192  000004                     butnEvent@c:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0x3
   196  000004                     	ds	1
   197  000005                     ??_FMread:
   198  000005                     FMwrite@firstByt:
   199                           	opt stack 0
   200                           
   201                           ; 1 bytes @ 0x4
   202  000005                     	ds	1
   203  000006                     FMwrite@secndByt:
   204                           	opt stack 0
   205  000006                     butnEvent@c_499:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x5
   209  000006                     	ds	1
   210  000007                     FMwrite@adr:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0x6
   214  000007                     	ds	1
   215  000008                     butnEvent@c_508:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x7
   219  000008                     	ds	1
   220  000009                     FMread@regAddr:
   221                           	opt stack 0
   222                           
   223                           ; 1 bytes @ 0x8
   224  000009                     	ds	1
   225  00000A                     FMread@firstByt:
   226                           	opt stack 0
   227  00000A                     butnEvent@c_509:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x9
   231  00000A                     	ds	1
   232  00000B                     FMread@secndByt:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0xA
   236  00000B                     	ds	1
   237  00000C                     butnEvent@c_516:
   238                           	opt stack 0
   239  00000C                     FMready@rdy:
   240                           	opt stack 0
   241  00000C                     FMvers@vsn:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0xB
   245  00000C                     	ds	2
   246  00000E                     ??_FMready:
   247  00000E                     
   248                           ; 1 bytes @ 0xD
   249  00000E                     	ds	2
   250  000010                     FMready@sts:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0xF
   254  000010                     	ds	2
   255  000012                     FMinit@dat:
   256                           	opt stack 0
   257  000012                     setVolume@volume:
   258                           	opt stack 0
   259  000012                     FMfrequenc@f:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x11
   263  000012                     	ds	2
   264  000014                     ??_setVolume:
   265  000014                     ??_FMfrequenc:
   266  000014                     FMinit@ad:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x13
   270  000014                     	ds	3
   271  000017                     setVolume@volume_map:
   272                           	opt stack 0
   273                           
   274                           ; 19 bytes @ 0x16
   275  000017                     	ds	1
   276  000018                     FMfrequenc@cn:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0x17
   280  000018                     	ds	2
   281  00001A                     FMfrequenc@dat:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x19
   285  00001A                     	ds	2
   286  00001C                     
   287                           ; 1 bytes @ 0x1B
   288  00001C                     	ds	14
   289  00002A                     setVolume@dat:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x29
   293  00002A                     	ds	2
   294  00002C                     setVolume@volume_setting:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x2B
   298  00002C                     	ds	1
   299  00002D                     setVolume@temp_vol:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x2C
   303  00002D                     	ds	1
   304  00002E                     ??_main:
   305                           
   306                           ; 1 bytes @ 0x2D
   307  00002E                     	ds	2
   308  000030                     main@evt:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x2F
   312  000030                     	ds	2
   313  000032                     main@ui:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x31
   317  000032                     	ds	2
   318                           tblptru	equ	0xFF8
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           
   322 ;;
   323 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   324 ;;
   325 ;; *************** function _main *****************
   326 ;; Defined at:
   327 ;;		line 569 in file "main.c"
   328 ;; Parameters:    Size  Location     Type
   329 ;;		None
   330 ;; Auto vars:     Size  Location     Type
   331 ;;  ui              2   49[COMRAM] unsigned int 
   332 ;;  evt             2   47[COMRAM] int 
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      void 
   335 ;; Registers used:
   336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   337 ;; Tracked objects:
   338 ;;		On entry : 0/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   342 ;;      Params:         0       0       0       0
   343 ;;      Locals:         4       0       0       0
   344 ;;      Temps:          2       0       0       0
   345 ;;      Totals:         6       0       0       0
   346 ;;Total ram usage:        6 bytes
   347 ;; Hardware stack levels required when called:    6
   348 ;; This function calls:
   349 ;;		_FMinit
   350 ;;		_FMvers
   351 ;;		_Init
   352 ;;		_MuteHard
   353 ;;		_VolumeDown
   354 ;;		_VolumeUp
   355 ;;		_butnEvent
   356 ;;		_dly
   357 ;;		_errfm
   358 ;;		_nextChannel
   359 ;;		_previousChannel
   360 ;; This function is called by:
   361 ;;		Startup code after reset
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365                           	psect	text0
   366  000712                     __ptext0:
   367                           	opt stack 0
   368  000712                     _main:
   369                           	opt stack 25
   370                           
   371                           ;main.c: 570: int evt;
   372                           ;main.c: 571: unsigned int ui;
   373                           ;main.c: 572: dly(20);
   374                           
   375                           ;incstack = 0
   376  000712  0E00               	movlw	0
   377  000714  6E02               	movwf	dly@d+1,c
   378  000716  0E14               	movlw	20
   379  000718  6E01               	movwf	dly@d,c
   380  00071A  ECD8  F004         	call	_dly	;wreg free
   381                           
   382                           ;main.c: 573: Init();
   383  00071E  EC56  F004         	call	_Init	;wreg free
   384                           
   385                           ;main.c: 575: PORTCbits.RC6 = 1;
   386  000722  8C82               	bsf	3970,6,c	;volatile
   387                           
   388                           ;main.c: 577: FMvers(&ui);
   389  000724  0E32               	movlw	low main@ui
   390  000726  6E0C               	movwf	FMvers@vsn,c
   391  000728  0E00               	movlw	high main@ui
   392  00072A  6E0D               	movwf	FMvers@vsn+1,c
   393  00072C  EC6F  F005         	call	_FMvers	;wreg free
   394                           
   395                           ;main.c: 578: if (ui != 0x1010) errfm();
   396  000730  0E10               	movlw	16
   397  000732  1832               	xorwf	main@ui,w,c
   398  000734  E103               	bnz	u1280
   399  000736  0E10               	movlw	16
   400  000738  1833               	xorwf	main@ui+1,w,c
   401  00073A  A4D8               	btfss	status,2,c
   402  00073C                     u1280:
   403  00073C  EC77  F005         	call	_errfm	;wreg free
   404                           
   405                           ;main.c: 579: if (FMinit() != 0) errfm();
   406  000740  ECCA  F002         	call	_FMinit	;wreg free
   407  000744  0900               	iorlw	0
   408  000746  A4D8               	btfss	status,2,c
   409  000748  EC77  F005         	call	_errfm	;wreg free
   410  00074C                     l1847:
   411                           
   412                           ;main.c: 582: evt = butnEvent();
   413  00074C  EC9D  F001         	call	_butnEvent	;wreg free
   414  000750  C001  F030         	movff	?_butnEvent,main@evt
   415  000754  C002  F031         	movff	?_butnEvent+1,main@evt+1
   416                           
   417                           ;main.c: 583: switch (evt) {
   418  000758  D013               	goto	l1863
   419  00075A                     l1849:
   420  00075A  EC11  F005         	call	_nextChannel	;wreg free
   421                           
   422                           ;main.c: 585: break;
   423  00075E  D7F6               	goto	l1847
   424  000760                     l1851:
   425  000760  EC02  F005         	call	_previousChannel	;wreg free
   426                           
   427                           ;main.c: 587: break;
   428  000764  D7F3               	goto	l1847
   429  000766                     l1853:
   430  000766  EC20  F005         	call	_VolumeUp	;wreg free
   431                           
   432                           ;main.c: 589: break;
   433  00076A  D7F0               	goto	l1847
   434  00076C                     l1855:
   435  00076C  EC2F  F005         	call	_VolumeDown	;wreg free
   436                           
   437                           ;main.c: 591: break;
   438  000770  D7ED               	goto	l1847
   439  000772                     l1857:
   440  000772  0E00               	movlw	0
   441  000774  EC78  F005         	call	_MuteHard
   442                           
   443                           ;main.c: 593: break;
   444  000778  D7E9               	goto	l1847
   445  00077A                     l1859:
   446  00077A  EC77  F005         	call	_errfm	;wreg free
   447                           
   448                           ;main.c: 599: }
   449                           
   450                           ;main.c: 598: default: break;
   451                           
   452                           ;main.c: 596: break;
   453  00077E  D7E6               	goto	l1847
   454  000780                     l1863:
   455  000780  C030  F02E         	movff	main@evt,??_main
   456  000784  C031  F02F         	movff	main@evt+1,??_main+1
   457                           
   458                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   459                           ; Switch size 1, requested type "space"
   460                           ; Number of cases is 1, Range of values is 0 to 0
   461                           ; switch strategies available:
   462                           ; Name         Instructions Cycles
   463                           ; simple_byte            4     3 (average)
   464                           ;	Chosen strategy is simple_byte
   465  000788  502F               	movf	??_main+1,w,c
   466  00078A  0A00               	xorlw	0	; case 0
   467  00078C  A4D8               	btfss	status,2,c
   468  00078E  D7DE               	goto	l1847
   469                           
   470                           ; Switch size 1, requested type "space"
   471                           ; Number of cases is 6, Range of values is 1 to 8
   472                           ; switch strategies available:
   473                           ; Name         Instructions Cycles
   474                           ; simple_byte           19    10 (average)
   475                           ;	Chosen strategy is simple_byte
   476  000790  502E               	movf	??_main,w,c
   477  000792  0A01               	xorlw	1	; case 1
   478  000794  B4D8               	btfsc	status,2,c
   479  000796  D7E1               	goto	l1849
   480  000798  0A03               	xorlw	3	; case 2
   481  00079A  B4D8               	btfsc	status,2,c
   482  00079C  D7E1               	goto	l1851
   483  00079E  0A01               	xorlw	1	; case 3
   484  0007A0  B4D8               	btfsc	status,2,c
   485  0007A2  D7E1               	goto	l1853
   486  0007A4  0A07               	xorlw	7	; case 4
   487  0007A6  B4D8               	btfsc	status,2,c
   488  0007A8  D7E1               	goto	l1855
   489  0007AA  0A01               	xorlw	1	; case 5
   490  0007AC  B4D8               	btfsc	status,2,c
   491  0007AE  D7E1               	goto	l1857
   492  0007B0  0A0D               	xorlw	13	; case 8
   493  0007B2  B4D8               	btfsc	status,2,c
   494  0007B4  D7E2               	goto	l1859
   495                           
   496                           ;main.c: 600: }
   497  0007B6  D7CA               	goto	l1847
   498  0007B8                     __end_of_main:
   499                           	opt stack 0
   500                           tblptru	equ	0xFF8
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           status	equ	0xFD8
   504                           
   505 ;; *************** function _previousChannel *****************
   506 ;; Defined at:
   507 ;;		line 500 in file "main.c"
   508 ;; Parameters:    Size  Location     Type
   509 ;;		None
   510 ;; Auto vars:     Size  Location     Type
   511 ;;		None
   512 ;; Return value:  Size  Location     Type
   513 ;;                  1    wreg      unsigned char 
   514 ;; Registers used:
   515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   516 ;; Tracked objects:
   517 ;;		On entry : 0/0
   518 ;;		On exit  : 0/0
   519 ;;		Unchanged: 0/0
   520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   521 ;;      Params:         0       0       0       0
   522 ;;      Locals:         0       0       0       0
   523 ;;      Temps:          0       0       0       0
   524 ;;      Totals:         0       0       0       0
   525 ;;Total ram usage:        0 bytes
   526 ;; Hardware stack levels used:    1
   527 ;; Hardware stack levels required when called:    5
   528 ;; This function calls:
   529 ;;		_FMfrequenc
   530 ;;		_delay_10ms
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text1
   537  000A04                     __ptext1:
   538                           	opt stack 0
   539  000A04                     _previousChannel:
   540                           	opt stack 25
   541                           
   542                           ;main.c: 501: FMfrequenc(1046);
   543                           
   544                           ;incstack = 0
   545  000A04  0E04               	movlw	4
   546  000A06  6E13               	movwf	FMfrequenc@f+1,c
   547  000A08  0E16               	movlw	22
   548  000A0A  6E12               	movwf	FMfrequenc@f,c
   549  000A0C  EC1D  F004         	call	_FMfrequenc	;wreg free
   550                           
   551                           ;main.c: 502: PORTCbits.RC7 = 1;
   552  000A10  8E82               	bsf	3970,7,c	;volatile
   553                           
   554                           ;main.c: 503: delay_10ms(10);
   555  000A12  0E00               	movlw	0
   556  000A14  6E02               	movwf	delay_10ms@n+1,c
   557  000A16  0E0A               	movlw	10
   558  000A18  6E01               	movwf	delay_10ms@n,c
   559  000A1A  ECF1  F004         	call	_delay_10ms	;wreg free
   560                           
   561                           ;main.c: 504: PORTCbits.RC7 = 0;
   562  000A1E  9E82               	bcf	3970,7,c	;volatile
   563  000A20  0012               	return	
   564  000A22                     __end_of_previousChannel:
   565                           	opt stack 0
   566                           tblptru	equ	0xFF8
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           status	equ	0xFD8
   570                           
   571 ;; *************** function _nextChannel *****************
   572 ;; Defined at:
   573 ;;		line 490 in file "main.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;		None
   576 ;; Auto vars:     Size  Location     Type
   577 ;;		None
   578 ;; Return value:  Size  Location     Type
   579 ;;                  1    wreg      unsigned char 
   580 ;; Registers used:
   581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   582 ;; Tracked objects:
   583 ;;		On entry : 0/0
   584 ;;		On exit  : 0/0
   585 ;;		Unchanged: 0/0
   586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   587 ;;      Params:         0       0       0       0
   588 ;;      Locals:         0       0       0       0
   589 ;;      Temps:          0       0       0       0
   590 ;;      Totals:         0       0       0       0
   591 ;;Total ram usage:        0 bytes
   592 ;; Hardware stack levels used:    1
   593 ;; Hardware stack levels required when called:    5
   594 ;; This function calls:
   595 ;;		_FMfrequenc
   596 ;;		_delay_10ms
   597 ;; This function is called by:
   598 ;;		_main
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           	psect	text2
   603  000A22                     __ptext2:
   604                           	opt stack 0
   605  000A22                     _nextChannel:
   606                           	opt stack 25
   607                           
   608                           ;main.c: 491: FMfrequenc(964);
   609                           
   610                           ;incstack = 0
   611  000A22  0E03               	movlw	3
   612  000A24  6E13               	movwf	FMfrequenc@f+1,c
   613  000A26  0EC4               	movlw	196
   614  000A28  6E12               	movwf	FMfrequenc@f,c
   615  000A2A  EC1D  F004         	call	_FMfrequenc	;wreg free
   616                           
   617                           ;main.c: 492: PORTCbits.RC6 = 1;
   618  000A2E  8C82               	bsf	3970,6,c	;volatile
   619                           
   620                           ;main.c: 493: delay_10ms(10);
   621  000A30  0E00               	movlw	0
   622  000A32  6E02               	movwf	delay_10ms@n+1,c
   623  000A34  0E0A               	movlw	10
   624  000A36  6E01               	movwf	delay_10ms@n,c
   625  000A38  ECF1  F004         	call	_delay_10ms	;wreg free
   626                           
   627                           ;main.c: 494: PORTCbits.RC6 = 0;
   628  000A3C  9C82               	bcf	3970,6,c	;volatile
   629  000A3E  0012               	return	
   630  000A40                     __end_of_nextChannel:
   631                           	opt stack 0
   632                           tblptru	equ	0xFF8
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           status	equ	0xFD8
   636                           
   637 ;; *************** function _FMfrequenc *****************
   638 ;; Defined at:
   639 ;;		line 425 in file "main.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;  f               2   17[COMRAM] unsigned int 
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  dat             2   25[COMRAM] unsigned int 
   644 ;;  cn              2   23[COMRAM] unsigned int 
   645 ;; Return value:  Size  Location     Type
   646 ;;                  1    wreg      unsigned char 
   647 ;; Registers used:
   648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   654 ;;      Params:         2       0       0       0
   655 ;;      Locals:         4       0       0       0
   656 ;;      Temps:          4       0       0       0
   657 ;;      Totals:        10       0       0       0
   658 ;;Total ram usage:       10 bytes
   659 ;; Hardware stack levels used:    1
   660 ;; Hardware stack levels required when called:    4
   661 ;; This function calls:
   662 ;;		_FMready
   663 ;;		_FMwrite
   664 ;;		_dly
   665 ;; This function is called by:
   666 ;;		_nextChannel
   667 ;;		_previousChannel
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           	psect	text3
   672  00083A                     __ptext3:
   673                           	opt stack 0
   674  00083A                     _FMfrequenc:
   675                           	opt stack 25
   676                           
   677                           ;main.c: 427: unsigned int dat;
   678                           ;main.c: 428: unsigned int cn;
   679                           ;main.c: 430: cn = f - 690;
   680                           
   681                           ;incstack = 0
   682  00083A  0E4E               	movlw	78
   683  00083C  2412               	addwf	FMfrequenc@f,w,c
   684  00083E  6E18               	movwf	FMfrequenc@cn,c
   685  000840  0EFD               	movlw	253
   686  000842  2013               	addwfc	FMfrequenc@f+1,w,c
   687  000844  6E19               	movwf	FMfrequenc@cn+1,c
   688                           
   689                           ;main.c: 433: regImg[2] &= ~0x0200;
   690  000846  9239               	bcf	_regImg+5,1,c
   691                           
   692                           ;main.c: 434: if (FMwrite(2) != 0) return 1;
   693  000848  0E02               	movlw	2
   694  00084A  ECDC  F003         	call	_FMwrite
   695  00084E  0900               	iorlw	0
   696  000850  A4D8               	btfss	status,2,c
   697  000852  0012               	return	
   698                           
   699                           ;main.c: 435: regImg[2] &= 0xfe00;
   700                           
   701                           ;	Return value of _FMfrequenc is never used
   702  000854  0E00               	movlw	0
   703  000856  1638               	andwf	_regImg+4,f,c
   704  000858  0EFE               	movlw	254
   705  00085A  1639               	andwf	_regImg+5,f,c
   706                           
   707                           ;main.c: 436: regImg[2] |= (cn | 0x0200);
   708  00085C  0E00               	movlw	0
   709  00085E  6E14               	movwf	??_FMfrequenc& (0+255),c
   710  000860  0E02               	movlw	2
   711  000862  6E15               	movwf	(??_FMfrequenc+1)& (0+255),c
   712  000864  C018  F016         	movff	FMfrequenc@cn,??_FMfrequenc+2
   713  000868  C019  F017         	movff	FMfrequenc@cn+1,??_FMfrequenc+3
   714  00086C  5014               	movf	??_FMfrequenc,w,c
   715  00086E  1216               	iorwf	??_FMfrequenc+2,f,c
   716  000870  5015               	movf	??_FMfrequenc+1,w,c
   717  000872  1217               	iorwf	??_FMfrequenc+3,f,c
   718  000874  5016               	movf	??_FMfrequenc+2,w,c
   719  000876  1238               	iorwf	_regImg+4,f,c
   720  000878  5017               	movf	??_FMfrequenc+3,w,c
   721  00087A  1239               	iorwf	_regImg+5,f,c
   722                           
   723                           ;main.c: 437: if (FMwrite(2) != 0) return 1;
   724  00087C  0E02               	movlw	2
   725  00087E  ECDC  F003         	call	_FMwrite
   726  000882  0900               	iorlw	0
   727  000884  A4D8               	btfss	status,2,c
   728  000886  0012               	return	
   729                           
   730                           ;main.c: 439: dly(2);
   731                           
   732                           ;main.c: 438: do {
   733                           
   734                           ;	Return value of _FMfrequenc is never used
   735  000888  0E00               	movlw	0
   736  00088A  6E02               	movwf	dly@d+1,c
   737  00088C  0E02               	movlw	2
   738  00088E  6E01               	movwf	dly@d,c
   739  000890  ECD8  F004         	call	_dly	;wreg free
   740                           
   741                           ;main.c: 440: if (FMready(&dat) != 0) return 1;
   742  000894  0E1A               	movlw	low FMfrequenc@dat
   743  000896  6E0C               	movwf	FMready@rdy,c
   744  000898  0E00               	movlw	high FMfrequenc@dat
   745  00089A  6E0D               	movwf	FMready@rdy+1,c
   746  00089C  ECB5  F004         	call	_FMready	;wreg free
   747  0008A0  0900               	iorlw	0
   748  0008A2  A4D8               	btfss	status,2,c
   749  0008A4  0012               	return	
   750                           
   751                           ;main.c: 441: } while (!dat);
   752                           
   753                           ;	Return value of _FMfrequenc is never used
   754  0008A6  501A               	movf	FMfrequenc@dat,w,c
   755  0008A8  101B               	iorwf	FMfrequenc@dat+1,w,c
   756  0008AA  D7EC               	goto	L1
   757  0008AC                     __end_of_FMfrequenc:
   758                           	opt stack 0
   759                           tblptru	equ	0xFF8
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           status	equ	0xFD8
   763                           
   764 ;; *************** function _errfm *****************
   765 ;; Defined at:
   766 ;;		line 544 in file "main.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;		None
   769 ;; Auto vars:     Size  Location     Type
   770 ;;		None
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      void 
   773 ;; Registers used:
   774 ;;		None
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   780 ;;      Params:         0       0       0       0
   781 ;;      Locals:         0       0       0       0
   782 ;;      Temps:          0       0       0       0
   783 ;;      Totals:         0       0       0       0
   784 ;;Total ram usage:        0 bytes
   785 ;; Hardware stack levels used:    1
   786 ;; This function calls:
   787 ;;		Nothing
   788 ;; This function is called by:
   789 ;;		_main
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           	psect	text4
   794  000AEE                     __ptext4:
   795                           	opt stack 0
   796  000AEE                     _errfm:
   797                           	opt stack 30
   798  000AEE                     l216:
   799  000AEE  D7FF               	goto	l216
   800  000AF0                     __end_of_errfm:
   801                           	opt stack 0
   802                           tblptru	equ	0xFF8
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           status	equ	0xFD8
   806                           
   807 ;; *************** function _butnEvent *****************
   808 ;; Defined at:
   809 ;;		line 78 in file "main.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;		None
   812 ;; Auto vars:     Size  Location     Type
   813 ;;  c               2   11[COMRAM] int 
   814 ;;  c               2    9[COMRAM] int 
   815 ;;  c               2    7[COMRAM] int 
   816 ;;  c               2    5[COMRAM] int 
   817 ;;  c               2    3[COMRAM] int 
   818 ;; Return value:  Size  Location     Type
   819 ;;                  2    0[COMRAM] int 
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   827 ;;      Params:         2       0       0       0
   828 ;;      Locals:        10       0       0       0
   829 ;;      Temps:          1       0       0       0
   830 ;;      Totals:        13       0       0       0
   831 ;;Total ram usage:       13 bytes
   832 ;; Hardware stack levels used:    1
   833 ;; This function calls:
   834 ;;		Nothing
   835 ;; This function is called by:
   836 ;;		_main
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text5
   841  00033A                     __ptext5:
   842                           	opt stack 0
   843  00033A                     _butnEvent:
   844                           	opt stack 30
   845                           
   846                           ;main.c: 80: if (PORTAbits.RA0 == 0)
   847                           
   848                           ;incstack = 0
   849  00033A  B080               	btfsc	3968,0,c	;volatile
   850  00033C  D026               	goto	l75
   851                           
   852                           ;main.c: 81: {
   853                           ;main.c: 82: for (int c = 0; c <= 10; c++)_delay((unsigned long)((5)*(8000000/4000.0)));
   854  00033E  0E00               	movlw	0
   855  000340  6E05               	movwf	butnEvent@c+1,c
   856  000342  0E00               	movlw	0
   857  000344  6E04               	movwf	butnEvent@c,c
   858  000346  BE05               	btfsc	butnEvent@c+1,7,c
   859  000348  D006               	goto	l1613
   860  00034A  5005               	movf	butnEvent@c+1,w,c
   861  00034C  E112               	bnz	l77
   862  00034E  0E0B               	movlw	11
   863  000350  5C04               	subwf	butnEvent@c,w,c
   864  000352  B0D8               	btfsc	status,0,c
   865  000354  D00E               	goto	l77
   866  000356                     l1613:
   867  000356  0E0D               	movlw	13
   868  000358  6E03               	movwf	??_butnEvent& (0+255),c
   869  00035A  0EFC               	movlw	252
   870  00035C                     u1307:
   871  00035C  2EE8               	decfsz	wreg,f,c
   872  00035E  D7FE               	goto	u1307
   873  000360  2E03               	decfsz	??_butnEvent& (0+255),f,c
   874  000362  D7FC               	goto	u1307
   875  000364  4A04               	infsnz	butnEvent@c,f,c
   876  000366  2A05               	incf	butnEvent@c+1,f,c
   877  000368  BE05               	btfsc	butnEvent@c+1,7,c
   878  00036A  D7F5               	goto	l1613
   879  00036C  5005               	movf	butnEvent@c+1,w,c
   880  00036E  E101               	bnz	u1020
   881  000370  D7EE               	goto	L2
   882  000372                     u1020:
   883  000372                     l77:
   884                           
   885                           ;main.c: 83: if (PORTAbits.RA0 == 0)
   886  000372  B080               	btfsc	3968,0,c	;volatile
   887  000374  D005               	goto	l1623
   888                           
   889                           ;main.c: 84: {
   890                           ;main.c: 86: return 1;
   891  000376  0E00               	movlw	0
   892  000378  6E02               	movwf	?_butnEvent+1,c
   893  00037A  0E01               	movlw	1
   894  00037C  6E01               	movwf	?_butnEvent,c
   895  00037E  0012               	return	
   896  000380                     l1623:
   897                           
   898                           ;main.c: 89: return 0;
   899  000380  0E00               	movlw	0
   900  000382  6E02               	movwf	?_butnEvent+1,c
   901  000384  0E00               	movlw	0
   902  000386  6E01               	movwf	?_butnEvent,c
   903  000388  0012               	return	
   904  00038A                     l75:
   905                           
   906                           ;main.c: 90: }
   907                           ;main.c: 91: }
   908                           ;main.c: 93: if (PORTAbits.RA1 == 0)
   909  00038A  B280               	btfsc	3968,1,c	;volatile
   910  00038C  D026               	goto	l81
   911                           
   912                           ;main.c: 94: {
   913                           ;main.c: 95: for (int c = 0; c <= 10; c++)_delay((unsigned long)((5)*(8000000/4000.0)));
   914  00038E  0E00               	movlw	0
   915  000390  6E07               	movwf	butnEvent@c_499+1,c
   916  000392  0E00               	movlw	0
   917  000394  6E06               	movwf	butnEvent@c_499,c
   918  000396  BE07               	btfsc	butnEvent@c_499+1,7,c
   919  000398  D006               	goto	l1633
   920  00039A  5007               	movf	butnEvent@c_499+1,w,c
   921  00039C  E112               	bnz	l83
   922  00039E  0E0B               	movlw	11
   923  0003A0  5C06               	subwf	butnEvent@c_499,w,c
   924  0003A2  B0D8               	btfsc	status,0,c
   925  0003A4  D00E               	goto	l83
   926  0003A6                     l1633:
   927  0003A6  0E0D               	movlw	13
   928  0003A8  6E03               	movwf	??_butnEvent& (0+255),c
   929  0003AA  0EFC               	movlw	252
   930  0003AC                     u1317:
   931  0003AC  2EE8               	decfsz	wreg,f,c
   932  0003AE  D7FE               	goto	u1317
   933  0003B0  2E03               	decfsz	??_butnEvent& (0+255),f,c
   934  0003B2  D7FC               	goto	u1317
   935  0003B4  4A06               	infsnz	butnEvent@c_499,f,c
   936  0003B6  2A07               	incf	butnEvent@c_499+1,f,c
   937  0003B8  BE07               	btfsc	butnEvent@c_499+1,7,c
   938  0003BA  D7F5               	goto	l1633
   939  0003BC  5007               	movf	butnEvent@c_499+1,w,c
   940  0003BE  E101               	bnz	u1060
   941  0003C0  D7EE               	goto	L3
   942  0003C2                     u1060:
   943  0003C2                     l83:
   944                           
   945                           ;main.c: 96: if (PORTAbits.RA1 == 0)
   946  0003C2  B280               	btfsc	3968,1,c	;volatile
   947  0003C4  D005               	goto	l1643
   948                           
   949                           ;main.c: 97: {
   950                           ;main.c: 98: return 2;
   951  0003C6  0E00               	movlw	0
   952  0003C8  6E02               	movwf	?_butnEvent+1,c
   953  0003CA  0E02               	movlw	2
   954  0003CC  6E01               	movwf	?_butnEvent,c
   955  0003CE  0012               	return	
   956  0003D0                     l1643:
   957                           
   958                           ;main.c: 100: return 0;
   959  0003D0  0E00               	movlw	0
   960  0003D2  6E02               	movwf	?_butnEvent+1,c
   961  0003D4  0E00               	movlw	0
   962  0003D6  6E01               	movwf	?_butnEvent,c
   963  0003D8  0012               	return	
   964  0003DA                     l81:
   965                           
   966                           ;main.c: 101: }
   967                           ;main.c: 102: }
   968                           ;main.c: 104: if (PORTBbits.RB0 == 0)
   969  0003DA  B081               	btfsc	3969,0,c	;volatile
   970  0003DC  D026               	goto	l86
   971                           
   972                           ;main.c: 105: {
   973                           ;main.c: 106: for (int c = 0; c <= 10; c++)_delay((unsigned long)((5)*(8000000/4000.0)))
      +                          ;
   974  0003DE  0E00               	movlw	0
   975  0003E0  6E09               	movwf	butnEvent@c_508+1,c
   976  0003E2  0E00               	movlw	0
   977  0003E4  6E08               	movwf	butnEvent@c_508,c
   978  0003E6  BE09               	btfsc	butnEvent@c_508+1,7,c
   979  0003E8  D006               	goto	l1653
   980  0003EA  5009               	movf	butnEvent@c_508+1,w,c
   981  0003EC  E112               	bnz	l88
   982  0003EE  0E0B               	movlw	11
   983  0003F0  5C08               	subwf	butnEvent@c_508,w,c
   984  0003F2  B0D8               	btfsc	status,0,c
   985  0003F4  D00E               	goto	l88
   986  0003F6                     l1653:
   987  0003F6  0E0D               	movlw	13
   988  0003F8  6E03               	movwf	??_butnEvent& (0+255),c
   989  0003FA  0EFC               	movlw	252
   990  0003FC                     u1327:
   991  0003FC  2EE8               	decfsz	wreg,f,c
   992  0003FE  D7FE               	goto	u1327
   993  000400  2E03               	decfsz	??_butnEvent& (0+255),f,c
   994  000402  D7FC               	goto	u1327
   995  000404  4A08               	infsnz	butnEvent@c_508,f,c
   996  000406  2A09               	incf	butnEvent@c_508+1,f,c
   997  000408  BE09               	btfsc	butnEvent@c_508+1,7,c
   998  00040A  D7F5               	goto	l1653
   999  00040C  5009               	movf	butnEvent@c_508+1,w,c
  1000  00040E  E101               	bnz	u1100
  1001  000410  D7EE               	goto	L4
  1002  000412                     u1100:
  1003  000412                     l88:
  1004                           
  1005                           ;main.c: 107: if (PORTBbits.RB0 == 0)
  1006  000412  B081               	btfsc	3969,0,c	;volatile
  1007  000414  D005               	goto	l1663
  1008                           
  1009                           ;main.c: 108: {
  1010                           ;main.c: 109: return 3;
  1011  000416  0E00               	movlw	0
  1012  000418  6E02               	movwf	?_butnEvent+1,c
  1013  00041A  0E03               	movlw	3
  1014  00041C  6E01               	movwf	?_butnEvent,c
  1015  00041E  0012               	return	
  1016  000420                     l1663:
  1017                           
  1018                           ;main.c: 111: return 0;
  1019  000420  0E00               	movlw	0
  1020  000422  6E02               	movwf	?_butnEvent+1,c
  1021  000424  0E00               	movlw	0
  1022  000426  6E01               	movwf	?_butnEvent,c
  1023  000428  0012               	return	
  1024  00042A                     l86:
  1025                           
  1026                           ;main.c: 112: }
  1027                           ;main.c: 113: }
  1028                           ;main.c: 115: if (PORTBbits.RB5 == 0)
  1029  00042A  BA81               	btfsc	3969,5,c	;volatile
  1030  00042C  D026               	goto	l91
  1031                           
  1032                           ;main.c: 116: {
  1033                           ;main.c: 117: for (int c = 0; c <= 10; c++)_delay((unsigned long)((5)*(8000000/4000.0)))
      +                          ;
  1034  00042E  0E00               	movlw	0
  1035  000430  6E0B               	movwf	butnEvent@c_509+1,c
  1036  000432  0E00               	movlw	0
  1037  000434  6E0A               	movwf	butnEvent@c_509,c
  1038  000436  BE0B               	btfsc	butnEvent@c_509+1,7,c
  1039  000438  D006               	goto	l1673
  1040  00043A  500B               	movf	butnEvent@c_509+1,w,c
  1041  00043C  E112               	bnz	l93
  1042  00043E  0E0B               	movlw	11
  1043  000440  5C0A               	subwf	butnEvent@c_509,w,c
  1044  000442  B0D8               	btfsc	status,0,c
  1045  000444  D00E               	goto	l93
  1046  000446                     l1673:
  1047  000446  0E0D               	movlw	13
  1048  000448  6E03               	movwf	??_butnEvent& (0+255),c
  1049  00044A  0EFC               	movlw	252
  1050  00044C                     u1337:
  1051  00044C  2EE8               	decfsz	wreg,f,c
  1052  00044E  D7FE               	goto	u1337
  1053  000450  2E03               	decfsz	??_butnEvent& (0+255),f,c
  1054  000452  D7FC               	goto	u1337
  1055  000454  4A0A               	infsnz	butnEvent@c_509,f,c
  1056  000456  2A0B               	incf	butnEvent@c_509+1,f,c
  1057  000458  BE0B               	btfsc	butnEvent@c_509+1,7,c
  1058  00045A  D7F5               	goto	l1673
  1059  00045C  500B               	movf	butnEvent@c_509+1,w,c
  1060  00045E  E101               	bnz	u1140
  1061  000460  D7EE               	goto	L5
  1062  000462                     u1140:
  1063  000462                     l93:
  1064                           
  1065                           ;main.c: 118: if (PORTBbits.RB5 == 0)
  1066  000462  BA81               	btfsc	3969,5,c	;volatile
  1067  000464  D005               	goto	l1683
  1068                           
  1069                           ;main.c: 119: {
  1070                           ;main.c: 120: return 4;
  1071  000466  0E00               	movlw	0
  1072  000468  6E02               	movwf	?_butnEvent+1,c
  1073  00046A  0E04               	movlw	4
  1074  00046C  6E01               	movwf	?_butnEvent,c
  1075  00046E  0012               	return	
  1076  000470                     l1683:
  1077                           
  1078                           ;main.c: 122: return 0;
  1079  000470  0E00               	movlw	0
  1080  000472  6E02               	movwf	?_butnEvent+1,c
  1081  000474  0E00               	movlw	0
  1082  000476  6E01               	movwf	?_butnEvent,c
  1083  000478  0012               	return	
  1084  00047A                     l91:
  1085                           
  1086                           ;main.c: 123: }
  1087                           ;main.c: 124: }
  1088                           ;main.c: 126: if (PORTGbits.RG0 == 0)
  1089  00047A  B086               	btfsc	3974,0,c	;volatile
  1090  00047C  0012               	return	
  1091                           
  1092                           ;main.c: 127: {
  1093                           ;main.c: 128: for (int c = 0; c <= 10; c++)_delay((unsigned long)((5)*(8000000/4000.0)))
      +                          ;
  1094  00047E  0E00               	movlw	0
  1095  000480  6E0D               	movwf	butnEvent@c_516+1,c
  1096  000482  0E00               	movlw	0
  1097  000484  6E0C               	movwf	butnEvent@c_516,c
  1098  000486  BE0D               	btfsc	butnEvent@c_516+1,7,c
  1099  000488  D006               	goto	l1693
  1100  00048A  500D               	movf	butnEvent@c_516+1,w,c
  1101  00048C  E112               	bnz	l98
  1102  00048E  0E0B               	movlw	11
  1103  000490  5C0C               	subwf	butnEvent@c_516,w,c
  1104  000492  B0D8               	btfsc	status,0,c
  1105  000494  D00E               	goto	l98
  1106  000496                     l1693:
  1107  000496  0E0D               	movlw	13
  1108  000498  6E03               	movwf	??_butnEvent& (0+255),c
  1109  00049A  0EFC               	movlw	252
  1110  00049C                     u1347:
  1111  00049C  2EE8               	decfsz	wreg,f,c
  1112  00049E  D7FE               	goto	u1347
  1113  0004A0  2E03               	decfsz	??_butnEvent& (0+255),f,c
  1114  0004A2  D7FC               	goto	u1347
  1115  0004A4  4A0C               	infsnz	butnEvent@c_516,f,c
  1116  0004A6  2A0D               	incf	butnEvent@c_516+1,f,c
  1117  0004A8  BE0D               	btfsc	butnEvent@c_516+1,7,c
  1118  0004AA  D7F5               	goto	l1693
  1119  0004AC  500D               	movf	butnEvent@c_516+1,w,c
  1120  0004AE  E101               	bnz	u1180
  1121  0004B0  D7EE               	goto	L6
  1122  0004B2                     u1180:
  1123  0004B2                     l98:
  1124                           
  1125                           ;main.c: 129: if (PORTGbits.RG0 == 0)
  1126  0004B2  B086               	btfsc	3974,0,c	;volatile
  1127  0004B4  D005               	goto	l1703
  1128                           
  1129                           ;main.c: 130: {
  1130                           ;main.c: 131: return 5;
  1131  0004B6  0E00               	movlw	0
  1132  0004B8  6E02               	movwf	?_butnEvent+1,c
  1133  0004BA  0E05               	movlw	5
  1134  0004BC  6E01               	movwf	?_butnEvent,c
  1135                           
  1136                           ;main.c: 132: } else {
  1137  0004BE  0012               	return	
  1138  0004C0                     l1703:
  1139                           
  1140                           ;main.c: 133: return 0;
  1141  0004C0  0E00               	movlw	0
  1142  0004C2  6E02               	movwf	?_butnEvent+1,c
  1143  0004C4  0E00               	movlw	0
  1144  0004C6  6E01               	movwf	?_butnEvent,c
  1145  0004C8  0012               	return	
  1146  0004CA                     __end_of_butnEvent:
  1147                           	opt stack 0
  1148                           tblptru	equ	0xFF8
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           status	equ	0xFD8
  1152                           
  1153 ;; *************** function _VolumeUp *****************
  1154 ;; Defined at:
  1155 ;;		line 509 in file "main.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      unsigned char 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1169 ;;      Params:         0       0       0       0
  1170 ;;      Locals:         0       0       0       0
  1171 ;;      Temps:          0       0       0       0
  1172 ;;      Totals:         0       0       0       0
  1173 ;;Total ram usage:        0 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    5
  1176 ;; This function calls:
  1177 ;;		_delay_10ms
  1178 ;;		_setVolume
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text6
  1185  000A40                     __ptext6:
  1186                           	opt stack 0
  1187  000A40                     _VolumeUp:
  1188                           	opt stack 25
  1189                           
  1190                           ;main.c: 510: setVolume(18);
  1191                           
  1192                           ;incstack = 0
  1193  000A40  0E00               	movlw	0
  1194  000A42  6E13               	movwf	setVolume@volume+1,c
  1195  000A44  0E12               	movlw	18
  1196  000A46  6E12               	movwf	setVolume@volume,c
  1197  000A48  EC2D  F003         	call	_setVolume	;wreg free
  1198                           
  1199                           ;main.c: 511: PORTCbits.RC6 = 1;
  1200  000A4C  8C82               	bsf	3970,6,c	;volatile
  1201                           
  1202                           ;main.c: 512: delay_10ms(10);
  1203  000A4E  0E00               	movlw	0
  1204  000A50  6E02               	movwf	delay_10ms@n+1,c
  1205  000A52  0E0A               	movlw	10
  1206  000A54  6E01               	movwf	delay_10ms@n,c
  1207  000A56  ECF1  F004         	call	_delay_10ms	;wreg free
  1208                           
  1209                           ;main.c: 513: PORTCbits.RC6 = 0;
  1210  000A5A  9C82               	bcf	3970,6,c	;volatile
  1211  000A5C  0012               	return	
  1212  000A5E                     __end_of_VolumeUp:
  1213                           	opt stack 0
  1214                           tblptru	equ	0xFF8
  1215                           postinc0	equ	0xFEE
  1216                           wreg	equ	0xFE8
  1217                           status	equ	0xFD8
  1218                           
  1219 ;; *************** function _VolumeDown *****************
  1220 ;; Defined at:
  1221 ;;		line 518 in file "main.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;		None
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;		None
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  1    wreg      unsigned char 
  1228 ;; Registers used:
  1229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1235 ;;      Params:         0       0       0       0
  1236 ;;      Locals:         0       0       0       0
  1237 ;;      Temps:          0       0       0       0
  1238 ;;      Totals:         0       0       0       0
  1239 ;;Total ram usage:        0 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; Hardware stack levels required when called:    5
  1242 ;; This function calls:
  1243 ;;		_delay_10ms
  1244 ;;		_setVolume
  1245 ;; This function is called by:
  1246 ;;		_main
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text7
  1251  000A5E                     __ptext7:
  1252                           	opt stack 0
  1253  000A5E                     _VolumeDown:
  1254                           	opt stack 25
  1255                           
  1256                           ;main.c: 519: setVolume(10);
  1257                           
  1258                           ;incstack = 0
  1259  000A5E  0E00               	movlw	0
  1260  000A60  6E13               	movwf	setVolume@volume+1,c
  1261  000A62  0E0A               	movlw	10
  1262  000A64  6E12               	movwf	setVolume@volume,c
  1263  000A66  EC2D  F003         	call	_setVolume	;wreg free
  1264                           
  1265                           ;main.c: 520: PORTCbits.RC7 = 1;
  1266  000A6A  8E82               	bsf	3970,7,c	;volatile
  1267                           
  1268                           ;main.c: 521: delay_10ms(10);
  1269  000A6C  0E00               	movlw	0
  1270  000A6E  6E02               	movwf	delay_10ms@n+1,c
  1271  000A70  0E0A               	movlw	10
  1272  000A72  6E01               	movwf	delay_10ms@n,c
  1273  000A74  ECF1  F004         	call	_delay_10ms	;wreg free
  1274                           
  1275                           ;main.c: 522: PORTCbits.RC7 = 0;
  1276  000A78  9E82               	bcf	3970,7,c	;volatile
  1277  000A7A  0012               	return	
  1278  000A7C                     __end_of_VolumeDown:
  1279                           	opt stack 0
  1280                           tblptru	equ	0xFF8
  1281                           postinc0	equ	0xFEE
  1282                           wreg	equ	0xFE8
  1283                           status	equ	0xFD8
  1284                           
  1285 ;; *************** function _setVolume *****************
  1286 ;; Defined at:
  1287 ;;		line 387 in file "main.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;  volume          2   17[COMRAM] int 
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;  volume_map     19   22[COMRAM] const unsigned char [19]
  1292 ;;  dat             2   41[COMRAM] unsigned int 
  1293 ;;  cn              2    0        unsigned int 
  1294 ;;  temp_vol        1   44[COMRAM] unsigned char 
  1295 ;;  volume_setti    1   43[COMRAM] unsigned char 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      unsigned char 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1305 ;;      Params:         2       0       0       0
  1306 ;;      Locals:        23       0       0       0
  1307 ;;      Temps:          3       0       0       0
  1308 ;;      Totals:        28       0       0       0
  1309 ;;Total ram usage:       28 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    4
  1312 ;; This function calls:
  1313 ;;		_FMready
  1314 ;;		_FMwrite
  1315 ;;		_dly
  1316 ;; This function is called by:
  1317 ;;		_VolumeUp
  1318 ;;		_VolumeDown
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text8
  1323  00065A                     __ptext8:
  1324                           	opt stack 0
  1325  00065A                     _setVolume:
  1326                           	opt stack 25
  1327                           
  1328                           ;main.c: 388: unsigned int dat;
  1329                           ;main.c: 389: unsigned int cn;
  1330                           ;main.c: 392: unsigned char temp_vol = volume;
  1331                           
  1332                           ;incstack = 0
  1333  00065A  C012  F02D         	movff	setVolume@volume,setVolume@temp_vol
  1334                           
  1335                           ;main.c: 396: else if(temp_vol > 18)
  1336                           
  1337                           ;main.c: 395: temp_vol = 0;
  1338                           
  1339                           ;main.c: 394: if(temp_vol < 0)
  1340  00065E  0E12               	movlw	18
  1341  000660  642D               	cpfsgt	setVolume@temp_vol,c
  1342  000662  D002               	goto	l1551
  1343                           
  1344                           ;main.c: 397: temp_vol = 18;
  1345  000664  0E12               	movlw	18
  1346  000666  6E2D               	movwf	setVolume@temp_vol,c
  1347  000668                     l1551:
  1348                           
  1349                           ;main.c: 400: const unsigned char volume_map[19] = {
  1350                           ;main.c: 401: 0x0F, 0xCF, 0xDF, 0xFF, 0xCB,
  1351                           ;main.c: 402: 0xDB, 0xFB, 0xFA, 0xF9, 0xF8,
  1352                           ;main.c: 403: 0xF7, 0xD6, 0xE6, 0xF6, 0xE3,
  1353                           ;main.c: 404: 0xF3, 0xF2, 0xF1, 0xF0
  1354                           ;main.c: 405: };
  1355  000668  0E25               	movlw	low setVolume@F6665
  1356  00066A  6EF6               	movwf	tblptrl,c
  1357  00066C                     	if	1	;There is more than 1 active tblptr byte
  1358  00066C  0E03               	movlw	high setVolume@F6665
  1359  00066E  6EF7               	movwf	tblptrh,c
  1360  000670                     	endif
  1361  000670                     	if	0	;There are less than 3 active tblptr bytes
  1362  000670                     	endif
  1363  000670  EE20  F017         	lfsr	2,setVolume@volume_map
  1364  000674  0E12               	movlw	18
  1365  000676                     u890:
  1366  000676  0009               	tblrd		*+
  1367  000678  CFF5 FFDE          	movff	tablat,postinc2
  1368  00067C  06E8               	decf	wreg,f,c
  1369  00067E  E2FB               	bc	u890
  1370                           
  1371                           ;main.c: 408: unsigned char volume_setting = volume_map[temp_vol];
  1372  000680  502D               	movf	setVolume@temp_vol,w,c
  1373  000682  0D01               	mullw	1
  1374  000684  0E17               	movlw	low setVolume@volume_map
  1375  000686  24F3               	addwf	prodl,w,c
  1376  000688  6ED9               	movwf	fsr2l,c
  1377  00068A  0E00               	movlw	high setVolume@volume_map
  1378  00068C  20F4               	addwfc	prodh,w,c
  1379  00068E  6EDA               	movwf	fsr2h,c
  1380  000690  50DF               	movf	indf2,w,c
  1381  000692  6E2C               	movwf	setVolume@volume_setting,c
  1382                           
  1383                           ;main.c: 410: regImg[3] &= 0xF87F;
  1384  000694  0E7F               	movlw	127
  1385  000696  163A               	andwf	_regImg+6,f,c
  1386  000698  0EF8               	movlw	248
  1387  00069A  163B               	andwf	_regImg+7,f,c
  1388                           
  1389                           ;main.c: 411: regImg[3] |= ((volume_setting & 0x0F) << 7);
  1390  00069C  502C               	movf	setVolume@volume_setting,w,c
  1391  00069E  0B0F               	andlw	15
  1392  0006A0  6E14               	movwf	??_setVolume& (0+255),c
  1393  0006A2  6A15               	clrf	(??_setVolume+1)& (0+255),c
  1394  0006A4  0E07               	movlw	7
  1395  0006A6                     u905:
  1396  0006A6  90D8               	bcf	status,0,c
  1397  0006A8  3614               	rlcf	??_setVolume,f,c
  1398  0006AA  3615               	rlcf	??_setVolume+1,f,c
  1399  0006AC  2EE8               	decfsz	wreg,f,c
  1400  0006AE  D7FB               	goto	u905
  1401  0006B0  5014               	movf	??_setVolume,w,c
  1402  0006B2  123A               	iorwf	_regImg+6,f,c
  1403  0006B4  5015               	movf	??_setVolume+1,w,c
  1404  0006B6  123B               	iorwf	_regImg+7,f,c
  1405                           
  1406                           ;main.c: 412: if (FMwrite(3) != 0) return 1;
  1407  0006B8  0E03               	movlw	3
  1408  0006BA  ECDC  F003         	call	_FMwrite
  1409  0006BE  0900               	iorlw	0
  1410  0006C0  A4D8               	btfss	status,2,c
  1411  0006C2  0012               	return	
  1412                           
  1413                           ;main.c: 413: regImg[14] &= 0x0FFF;
  1414                           
  1415                           ;	Return value of _setVolume is never used
  1416  0006C4  0EFF               	movlw	255
  1417  0006C6  1650               	andwf	_regImg+28,f,c
  1418  0006C8  0E0F               	movlw	15
  1419  0006CA  1651               	andwf	_regImg+29,f,c
  1420                           
  1421                           ;main.c: 414: regImg[14] |= ((volume_setting & 0xF0) << 8);
  1422  0006CC  C02C  F014         	movff	setVolume@volume_setting,??_setVolume
  1423  0006D0  0EF0               	movlw	240
  1424  0006D2  1614               	andwf	??_setVolume,f,c
  1425  0006D4  5014               	movf	??_setVolume,w,c
  1426  0006D6  6E16               	movwf	(??_setVolume+2)& (0+255),c
  1427  0006D8  6A15               	clrf	(??_setVolume+1)& (0+255),c
  1428  0006DA  5015               	movf	??_setVolume+1,w,c
  1429  0006DC  1250               	iorwf	_regImg+28,f,c
  1430  0006DE  5016               	movf	??_setVolume+2,w,c
  1431  0006E0  1251               	iorwf	_regImg+29,f,c
  1432                           
  1433                           ;main.c: 415: if (FMwrite(14) != 0) return 1;
  1434  0006E2  0E0E               	movlw	14
  1435  0006E4  ECDC  F003         	call	_FMwrite
  1436  0006E8  0900               	iorlw	0
  1437  0006EA  A4D8               	btfss	status,2,c
  1438  0006EC  0012               	return	
  1439                           
  1440                           ;main.c: 418: dly(2);
  1441                           
  1442                           ;main.c: 417: do {
  1443                           
  1444                           ;	Return value of _setVolume is never used
  1445  0006EE  0E00               	movlw	0
  1446  0006F0  6E02               	movwf	dly@d+1,c
  1447  0006F2  0E02               	movlw	2
  1448  0006F4  6E01               	movwf	dly@d,c
  1449  0006F6  ECD8  F004         	call	_dly	;wreg free
  1450                           
  1451                           ;main.c: 419: if (FMready(&dat) != 0) return 1;
  1452  0006FA  0E2A               	movlw	low setVolume@dat
  1453  0006FC  6E0C               	movwf	FMready@rdy,c
  1454  0006FE  0E00               	movlw	high setVolume@dat
  1455  000700  6E0D               	movwf	FMready@rdy+1,c
  1456  000702  ECB5  F004         	call	_FMready	;wreg free
  1457  000706  0900               	iorlw	0
  1458  000708  A4D8               	btfss	status,2,c
  1459  00070A  0012               	return	
  1460                           
  1461                           ;main.c: 420: } while (!dat);
  1462                           
  1463                           ;	Return value of _setVolume is never used
  1464  00070C  502A               	movf	setVolume@dat,w,c
  1465  00070E  102B               	iorwf	setVolume@dat+1,w,c
  1466  000710  D7EC               	goto	L8
  1467  000712                     __end_of_setVolume:
  1468                           	opt stack 0
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           prodh	equ	0xFF4
  1474                           prodl	equ	0xFF3
  1475                           postinc0	equ	0xFEE
  1476                           wreg	equ	0xFE8
  1477                           indf2	equ	0xFDF
  1478                           postinc2	equ	0xFDE
  1479                           fsr2h	equ	0xFDA
  1480                           fsr2l	equ	0xFD9
  1481                           status	equ	0xFD8
  1482                           
  1483 ;; *************** function _delay_10ms *****************
  1484 ;; Defined at:
  1485 ;;		line 603 in file "main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  n               2    0[COMRAM] unsigned int 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;		None
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, status,2, status,0
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1499 ;;      Params:         2       0       0       0
  1500 ;;      Locals:         0       0       0       0
  1501 ;;      Temps:          1       0       0       0
  1502 ;;      Totals:         3       0       0       0
  1503 ;;Total ram usage:        3 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; This function calls:
  1506 ;;		Nothing
  1507 ;; This function is called by:
  1508 ;;		_nextChannel
  1509 ;;		_previousChannel
  1510 ;;		_VolumeUp
  1511 ;;		_VolumeDown
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           	psect	text9
  1516  0009E2                     __ptext9:
  1517                           	opt stack 0
  1518  0009E2                     _delay_10ms:
  1519                           	opt stack 29
  1520                           
  1521                           ;main.c: 604: while (n-- != 0) {
  1522                           
  1523                           ;incstack = 0
  1524  0009E2  D007               	goto	l1603
  1525  0009E4                     l1601:
  1526                           
  1527                           ;main.c: 605: _delay((unsigned long)((12)*(8000000/4000.0)));
  1528  0009E4  0E20               	movlw	32
  1529  0009E6  6E03               	movwf	??_delay_10ms& (0+255),c
  1530  0009E8  0E2A               	movlw	42
  1531  0009EA                     u1357:
  1532  0009EA  2EE8               	decfsz	wreg,f,c
  1533  0009EC  D7FE               	goto	u1357
  1534  0009EE  2E03               	decfsz	??_delay_10ms& (0+255),f,c
  1535  0009F0  D7FC               	goto	u1357
  1536  0009F2                     l1603:
  1537  0009F2  0601               	decf	delay_10ms@n,f,c
  1538  0009F4  A0D8               	btfss	status,0,c
  1539  0009F6  0602               	decf	delay_10ms@n+1,f,c
  1540  0009F8  2801               	incf	delay_10ms@n,w,c
  1541  0009FA  E1F4               	bnz	l1601
  1542  0009FC  2802               	incf	delay_10ms@n+1,w,c
  1543  0009FE  B4D8               	btfsc	status,2,c
  1544  000A00  0012               	return	
  1545  000A02  D7F0               	goto	l1601
  1546  000A04                     __end_of_delay_10ms:
  1547                           	opt stack 0
  1548                           tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           prodh	equ	0xFF4
  1553                           prodl	equ	0xFF3
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           indf2	equ	0xFDF
  1557                           postinc2	equ	0xFDE
  1558                           fsr2h	equ	0xFDA
  1559                           fsr2l	equ	0xFD9
  1560                           status	equ	0xFD8
  1561                           
  1562 ;; *************** function _MuteHard *****************
  1563 ;; Defined at:
  1564 ;;		line 527 in file "main.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;  down            1    wreg     unsigned char 
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  down            1    0[COMRAM] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      unsigned char 
  1571 ;; Registers used:
  1572 ;;		wreg
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1578 ;;      Params:         0       0       0       0
  1579 ;;      Locals:         0       0       0       0
  1580 ;;      Temps:          0       0       0       0
  1581 ;;      Totals:         0       0       0       0
  1582 ;;Total ram usage:        0 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; This function calls:
  1585 ;;		Nothing
  1586 ;; This function is called by:
  1587 ;;		_main
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text10
  1592  000AF0                     __ptext10:
  1593                           	opt stack 0
  1594  000AF0                     _MuteHard:
  1595                           	opt stack 30
  1596                           
  1597                           ;main.c: 530: return 0;
  1598                           ;	Return value of _MuteHard is never used
  1599                           
  1600                           ;incstack = 0
  1601  000AF0  0012               	return		;funcret
  1602  000AF2                     __end_of_MuteHard:
  1603                           	opt stack 0
  1604                           tblptru	equ	0xFF8
  1605                           tblptrh	equ	0xFF7
  1606                           tblptrl	equ	0xFF6
  1607                           tablat	equ	0xFF5
  1608                           prodh	equ	0xFF4
  1609                           prodl	equ	0xFF3
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           indf2	equ	0xFDF
  1613                           postinc2	equ	0xFDE
  1614                           fsr2h	equ	0xFDA
  1615                           fsr2l	equ	0xFD9
  1616                           status	equ	0xFD8
  1617                           
  1618 ;; *************** function _Init *****************
  1619 ;; Defined at:
  1620 ;;		line 173 in file "main.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  i               2    0        int 
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2, status,0, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1634 ;;      Params:         0       0       0       0
  1635 ;;      Locals:         0       0       0       0
  1636 ;;      Temps:          0       0       0       0
  1637 ;;      Totals:         0       0       0       0
  1638 ;;Total ram usage:        0 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    1
  1641 ;; This function calls:
  1642 ;;		_OpenI2C
  1643 ;; This function is called by:
  1644 ;;		_main
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           	psect	text11
  1649  0008AC                     __ptext11:
  1650                           	opt stack 0
  1651  0008AC                     _Init:
  1652                           	opt stack 29
  1653                           
  1654                           ;main.c: 175: int i;
  1655                           ;main.c: 177: OSCCON = 0b01110010;
  1656                           
  1657                           ;incstack = 0
  1658  0008AC  0E72               	movlw	114
  1659  0008AE  6ED3               	movwf	4051,c	;volatile
  1660                           
  1661                           ;main.c: 178: LCDSE0 = 0b11111111;
  1662  0008B0  010F               	movlb	15	; () banked
  1663  0008B2  695A               	setf	90,b	;volatile
  1664                           
  1665                           ; BSR set to: 15
  1666                           ;main.c: 179: LCDSE1 = 0b11111111;
  1667  0008B4  010F               	movlb	15	; () banked
  1668  0008B6  695B               	setf	91,b	;volatile
  1669                           
  1670                           ; BSR set to: 15
  1671                           ;main.c: 180: LCDSE2 = 0b11111111;
  1672  0008B8  010F               	movlb	15	; () banked
  1673  0008BA  695C               	setf	92,b	;volatile
  1674                           
  1675                           ;main.c: 181: LCDSE3 = 0b00000000;
  1676  0008BC  0E00               	movlw	0
  1677  0008BE  010F               	movlb	15	; () banked
  1678  0008C0  6F5D               	movwf	93,b	;volatile
  1679                           
  1680                           ;main.c: 182: LCDCON = 0b10001000;
  1681  0008C2  0E88               	movlw	136
  1682  0008C4  010F               	movlb	15	; () banked
  1683  0008C6  6F59               	movwf	89,b	;volatile
  1684                           
  1685                           ;main.c: 183: LCDPS = 0b00110110;
  1686  0008C8  0E36               	movlw	54
  1687  0008CA  010F               	movlb	15	; () banked
  1688  0008CC  6F58               	movwf	88,b	;volatile
  1689                           
  1690                           ;main.c: 184: ADCON1 = 0b00111111;
  1691  0008CE  0E3F               	movlw	63
  1692  0008D0  6EC1               	movwf	4033,c	;volatile
  1693                           
  1694                           ;main.c: 185: TRISA = 0b00000011;
  1695  0008D2  0E03               	movlw	3
  1696  0008D4  6E92               	movwf	3986,c	;volatile
  1697                           
  1698                           ;main.c: 186: TRISB = 0b00100001;
  1699  0008D6  0E21               	movlw	33
  1700  0008D8  6E93               	movwf	3987,c	;volatile
  1701                           
  1702                           ;main.c: 187: TRISC = 0b00011000;
  1703  0008DA  0E18               	movlw	24
  1704  0008DC  6E94               	movwf	3988,c	;volatile
  1705                           
  1706                           ; BSR set to: 15
  1707                           ;main.c: 188: TRISG = 0b11111111;
  1708  0008DE  6898               	setf	3992,c	;volatile
  1709                           
  1710                           ;main.c: 189: PORTA = 0;
  1711  0008E0  0E00               	movlw	0
  1712  0008E2  6E80               	movwf	3968,c	;volatile
  1713                           
  1714                           ;main.c: 190: PORTB = 0;
  1715  0008E4  0E00               	movlw	0
  1716  0008E6  6E81               	movwf	3969,c	;volatile
  1717                           
  1718                           ;main.c: 191: PORTC = 0;
  1719  0008E8  0E00               	movlw	0
  1720  0008EA  6E82               	movwf	3970,c	;volatile
  1721                           
  1722                           ; BSR set to: 15
  1723                           ;main.c: 192: INTCONbits.TMR0IF = 0;
  1724  0008EC  94F2               	bcf	intcon,2,c	;volatile
  1725                           
  1726                           ;main.c: 194: T0CON = 0b00001000;
  1727  0008EE  0E08               	movlw	8
  1728  0008F0  6ED5               	movwf	4053,c	;volatile
  1729                           
  1730                           ;main.c: 195: TMR0H = 0;
  1731  0008F2  0E00               	movlw	0
  1732  0008F4  6ED7               	movwf	4055,c	;volatile
  1733                           
  1734                           ;main.c: 196: TMR0L = 0;
  1735  0008F6  0E00               	movlw	0
  1736  0008F8  6ED6               	movwf	4054,c	;volatile
  1737                           
  1738                           ; BSR set to: 15
  1739                           ;main.c: 197: T0CONbits.TMR0ON = 1;
  1740  0008FA  8ED5               	bsf	4053,7,c	;volatile
  1741                           
  1742                           ; BSR set to: 15
  1743                           ;main.c: 198: OpenI2C(0b00001000, 0b10000000);
  1744  0008FC  0E80               	movlw	128
  1745  0008FE  6E01               	movwf	OpenI2C@slew,c
  1746  000900  0E08               	movlw	8
  1747  000902  EC3E  F005         	call	_OpenI2C
  1748                           
  1749                           ;main.c: 199: SSPADD = 0x3F;
  1750  000906  0E3F               	movlw	63
  1751  000908  6EC8               	movwf	4040,c	;volatile
  1752  00090A  0012               	return	
  1753  00090C                     __end_of_Init:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           prodh	equ	0xFF4
  1760                           prodl	equ	0xFF3
  1761                           intcon	equ	0xFF2
  1762                           postinc0	equ	0xFEE
  1763                           wreg	equ	0xFE8
  1764                           indf2	equ	0xFDF
  1765                           postinc2	equ	0xFDE
  1766                           fsr2h	equ	0xFDA
  1767                           fsr2l	equ	0xFD9
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _OpenI2C *****************
  1771 ;; Defined at:
  1772 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\i2c\i2c_open.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  sync_mode       1    wreg     unsigned char 
  1775 ;;  slew            1    0[COMRAM] unsigned char 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  sync_mode       1    1[COMRAM] unsigned char 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  1    wreg      void 
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, status,0
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1787 ;;      Params:         1       0       0       0
  1788 ;;      Locals:         1       0       0       0
  1789 ;;      Temps:          0       0       0       0
  1790 ;;      Totals:         2       0       0       0
  1791 ;;Total ram usage:        2 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; This function calls:
  1794 ;;		Nothing
  1795 ;; This function is called by:
  1796 ;;		_Init
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text12
  1801  000A7C                     __ptext12:
  1802                           	opt stack 0
  1803  000A7C                     _OpenI2C:
  1804                           	opt stack 29
  1805                           
  1806                           ;incstack = 0
  1807                           ;OpenI2C@sync_mode stored from wreg
  1808  000A7C  6E02               	movwf	OpenI2C@sync_mode,c
  1809  000A7E  0E3F               	movlw	63
  1810  000A80  16C7               	andwf	4039,f,c	;volatile
  1811  000A82  0E00               	movlw	0
  1812  000A84  6EC6               	movwf	4038,c	;volatile
  1813  000A86  0E00               	movlw	0
  1814  000A88  6EC5               	movwf	4037,c	;volatile
  1815  000A8A  5002               	movf	OpenI2C@sync_mode,w,c
  1816  000A8C  12C6               	iorwf	4038,f,c	;volatile
  1817  000A8E  5001               	movf	OpenI2C@slew,w,c
  1818  000A90  12C7               	iorwf	4039,f,c	;volatile
  1819  000A92  8694               	bsf	3988,3,c	;volatile
  1820  000A94  8894               	bsf	3988,4,c	;volatile
  1821  000A96  8AC6               	bsf	4038,5,c	;volatile
  1822  000A98  0012               	return		;funcret
  1823  000A9A                     __end_of_OpenI2C:
  1824                           	opt stack 0
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           prodh	equ	0xFF4
  1830                           prodl	equ	0xFF3
  1831                           intcon	equ	0xFF2
  1832                           postinc0	equ	0xFEE
  1833                           wreg	equ	0xFE8
  1834                           indf2	equ	0xFDF
  1835                           postinc2	equ	0xFDE
  1836                           fsr2h	equ	0xFDA
  1837                           fsr2l	equ	0xFD9
  1838                           status	equ	0xFD8
  1839                           
  1840 ;; *************** function _FMvers *****************
  1841 ;; Defined at:
  1842 ;;		line 457 in file "main.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;  vsn             2   11[COMRAM] PTR unsigned int 
  1845 ;;		 -> main@ui(2), 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;		None
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  1    wreg      unsigned char 
  1850 ;; Registers used:
  1851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1857 ;;      Params:         2       0       0       0
  1858 ;;      Locals:         0       0       0       0
  1859 ;;      Temps:          0       0       0       0
  1860 ;;      Totals:         2       0       0       0
  1861 ;;Total ram usage:        2 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    3
  1864 ;; This function calls:
  1865 ;;		_FMread
  1866 ;; This function is called by:
  1867 ;;		_main
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	text13
  1872  000ADE                     __ptext13:
  1873                           	opt stack 0
  1874  000ADE                     _FMvers:
  1875                           	opt stack 27
  1876                           
  1877                           ;main.c: 458: if (FMread(0x1C, vsn) != 0) return 1;
  1878                           
  1879                           ;incstack = 0
  1880  000ADE  C00C  F003         	movff	FMvers@vsn,FMread@data
  1881  000AE2  C00D  F004         	movff	FMvers@vsn+1,FMread@data+1
  1882  000AE6  0E1C               	movlw	28
  1883  000AE8  EC65  F002         	call	_FMread
  1884                           
  1885                           ;	Return value of _FMvers is never used
  1886  000AEC  0012               	return	
  1887  000AEE                     __end_of_FMvers:
  1888                           	opt stack 0
  1889                           tblptru	equ	0xFF8
  1890                           tblptrh	equ	0xFF7
  1891                           tblptrl	equ	0xFF6
  1892                           tablat	equ	0xFF5
  1893                           prodh	equ	0xFF4
  1894                           prodl	equ	0xFF3
  1895                           intcon	equ	0xFF2
  1896                           postinc0	equ	0xFEE
  1897                           wreg	equ	0xFE8
  1898                           indf2	equ	0xFDF
  1899                           postinc2	equ	0xFDE
  1900                           fsr2h	equ	0xFDA
  1901                           fsr2l	equ	0xFD9
  1902                           status	equ	0xFD8
  1903                           
  1904 ;; *************** function _FMinit *****************
  1905 ;; Defined at:
  1906 ;;		line 351 in file "main.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;		None
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;  dat             2   17[COMRAM] unsigned int 
  1911 ;;  ad              1   19[COMRAM] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      unsigned char 
  1914 ;; Registers used:
  1915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1921 ;;      Params:         0       0       0       0
  1922 ;;      Locals:         3       0       0       0
  1923 ;;      Temps:          0       0       0       0
  1924 ;;      Totals:         3       0       0       0
  1925 ;;Total ram usage:        3 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; Hardware stack levels required when called:    4
  1928 ;; This function calls:
  1929 ;;		_FMready
  1930 ;;		_FMwrite
  1931 ;;		_dly
  1932 ;;		_showFreq
  1933 ;; This function is called by:
  1934 ;;		_main
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text14
  1939  000594                     __ptext14:
  1940                           	opt stack 0
  1941  000594                     _FMinit:
  1942                           	opt stack 26
  1943                           
  1944                           ;main.c: 353: unsigned char ad;
  1945                           ;main.c: 354: unsigned int dat;
  1946                           ;main.c: 357: for (ad = 0; ad < 18; ad++) regImg[ad] = regDflt[ad];
  1947                           
  1948                           ;incstack = 0
  1949  000594  0E00               	movlw	0
  1950  000596  6E14               	movwf	FMinit@ad,c
  1951  000598                     l1729:
  1952  000598  0E11               	movlw	17
  1953  00059A  6414               	cpfsgt	FMinit@ad,c
  1954  00059C  D001               	goto	l1733
  1955  00059E  D018               	goto	l160
  1956  0005A0                     l1733:
  1957  0005A0  5014               	movf	FMinit@ad,w,c
  1958  0005A2  0D02               	mullw	2
  1959  0005A4  0E01               	movlw	low _regDflt
  1960  0005A6  24F3               	addwf	prodl,w,c
  1961  0005A8  6EF6               	movwf	tblptrl,c
  1962  0005AA  0E03               	movlw	high _regDflt
  1963  0005AC  20F4               	addwfc	prodh,w,c
  1964  0005AE  6EF7               	movwf	tblptrh,c
  1965  0005B0                     	if	0	;There are less than 3 active tblptr bytes
  1966  0005B0                     	endif
  1967  0005B0  5014               	movf	FMinit@ad,w,c
  1968  0005B2  0D02               	mullw	2
  1969  0005B4  0E34               	movlw	low _regImg
  1970  0005B6  24F3               	addwf	prodl,w,c
  1971  0005B8  6ED9               	movwf	fsr2l,c
  1972  0005BA  0E00               	movlw	high _regImg
  1973  0005BC  20F4               	addwfc	prodh,w,c
  1974  0005BE  6EDA               	movwf	fsr2h,c
  1975  0005C0  0009               	tblrd		*+
  1976  0005C2  CFF5 FFDE          	movff	tablat,postinc2
  1977  0005C6  0008               	tblrd		*
  1978  0005C8  CFF5 FFDD          	movff	tablat,postdec2
  1979  0005CC  2A14               	incf	FMinit@ad,f,c
  1980  0005CE  D7E4               	goto	l1729
  1981  0005D0                     l160:
  1982                           
  1983                           ;main.c: 359: dat = regImg[0];
  1984  0005D0  C034  F012         	movff	_regImg,FMinit@dat
  1985  0005D4  C035  F013         	movff	_regImg+1,FMinit@dat+1
  1986                           
  1987                           ;main.c: 360: regImg[0] &= ~1;
  1988  0005D8  9034               	bcf	_regImg,0,c
  1989                           
  1990                           ;main.c: 361: if (FMwrite(0) != 0) return 1;
  1991  0005DA  0E00               	movlw	0
  1992  0005DC  ECDC  F003         	call	_FMwrite
  1993  0005E0  0900               	iorlw	0
  1994  0005E2  B4D8               	btfsc	status,2,c
  1995  0005E4  D002               	goto	l1747
  1996  0005E6  0E01               	movlw	1
  1997  0005E8  0012               	return	
  1998  0005EA                     l1747:
  1999                           
  2000                           ;main.c: 362: for (ad = 1; ad < 18; ad++) {
  2001  0005EA  0E01               	movlw	1
  2002  0005EC  6E14               	movwf	FMinit@ad,c
  2003  0005EE                     l1749:
  2004  0005EE  0E11               	movlw	17
  2005  0005F0  6414               	cpfsgt	FMinit@ad,c
  2006  0005F2  D001               	goto	l1753
  2007  0005F4  D00A               	goto	l1763
  2008  0005F6                     l1753:
  2009                           
  2010                           ;main.c: 363: if (FMwrite(ad) != 0)return 1;
  2011  0005F6  5014               	movf	FMinit@ad,w,c
  2012  0005F8  ECDC  F003         	call	_FMwrite
  2013  0005FC  0900               	iorlw	0
  2014  0005FE  B4D8               	btfsc	status,2,c
  2015  000600  D002               	goto	l1759
  2016  000602  0E01               	movlw	1
  2017  000604  0012               	return	
  2018  000606                     l1759:
  2019  000606  2A14               	incf	FMinit@ad,f,c
  2020  000608  D7F2               	goto	l1749
  2021  00060A                     l1763:
  2022                           
  2023                           ;main.c: 364: }
  2024                           ;main.c: 366: regImg[0] = dat | 1;
  2025  00060A  0E01               	movlw	1
  2026  00060C  1012               	iorwf	FMinit@dat,w,c
  2027  00060E  6E34               	movwf	_regImg,c
  2028  000610  5013               	movf	FMinit@dat+1,w,c
  2029  000612  6E35               	movwf	_regImg+1,c
  2030                           
  2031                           ;main.c: 367: if (FMwrite(0) != 0) return 1;
  2032  000614  0E00               	movlw	0
  2033  000616  ECDC  F003         	call	_FMwrite
  2034  00061A  0900               	iorlw	0
  2035  00061C  B4D8               	btfsc	status,2,c
  2036  00061E  D002               	goto	l1771
  2037  000620  0E01               	movlw	1
  2038  000622  0012               	return	
  2039  000624                     l1771:
  2040                           
  2041                           ;main.c: 368: dly(20);
  2042  000624  0E00               	movlw	0
  2043  000626  6E02               	movwf	dly@d+1,c
  2044  000628  0E14               	movlw	20
  2045  00062A  6E01               	movwf	dly@d,c
  2046  00062C  ECD8  F004         	call	_dly	;wreg free
  2047                           
  2048                           ;main.c: 369: while (FMready(&dat), !dat) dly(2);
  2049  000630  D006               	goto	l1775
  2050  000632                     l1773:
  2051  000632  0E00               	movlw	0
  2052  000634  6E02               	movwf	dly@d+1,c
  2053  000636  0E02               	movlw	2
  2054  000638  6E01               	movwf	dly@d,c
  2055  00063A  ECD8  F004         	call	_dly	;wreg free
  2056  00063E                     l1775:
  2057  00063E  0E12               	movlw	low FMinit@dat
  2058  000640  6E0C               	movwf	FMready@rdy,c
  2059  000642  0E00               	movlw	high FMinit@dat
  2060  000644  6E0D               	movwf	FMready@rdy+1,c
  2061  000646  ECB5  F004         	call	_FMready	;wreg free
  2062  00064A  5012               	movf	FMinit@dat,w,c
  2063  00064C  1013               	iorwf	FMinit@dat+1,w,c
  2064  00064E  B4D8               	btfsc	status,2,c
  2065  000650  D7F0               	goto	l1773
  2066                           
  2067                           ;main.c: 370: showFreq();
  2068  000652  EC79  F005         	call	_showFreq	;wreg free
  2069                           
  2070                           ;main.c: 371: return 0;
  2071  000656  0E00               	movlw	0
  2072  000658  0012               	return	
  2073  00065A                     __end_of_FMinit:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           prodh	equ	0xFF4
  2080                           prodl	equ	0xFF3
  2081                           intcon	equ	0xFF2
  2082                           postinc0	equ	0xFEE
  2083                           wreg	equ	0xFE8
  2084                           indf2	equ	0xFDF
  2085                           postinc2	equ	0xFDE
  2086                           postdec2	equ	0xFDD
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function _showFreq *****************
  2092 ;; Defined at:
  2093 ;;		line 560 in file "main.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;		None
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;		None
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  1    wreg      unsigned char 
  2100 ;; Registers used:
  2101 ;;		None
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2107 ;;      Params:         0       0       0       0
  2108 ;;      Locals:         0       0       0       0
  2109 ;;      Temps:          0       0       0       0
  2110 ;;      Totals:         0       0       0       0
  2111 ;;Total ram usage:        0 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_FMinit
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text15
  2121  000AF2                     __ptext15:
  2122                           	opt stack 0
  2123  000AF2                     _showFreq:
  2124                           	opt stack 29
  2125                           
  2126                           ;main.c: 562: ;
  2127                           ;main.c: 563: return 0;
  2128                           ;	Return value of _showFreq is never used
  2129                           
  2130                           ;incstack = 0
  2131  000AF2  0012               	return		;funcret
  2132  000AF4                     __end_of_showFreq:
  2133                           	opt stack 0
  2134                           tblptru	equ	0xFF8
  2135                           tblptrh	equ	0xFF7
  2136                           tblptrl	equ	0xFF6
  2137                           tablat	equ	0xFF5
  2138                           prodh	equ	0xFF4
  2139                           prodl	equ	0xFF3
  2140                           intcon	equ	0xFF2
  2141                           postinc0	equ	0xFEE
  2142                           wreg	equ	0xFE8
  2143                           indf2	equ	0xFDF
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _dly *****************
  2151 ;; Defined at:
  2152 ;;		line 142 in file "main.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  d               2    0[COMRAM] int 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;  i               2    2[COMRAM] int 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      void 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2166 ;;      Params:         2       0       0       0
  2167 ;;      Locals:         2       0       0       0
  2168 ;;      Temps:          0       0       0       0
  2169 ;;      Totals:         4       0       0       0
  2170 ;;Total ram usage:        4 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; This function calls:
  2173 ;;		Nothing
  2174 ;; This function is called by:
  2175 ;;		_FMinit
  2176 ;;		_setVolume
  2177 ;;		_FMfrequenc
  2178 ;;		_main
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text16
  2183  0009B0                     __ptext16:
  2184                           	opt stack 0
  2185  0009B0                     _dly:
  2186                           	opt stack 28
  2187                           
  2188                           ;main.c: 144: int i = 0;
  2189                           
  2190                           ;incstack = 0
  2191  0009B0  0E00               	movlw	0
  2192  0009B2  6E04               	movwf	dly@i+1,c
  2193  0009B4  0E00               	movlw	0
  2194  0009B6  6E03               	movwf	dly@i,c
  2195                           
  2196                           ;main.c: 146: for (; d; --d)
  2197  0009B8  D00F               	goto	l1515
  2198  0009BA                     l1507:
  2199                           
  2200                           ;main.c: 147: for (i = 100; i; --i);
  2201  0009BA  0E00               	movlw	0
  2202  0009BC  6E04               	movwf	dly@i+1,c
  2203  0009BE  0E64               	movlw	100
  2204  0009C0  6E03               	movwf	dly@i,c
  2205  0009C2  D003               	goto	l1511
  2206  0009C4                     l1509:
  2207  0009C4  0603               	decf	dly@i,f,c
  2208  0009C6  A0D8               	btfss	status,0,c
  2209  0009C8  0604               	decf	dly@i+1,f,c
  2210  0009CA                     l1511:
  2211  0009CA  5003               	movf	dly@i,w,c
  2212  0009CC  1004               	iorwf	dly@i+1,w,c
  2213  0009CE  A4D8               	btfss	status,2,c
  2214  0009D0  D7F9               	goto	l1509
  2215  0009D2  0601               	decf	dly@d,f,c
  2216  0009D4  A0D8               	btfss	status,0,c
  2217  0009D6  0602               	decf	dly@d+1,f,c
  2218  0009D8                     l1515:
  2219  0009D8  5001               	movf	dly@d,w,c
  2220  0009DA  1002               	iorwf	dly@d+1,w,c
  2221  0009DC  B4D8               	btfsc	status,2,c
  2222  0009DE  0012               	return	
  2223  0009E0  D7EC               	goto	l1507
  2224  0009E2                     __end_of_dly:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           tblptrh	equ	0xFF7
  2228                           tblptrl	equ	0xFF6
  2229                           tablat	equ	0xFF5
  2230                           prodh	equ	0xFF4
  2231                           prodl	equ	0xFF3
  2232                           intcon	equ	0xFF2
  2233                           postinc0	equ	0xFEE
  2234                           wreg	equ	0xFE8
  2235                           indf2	equ	0xFDF
  2236                           postinc2	equ	0xFDE
  2237                           postdec2	equ	0xFDD
  2238                           fsr2h	equ	0xFDA
  2239                           fsr2l	equ	0xFD9
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _FMwrite *****************
  2243 ;; Defined at:
  2244 ;;		line 241 in file "main.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  adr             1    wreg     unsigned char 
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  adr             1    6[COMRAM] unsigned char 
  2249 ;;  regstr          2    0        unsigned int 
  2250 ;;  secndByt        1    5[COMRAM] unsigned char 
  2251 ;;  firstByt        1    4[COMRAM] unsigned char 
  2252 ;;  rpy             1    0        unsigned char 
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      unsigned char 
  2255 ;; Registers used:
  2256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2262 ;;      Params:         0       0       0       0
  2263 ;;      Locals:         3       0       0       0
  2264 ;;      Temps:          2       0       0       0
  2265 ;;      Totals:         5       0       0       0
  2266 ;;Total ram usage:        5 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    2
  2269 ;; This function calls:
  2270 ;;		_IdleI2C
  2271 ;;		_WriteI2C
  2272 ;; This function is called by:
  2273 ;;		_FMinit
  2274 ;;		_setVolume
  2275 ;;		_FMfrequenc
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           	psect	text17
  2280  0007B8                     __ptext17:
  2281                           	opt stack 0
  2282  0007B8                     _FMwrite:
  2283                           	opt stack 26
  2284                           
  2285                           ;incstack = 0
  2286                           ;FMwrite@adr stored from wreg
  2287  0007B8  6E07               	movwf	FMwrite@adr,c
  2288                           
  2289                           ;main.c: 243: unsigned int regstr;
  2290                           ;main.c: 244: unsigned char firstByt;
  2291                           ;main.c: 245: unsigned char secndByt;
  2292                           ;main.c: 246: unsigned char rpy;
  2293                           ;main.c: 248: firstByt = regImg[adr] >> 8;
  2294  0007BA  5007               	movf	FMwrite@adr,w,c
  2295  0007BC  0D02               	mullw	2
  2296  0007BE  0E34               	movlw	low _regImg
  2297  0007C0  24F3               	addwf	prodl,w,c
  2298  0007C2  6ED9               	movwf	fsr2l,c
  2299  0007C4  0E00               	movlw	high _regImg
  2300  0007C6  20F4               	addwfc	prodh,w,c
  2301  0007C8  6EDA               	movwf	fsr2h,c
  2302  0007CA  CFDE F003          	movff	postinc2,??_FMwrite
  2303  0007CE  CFDD F004          	movff	postdec2,??_FMwrite+1
  2304  0007D2  C004  F003         	movff	??_FMwrite+1,??_FMwrite
  2305  0007D6  6A04               	clrf	??_FMwrite+1,c
  2306  0007D8  5003               	movf	??_FMwrite,w,c
  2307  0007DA  6E05               	movwf	FMwrite@firstByt,c
  2308                           
  2309                           ;main.c: 249: secndByt = regImg[adr];
  2310  0007DC  5007               	movf	FMwrite@adr,w,c
  2311  0007DE  0D02               	mullw	2
  2312  0007E0  0E34               	movlw	low _regImg
  2313  0007E2  24F3               	addwf	prodl,w,c
  2314  0007E4  6ED9               	movwf	fsr2l,c
  2315  0007E6  0E00               	movlw	high _regImg
  2316  0007E8  20F4               	addwfc	prodh,w,c
  2317  0007EA  6EDA               	movwf	fsr2h,c
  2318  0007EC  50DF               	movf	indf2,w,c
  2319  0007EE  6E06               	movwf	FMwrite@secndByt,c
  2320                           
  2321                           ;main.c: 251: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  2322  0007F0  80C5               	bsf	4037,0,c	;volatile
  2323  0007F2                     l126:
  2324  0007F2  B0C5               	btfsc	4037,0,c	;volatile
  2325  0007F4  D7FE               	goto	l126
  2326                           
  2327                           ;main.c: 252: IdleI2C();
  2328  0007F6  EC66  F005         	call	_IdleI2C	;wreg free
  2329                           
  2330                           ;main.c: 255: if (WriteI2C(0x20)) return 1;
  2331  0007FA  0E20               	movlw	32
  2332  0007FC  EC86  F004         	call	_WriteI2C
  2333  000800  0900               	iorlw	0
  2334  000802  B4D8               	btfsc	status,2,c
  2335  000804  D002               	goto	l1051
  2336  000806  0E01               	movlw	1
  2337  000808  0012               	return	
  2338  00080A                     l1051:
  2339                           
  2340                           ;main.c: 256: IdleI2C();
  2341  00080A  EC66  F005         	call	_IdleI2C	;wreg free
  2342                           
  2343                           ;main.c: 257: WriteI2C(adr);
  2344  00080E  5007               	movf	FMwrite@adr,w,c
  2345  000810  EC86  F004         	call	_WriteI2C
  2346                           
  2347                           ;main.c: 258: IdleI2C();
  2348  000814  EC66  F005         	call	_IdleI2C	;wreg free
  2349                           
  2350                           ;main.c: 259: WriteI2C(firstByt);
  2351  000818  5005               	movf	FMwrite@firstByt,w,c
  2352  00081A  EC86  F004         	call	_WriteI2C
  2353                           
  2354                           ;main.c: 260: IdleI2C();
  2355  00081E  EC66  F005         	call	_IdleI2C	;wreg free
  2356                           
  2357                           ;main.c: 261: WriteI2C(secndByt);
  2358  000822  5006               	movf	FMwrite@secndByt,w,c
  2359  000824  EC86  F004         	call	_WriteI2C
  2360                           
  2361                           ;main.c: 262: IdleI2C();
  2362  000828  EC66  F005         	call	_IdleI2C	;wreg free
  2363                           
  2364                           ;main.c: 263: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  2365  00082C  84C5               	bsf	4037,2,c	;volatile
  2366  00082E                     l131:
  2367  00082E  B4C5               	btfsc	4037,2,c	;volatile
  2368  000830  D7FE               	goto	l131
  2369                           
  2370                           ;main.c: 264: IdleI2C();
  2371  000832  EC66  F005         	call	_IdleI2C	;wreg free
  2372                           
  2373                           ;main.c: 265: return 0;
  2374  000836  0E00               	movlw	0
  2375  000838  0012               	return	
  2376  00083A                     __end_of_FMwrite:
  2377                           	opt stack 0
  2378                           tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           prodh	equ	0xFF4
  2383                           prodl	equ	0xFF3
  2384                           intcon	equ	0xFF2
  2385                           postinc0	equ	0xFEE
  2386                           wreg	equ	0xFE8
  2387                           indf2	equ	0xFDF
  2388                           postinc2	equ	0xFDE
  2389                           postdec2	equ	0xFDD
  2390                           fsr2h	equ	0xFDA
  2391                           fsr2l	equ	0xFD9
  2392                           status	equ	0xFD8
  2393                           
  2394 ;; *************** function _FMready *****************
  2395 ;; Defined at:
  2396 ;;		line 331 in file "main.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  rdy             2   11[COMRAM] PTR unsigned int 
  2399 ;;		 -> FMfrequenc@dat(2), setVolume@dat(2), FMinit@dat(2), 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  sts             2   15[COMRAM] unsigned int 
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  1    wreg      unsigned char 
  2404 ;; Registers used:
  2405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2411 ;;      Params:         2       0       0       0
  2412 ;;      Locals:         2       0       0       0
  2413 ;;      Temps:          2       0       0       0
  2414 ;;      Totals:         6       0       0       0
  2415 ;;Total ram usage:        6 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    3
  2418 ;; This function calls:
  2419 ;;		_FMread
  2420 ;; This function is called by:
  2421 ;;		_FMinit
  2422 ;;		_setVolume
  2423 ;;		_FMfrequenc
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text18
  2428  00096A                     __ptext18:
  2429                           	opt stack 0
  2430  00096A                     _FMready:
  2431                           	opt stack 25
  2432                           
  2433                           ;main.c: 333: unsigned int sts;
  2434                           ;main.c: 335: if (FMread(0x13, &sts) != 0) return 1;
  2435                           
  2436                           ;incstack = 0
  2437  00096A  0E10               	movlw	low FMready@sts
  2438  00096C  6E03               	movwf	FMread@data,c
  2439  00096E  0E00               	movlw	high FMready@sts
  2440  000970  6E04               	movwf	FMread@data+1,c
  2441  000972  0E13               	movlw	19
  2442  000974  EC65  F002         	call	_FMread
  2443  000978  0900               	iorlw	0
  2444  00097A  B4D8               	btfsc	status,2,c
  2445  00097C  D002               	goto	l1523
  2446  00097E  0E01               	movlw	1
  2447  000980  0012               	return	
  2448  000982                     l1523:
  2449                           
  2450                           ;main.c: 336: sts &= 0x0020;
  2451  000982  0E20               	movlw	32
  2452  000984  1610               	andwf	FMready@sts,f,c
  2453  000986  0E00               	movlw	0
  2454  000988  1611               	andwf	FMready@sts+1,f,c
  2455                           
  2456                           ;main.c: 337: *rdy = sts ? 1 : 0;
  2457  00098A  5010               	movf	FMready@sts,w,c
  2458  00098C  1011               	iorwf	FMready@sts+1,w,c
  2459  00098E  B4D8               	btfsc	status,2,c
  2460  000990  D002               	goto	u860
  2461  000992  0E01               	movlw	1
  2462  000994  D001               	goto	u870
  2463  000996                     u860:
  2464  000996  0E00               	movlw	0
  2465  000998                     u870:
  2466  000998  6E0E               	movwf	??_FMready& (0+255),c
  2467  00099A  6A0F               	clrf	(??_FMready+1)& (0+255),c
  2468  00099C  C00C  FFD9         	movff	FMready@rdy,fsr2l
  2469  0009A0  C00D  FFDA         	movff	FMready@rdy+1,fsr2h
  2470  0009A4  C00E  FFDE         	movff	??_FMready,postinc2
  2471  0009A8  C00F  FFDD         	movff	??_FMready+1,postdec2
  2472                           
  2473                           ;main.c: 338: return 0;
  2474  0009AC  0E00               	movlw	0
  2475  0009AE  0012               	return	
  2476  0009B0                     __end_of_FMready:
  2477                           	opt stack 0
  2478                           tblptru	equ	0xFF8
  2479                           tblptrh	equ	0xFF7
  2480                           tblptrl	equ	0xFF6
  2481                           tablat	equ	0xFF5
  2482                           prodh	equ	0xFF4
  2483                           prodl	equ	0xFF3
  2484                           intcon	equ	0xFF2
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           indf2	equ	0xFDF
  2488                           postinc2	equ	0xFDE
  2489                           postdec2	equ	0xFDD
  2490                           fsr2h	equ	0xFDA
  2491                           fsr2l	equ	0xFD9
  2492                           status	equ	0xFD8
  2493                           
  2494 ;; *************** function _FMread *****************
  2495 ;; Defined at:
  2496 ;;		line 283 in file "main.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;  regAddr         1    wreg     unsigned char 
  2499 ;;  data            2    2[COMRAM] PTR unsigned int 
  2500 ;;		 -> main@ui(2), FMready@sts(2), 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  regAddr         1    8[COMRAM] unsigned char 
  2503 ;;  secndByt        1   10[COMRAM] unsigned char 
  2504 ;;  firstByt        1    9[COMRAM] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      unsigned char 
  2507 ;; Registers used:
  2508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2514 ;;      Params:         2       0       0       0
  2515 ;;      Locals:         3       0       0       0
  2516 ;;      Temps:          4       0       0       0
  2517 ;;      Totals:         9       0       0       0
  2518 ;;Total ram usage:        9 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    2
  2521 ;; This function calls:
  2522 ;;		_IdleI2C
  2523 ;;		_ReadI2C
  2524 ;;		_WriteI2C
  2525 ;; This function is called by:
  2526 ;;		_FMready
  2527 ;;		_FMvers
  2528 ;;		_FMid
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text19
  2533  0004CA                     __ptext19:
  2534                           	opt stack 0
  2535  0004CA                     _FMread:
  2536                           	opt stack 25
  2537                           
  2538                           ;incstack = 0
  2539                           ;FMread@regAddr stored from wreg
  2540  0004CA  6E09               	movwf	FMread@regAddr,c
  2541                           
  2542                           ;main.c: 285: unsigned char firstByt;
  2543                           ;main.c: 286: unsigned char secndByt;
  2544                           ;main.c: 288: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  2545  0004CC  80C5               	bsf	4037,0,c	;volatile
  2546  0004CE                     l136:
  2547  0004CE  B0C5               	btfsc	4037,0,c	;volatile
  2548  0004D0  D7FE               	goto	l136
  2549                           
  2550                           ;main.c: 289: IdleI2C();
  2551  0004D2  EC66  F005         	call	_IdleI2C	;wreg free
  2552                           
  2553                           ;main.c: 292: if (WriteI2C(0x20)) return 1;
  2554  0004D6  0E20               	movlw	32
  2555  0004D8  EC86  F004         	call	_WriteI2C
  2556  0004DC  0900               	iorlw	0
  2557  0004DE  B4D8               	btfsc	status,2,c
  2558  0004E0  D002               	goto	l1473
  2559  0004E2  0E01               	movlw	1
  2560  0004E4  0012               	return	
  2561  0004E6                     l1473:
  2562                           
  2563                           ;main.c: 293: IdleI2C();
  2564  0004E6  EC66  F005         	call	_IdleI2C	;wreg free
  2565                           
  2566                           ;main.c: 294: WriteI2C(regAddr);
  2567  0004EA  5009               	movf	FMread@regAddr,w,c
  2568  0004EC  EC86  F004         	call	_WriteI2C
  2569                           
  2570                           ;main.c: 295: IdleI2C();
  2571  0004F0  EC66  F005         	call	_IdleI2C	;wreg free
  2572                           
  2573                           ;main.c: 296: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  2574  0004F4  82C5               	bsf	4037,1,c	;volatile
  2575  0004F6                     l141:
  2576  0004F6  B2C5               	btfsc	4037,1,c	;volatile
  2577  0004F8  D7FE               	goto	l141
  2578                           
  2579                           ;main.c: 297: IdleI2C();
  2580  0004FA  EC66  F005         	call	_IdleI2C	;wreg free
  2581                           
  2582                           ;main.c: 298: WriteI2C(0x20 + 0x01);
  2583  0004FE  0E21               	movlw	33
  2584  000500  EC86  F004         	call	_WriteI2C
  2585                           
  2586                           ;main.c: 299: IdleI2C();
  2587  000504  EC66  F005         	call	_IdleI2C	;wreg free
  2588                           
  2589                           ;main.c: 300: firstByt = ReadI2C();
  2590  000508  EC4D  F005         	call	_ReadI2C	;wreg free
  2591  00050C  6E0A               	movwf	FMread@firstByt,c
  2592                           
  2593                           ;main.c: 301: IdleI2C();
  2594  00050E  EC66  F005         	call	_IdleI2C	;wreg free
  2595                           
  2596                           ;main.c: 302: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  2597  000512  9AC5               	bcf	4037,5,c	;volatile
  2598  000514  88C5               	bsf	4037,4,c	;volatile
  2599  000516                     l144:
  2600  000516  B8C5               	btfsc	4037,4,c	;volatile
  2601  000518  D7FE               	goto	l144
  2602                           
  2603                           ;main.c: 303: IdleI2C();
  2604  00051A  EC66  F005         	call	_IdleI2C	;wreg free
  2605                           
  2606                           ;main.c: 304: secndByt = ReadI2C();
  2607  00051E  EC4D  F005         	call	_ReadI2C	;wreg free
  2608  000522  6E0B               	movwf	FMread@secndByt,c
  2609                           
  2610                           ;main.c: 305: IdleI2C();
  2611  000524  EC66  F005         	call	_IdleI2C	;wreg free
  2612                           
  2613                           ;main.c: 306: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  2614  000528  8AC5               	bsf	4037,5,c	;volatile
  2615  00052A  88C5               	bsf	4037,4,c	;volatile
  2616  00052C                     l147:
  2617  00052C  B8C5               	btfsc	4037,4,c	;volatile
  2618  00052E  D7FE               	goto	l147
  2619                           
  2620                           ;main.c: 307: IdleI2C();
  2621  000530  EC66  F005         	call	_IdleI2C	;wreg free
  2622                           
  2623                           ;main.c: 308: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  2624  000534  84C5               	bsf	4037,2,c	;volatile
  2625  000536                     l150:
  2626  000536  B4C5               	btfsc	4037,2,c	;volatile
  2627  000538  D7FE               	goto	l150
  2628                           
  2629                           ;main.c: 309: IdleI2C();
  2630  00053A  EC66  F005         	call	_IdleI2C	;wreg free
  2631                           
  2632                           ;main.c: 310: *data = firstByt;
  2633  00053E  500A               	movf	FMread@firstByt,w,c
  2634  000540  6E05               	movwf	??_FMread& (0+255),c
  2635  000542  6A06               	clrf	(??_FMread+1)& (0+255),c
  2636  000544  C003  FFD9         	movff	FMread@data,fsr2l
  2637  000548  C004  FFDA         	movff	FMread@data+1,fsr2h
  2638  00054C  C005  FFDE         	movff	??_FMread,postinc2
  2639  000550  C006  FFDD         	movff	??_FMread+1,postdec2
  2640                           
  2641                           ;main.c: 311: *data <<= 8;
  2642  000554  C003  FFD9         	movff	FMread@data,fsr2l
  2643  000558  C004  FFDA         	movff	FMread@data+1,fsr2h
  2644  00055C  50DE               	movf	postinc2,w,c
  2645  00055E  6EDD               	movwf	postdec2,c
  2646  000560  6ADF               	clrf	indf2,c
  2647                           
  2648                           ;main.c: 312: *data = *data | secndByt;
  2649  000562  C003  FFD9         	movff	FMread@data,fsr2l
  2650  000566  C004  FFDA         	movff	FMread@data+1,fsr2h
  2651  00056A  CFDE F005          	movff	postinc2,??_FMread
  2652  00056E  CFDD F006          	movff	postdec2,??_FMread+1
  2653  000572  500B               	movf	FMread@secndByt,w,c
  2654  000574  6E07               	movwf	(??_FMread+2)& (0+255),c
  2655  000576  6A08               	clrf	(??_FMread+3)& (0+255),c
  2656  000578  5005               	movf	??_FMread,w,c
  2657  00057A  1207               	iorwf	??_FMread+2,f,c
  2658  00057C  5006               	movf	??_FMread+1,w,c
  2659  00057E  1208               	iorwf	??_FMread+3,f,c
  2660  000580  C003  FFD9         	movff	FMread@data,fsr2l
  2661  000584  C004  FFDA         	movff	FMread@data+1,fsr2h
  2662  000588  C007  FFDE         	movff	??_FMread+2,postinc2
  2663  00058C  C008  FFDD         	movff	??_FMread+3,postdec2
  2664                           
  2665                           ;main.c: 314: return 0;
  2666  000590  0E00               	movlw	0
  2667  000592  0012               	return	
  2668  000594                     __end_of_FMread:
  2669                           	opt stack 0
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           prodh	equ	0xFF4
  2675                           prodl	equ	0xFF3
  2676                           intcon	equ	0xFF2
  2677                           postinc0	equ	0xFEE
  2678                           wreg	equ	0xFE8
  2679                           indf2	equ	0xFDF
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _WriteI2C *****************
  2687 ;; Defined at:
  2688 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\i2c\i2c_writ.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  data_out        1    wreg     unsigned char 
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  data_out        1    1[COMRAM] unsigned char 
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  1    wreg      char 
  2695 ;; Registers used:
  2696 ;;		wreg, status,2, status,0, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2702 ;;      Params:         0       0       0       0
  2703 ;;      Locals:         1       0       0       0
  2704 ;;      Temps:          0       0       0       0
  2705 ;;      Totals:         1       0       0       0
  2706 ;;Total ram usage:        1 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    1
  2709 ;; This function calls:
  2710 ;;		_IdleI2C
  2711 ;; This function is called by:
  2712 ;;		_FMwrite
  2713 ;;		_FMread
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           	psect	text20
  2718  00090C                     __ptext20:
  2719                           	opt stack 0
  2720  00090C                     _WriteI2C:
  2721                           	opt stack 26
  2722                           
  2723                           ;incstack = 0
  2724                           ;WriteI2C@data_out stored from wreg
  2725  00090C  6E02               	movwf	WriteI2C@data_out,c
  2726  00090E  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  2727  000912  AEC6               	btfss	4038,7,c	;volatile
  2728  000914  D002               	goto	l945
  2729  000916  0EFF               	movlw	255
  2730  000918  0012               	return	
  2731  00091A                     l945:
  2732  00091A  50C6               	movf	4038,w,c	;volatile
  2733  00091C  0B0F               	andlw	15
  2734  00091E  0A08               	xorlw	8
  2735  000920  B4D8               	btfsc	status,2,c
  2736  000922  D00F               	goto	l963
  2737  000924  50C6               	movf	4038,w,c	;volatile
  2738  000926  0B0F               	andlw	15
  2739  000928  0A0B               	xorlw	11
  2740  00092A  B4D8               	btfsc	status,2,c
  2741  00092C  D00A               	goto	l963
  2742  00092E  88C6               	bsf	4038,4,c	;volatile
  2743  000930                     l302:
  2744  000930  A69E               	btfss	3998,3,c	;volatile
  2745  000932  D7FE               	goto	l302
  2746  000934  A4C7               	btfss	4039,2,c	;volatile
  2747  000936  B0C7               	btfsc	4039,0,c	;volatile
  2748  000938  D002               	goto	l959
  2749  00093A  0EFE               	movlw	254
  2750  00093C  0012               	return	
  2751  00093E                     l959:
  2752  00093E  0E00               	movlw	0
  2753  000940  0012               	return	
  2754  000942                     l963:
  2755  000942  50C6               	movf	4038,w,c	;volatile
  2756  000944  0B0F               	andlw	15
  2757  000946  0A08               	xorlw	8
  2758  000948  B4D8               	btfsc	status,2,c
  2759  00094A  D005               	goto	l311
  2760  00094C  50C6               	movf	4038,w,c	;volatile
  2761  00094E  0B0F               	andlw	15
  2762  000950  0A0B               	xorlw	11
  2763  000952  A4D8               	btfss	status,2,c
  2764  000954  0012               	return	
  2765  000956                     l311:
  2766  000956  B0C7               	btfsc	4039,0,c	;volatile
  2767  000958  D7FE               	goto	l311
  2768  00095A  EC66  F005         	call	_IdleI2C	;wreg free
  2769  00095E  ACC5               	btfss	4037,6,c	;volatile
  2770  000960  D002               	goto	l977
  2771  000962  0EFE               	movlw	254
  2772  000964  0012               	return	
  2773  000966                     l977:
  2774  000966  0E00               	movlw	0
  2775  000968  0012               	return	
  2776  00096A                     __end_of_WriteI2C:
  2777                           	opt stack 0
  2778                           tblptru	equ	0xFF8
  2779                           tblptrh	equ	0xFF7
  2780                           tblptrl	equ	0xFF6
  2781                           tablat	equ	0xFF5
  2782                           prodh	equ	0xFF4
  2783                           prodl	equ	0xFF3
  2784                           intcon	equ	0xFF2
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           indf2	equ	0xFDF
  2788                           postinc2	equ	0xFDE
  2789                           postdec2	equ	0xFDD
  2790                           fsr2h	equ	0xFDA
  2791                           fsr2l	equ	0xFD9
  2792                           status	equ	0xFD8
  2793                           
  2794 ;; *************** function _IdleI2C *****************
  2795 ;; Defined at:
  2796 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\i2c\i2c_idle.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;		None
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;		None
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg, status,2, status,0
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2810 ;;      Params:         0       0       0       0
  2811 ;;      Locals:         0       0       0       0
  2812 ;;      Temps:          1       0       0       0
  2813 ;;      Totals:         1       0       0       0
  2814 ;;Total ram usage:        1 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_FMwrite
  2820 ;;		_FMread
  2821 ;;		_WriteI2C
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text21
  2826  000ACC                     __ptext21:
  2827                           	opt stack 0
  2828  000ACC                     _IdleI2C:
  2829                           	opt stack 26
  2830  000ACC                     l931:
  2831  000ACC  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  2832  000AD0  0E1F               	movlw	31
  2833  000AD2  1601               	andwf	??_IdleI2C,f,c
  2834  000AD4  A4D8               	btfss	status,2,c
  2835  000AD6  D7FA               	goto	l931
  2836  000AD8  A4C7               	btfss	4039,2,c	;volatile
  2837  000ADA  0012               	return	
  2838  000ADC  D7F7               	goto	l931
  2839  000ADE                     __end_of_IdleI2C:
  2840                           	opt stack 0
  2841                           tblptru	equ	0xFF8
  2842                           tblptrh	equ	0xFF7
  2843                           tblptrl	equ	0xFF6
  2844                           tablat	equ	0xFF5
  2845                           prodh	equ	0xFF4
  2846                           prodl	equ	0xFF3
  2847                           intcon	equ	0xFF2
  2848                           postinc0	equ	0xFEE
  2849                           wreg	equ	0xFE8
  2850                           indf2	equ	0xFDF
  2851                           postinc2	equ	0xFDE
  2852                           postdec2	equ	0xFDD
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _ReadI2C *****************
  2858 ;; Defined at:
  2859 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\i2c\i2c_read.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      unsigned char 
  2866 ;; Registers used:
  2867 ;;		wreg, status,2, status,0
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2873 ;;      Params:         0       0       0       0
  2874 ;;      Locals:         0       0       0       0
  2875 ;;      Temps:          0       0       0       0
  2876 ;;      Totals:         0       0       0       0
  2877 ;;Total ram usage:        0 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; This function calls:
  2880 ;;		Nothing
  2881 ;; This function is called by:
  2882 ;;		_FMread
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text22
  2887  000A9A                     __ptext22:
  2888                           	opt stack 0
  2889  000A9A                     _ReadI2C:
  2890                           	opt stack 26
  2891                           
  2892                           ;incstack = 0
  2893  000A9A  50C6               	movf	4038,w,c	;volatile
  2894  000A9C  0B0F               	andlw	15
  2895  000A9E  0A08               	xorlw	8
  2896  000AA0  B4D8               	btfsc	status,2,c
  2897  000AA2  D004               	goto	l277
  2898  000AA4  50C6               	movf	4038,w,c	;volatile
  2899  000AA6  0B0F               	andlw	15
  2900  000AA8  0A0B               	xorlw	11
  2901  000AAA  B4D8               	btfsc	status,2,c
  2902  000AAC                     l277:
  2903  000AAC  86C5               	bsf	4037,3,c	;volatile
  2904  000AAE                     l278:
  2905  000AAE  A0C7               	btfss	4039,0,c	;volatile
  2906  000AB0  D7FE               	goto	l278
  2907  000AB2  50C9               	movf	4041,w,c	;volatile
  2908  000AB4  0012               	return	
  2909  000AB6                     __end_of_ReadI2C:
  2910                           	opt stack 0
  2911                           tblptru	equ	0xFF8
  2912                           tblptrh	equ	0xFF7
  2913                           tblptrl	equ	0xFF6
  2914                           tablat	equ	0xFF5
  2915                           prodh	equ	0xFF4
  2916                           prodl	equ	0xFF3
  2917                           intcon	equ	0xFF2
  2918                           postinc0	equ	0xFEE
  2919                           wreg	equ	0xFE8
  2920                           indf2	equ	0xFDF
  2921                           postinc2	equ	0xFDE
  2922                           postdec2	equ	0xFDD
  2923                           fsr2h	equ	0xFDA
  2924                           fsr2l	equ	0xFD9
  2925                           status	equ	0xFD8
  2926                           tblptru	equ	0xFF8
  2927                           tblptrh	equ	0xFF7
  2928                           tblptrl	equ	0xFF6
  2929                           tablat	equ	0xFF5
  2930                           prodh	equ	0xFF4
  2931                           prodl	equ	0xFF3
  2932                           intcon	equ	0xFF2
  2933                           postinc0	equ	0xFEE
  2934                           wreg	equ	0xFE8
  2935                           indf2	equ	0xFDF
  2936                           postinc2	equ	0xFDE
  2937                           postdec2	equ	0xFDD
  2938                           fsr2h	equ	0xFDA
  2939                           fsr2l	equ	0xFD9
  2940                           status	equ	0xFD8
  2941                           
  2942                           	psect	rparam
  2943  0000                     tblptru	equ	0xFF8
  2944                           tblptrh	equ	0xFF7
  2945                           tblptrl	equ	0xFF6
  2946                           tablat	equ	0xFF5
  2947                           prodh	equ	0xFF4
  2948                           prodl	equ	0xFF3
  2949                           intcon	equ	0xFF2
  2950                           postinc0	equ	0xFEE
  2951                           wreg	equ	0xFE8
  2952                           indf2	equ	0xFDF
  2953                           postinc2	equ	0xFDE
  2954                           postdec2	equ	0xFDD
  2955                           fsr2h	equ	0xFDA
  2956                           fsr2l	equ	0xFD9
  2957                           status	equ	0xFD8
=======
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           	psect	smallconst
    44  000300                     __psmallconst:
    45                           	opt stack 0
    46  000300  00                 	db	0
    47  000301                     _regDflt:
    48                           	opt stack 0
    49  000301  FFFF               	dw	65535
    50  000303  5B15               	dw	23317
    51  000305  D0B9               	dw	53433
    52  000307  A010               	dw	40976
    53  000309  0780               	dw	1920
    54  00030B  28AB               	dw	10411
    55  00030D  6400               	dw	25600
    56  00030F  1EE7               	dw	7911
    57  000311  7141               	dw	28993
    58  000313  007D               	dw	125
    59  000315  82C6               	dw	33478
    60  000317  4F55               	dw	20309
    61  000319  970C               	dw	38668
    62  00031B  B845               	dw	47173
    63  00031D  FC2D               	dw	64557
    64  00031F  8097               	dw	32919
    65  000321  04A1               	dw	1185
    66  000323  DF6A               	dw	57194
    67  000325                     __end_of_regDflt:
    68                           	opt stack 0
    69  000325                     setVolume@F6704:
    70                           	opt stack 0
    71  000325  0F                 	db	15
    72  000326  CF                 	db	207
    73  000327  DF                 	db	223
    74  000328  FF                 	db	255
    75  000329  CB                 	db	203
    76  00032A  DB                 	db	219
    77  00032B  FB                 	db	251
    78  00032C  FA                 	db	250
    79  00032D  F9                 	db	249
    80  00032E  F8                 	db	248
    81  00032F  F7                 	db	247
    82  000330  D6                 	db	214
    83  000331  E6                 	db	230
    84  000332  F6                 	db	246
    85  000333  E3                 	db	227
    86  000334  F3                 	db	243
    87  000335  F2                 	db	242
    88  000336  F1                 	db	241
    89  000337  F0                 	db	240
    90  000338                     __end_ofsetVolume@F6704:
    91                           	opt stack 0
    92  000338                     _hardmute_bit:
    93                           	opt stack 0
    94  000338  0001               	dw	1
    95  00033A  0001               	dw	1
    96  00033C                     __end_of_hardmute_bit:
    97                           	opt stack 0
    98  00033C                     _hiloctrl1_bit:
    99                           	opt stack 0
   100  00033C  000B               	dw	11
   101  00033E  0002               	dw	2
   102  000340                     __end_of_hiloctrl1_bit:
   103                           	opt stack 0
   104  000340                     _hiloctrl2_bit:
   105                           	opt stack 0
   106  000340  000B               	dw	11
   107  000342  0000               	dw	0
   108  000344                     __end_of_hiloctrl2_bit:
   109                           	opt stack 0
   110  000344                     _hiloside_bit:
   111                           	opt stack 0
   112  000344  000B               	dw	11
   113  000346  000F               	dw	15
   114  000348                     __end_of_hiloside_bit:
   115                           	opt stack 0
   116  000348                     _seek_bit:
   117                           	opt stack 0
   118  000348  0003               	dw	3
   119  00034A  000E               	dw	14
   120  00034C                     __end_of_seek_bit:
   121                           	opt stack 0
   122  00034C                     _seekup_bit:
   123                           	opt stack 0
   124  00034C  0003               	dw	3
   125  00034E  000F               	dw	15
   126  000350                     __end_of_seekup_bit:
   127                           	opt stack 0
   128  000350                     _softmute_bit:
   129                           	opt stack 0
   130  000350  0001               	dw	1
   131  000352  0002               	dw	2
   132  000354                     __end_of_softmute_bit:
   133                           	opt stack 0
   134  000354                     _tune_bit:
   135                           	opt stack 0
   136  000354  0002               	dw	2
   137  000356  0009               	dw	9
   138  000358                     __end_of_tune_bit:
   139                           	opt stack 0
   140  0000                     _LCDCON	set	3929
   141  0000                     _LCDPS	set	3928
   142  0000                     _LCDSE0	set	3930
   143  0000                     _LCDSE1	set	3931
   144  0000                     _LCDSE2	set	3932
   145  0000                     _LCDSE3	set	3933
   146  0000                     _ADCON1	set	4033
   147  0000                     _INTCONbits	set	4082
   148  0000                     _OSCCON	set	4051
   149  0000                     _PIR1bits	set	3998
   150  0000                     _PORTA	set	3968
   151  0000                     _PORTAbits	set	3968
   152  0000                     _PORTB	set	3969
   153  0000                     _PORTBbits	set	3969
   154  0000                     _PORTC	set	3970
   155  0000                     _PORTCbits	set	3970
   156  0000                     _PORTGbits	set	3974
   157  0000                     _SSPADD	set	4040
   158  0000                     _SSPBUF	set	4041
   159  0000                     _SSPCON1	set	4038
   160  0000                     _SSPCON1bits	set	4038
   161  0000                     _SSPCON2	set	4037
   162  0000                     _SSPCON2bits	set	4037
   163  0000                     _SSPSTAT	set	4039
   164  0000                     _SSPSTATbits	set	4039
   165  0000                     _T0CON	set	4053
   166  0000                     _T0CONbits	set	4053
   167  0000                     _TMR0H	set	4055
   168  0000                     _TMR0L	set	4054
   169  0000                     _TRISA	set	3986
   170  0000                     _TRISB	set	3987
   171  0000                     _TRISC	set	3988
   172  0000                     _TRISCbits	set	3988
   173  0000                     _TRISG	set	3992
   174  0000                     _LCDDATA0	set	3936
   175                           
   176                           ; #config settings
   177  000358  00                 	db	0	; dummy byte at the end
   178  0000                     
   179                           	psect	cinit
   180  000FE8                     __pcinit:
   181                           	opt stack 0
   182  000FE8                     start_initialization:
   183                           	opt stack 0
   184  000FE8                     __initialization:
   185                           	opt stack 0
   186                           
   187                           ; Clear objects allocated to COMRAM (36 bytes)
   188  000FE8  EE00  F031         	lfsr	0,__pbssCOMRAM
   189  000FEC  0E24               	movlw	36
   190  000FEE                     clear_0:
   191  000FEE  6AEE               	clrf	postinc0,c
   192  000FF0  06E8               	decf	wreg,f,c
   193  000FF2  E1FD               	bnz	clear_0
   194  000FF4                     end_of_initialization:
   195                           	opt stack 0
   196  000FF4                     __end_of__initialization:
   197                           	opt stack 0
   198  000FF4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   199  000FF6  6EF8               	movwf	tblptru,c
   200  000FF8  0100               	movlb	0
   201  000FFA  EFF0  F004         	goto	_main	;jump to C main() function
   202                           tblptru	equ	0xFF8
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           
   206                           	psect	bssCOMRAM
   207  000031                     __pbssCOMRAM:
   208                           	opt stack 0
   209  000031                     _regImg:
   210                           	opt stack 0
   211  000031                     	ds	36
   212                           tblptru	equ	0xFF8
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           
   216                           	psect	cstackCOMRAM
   217  000001                     __pcstackCOMRAM:
   218                           	opt stack 0
   219  000001                     ??_IdleI2C:
   220  000001                     ?_butnEvent:
   221                           	opt stack 0
   222  000001                     OpenI2C@slew:
   223                           	opt stack 0
   224  000001                     dly@d:
   225                           	opt stack 0
   226  000001                     delay_10ms@n:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x0
   230  000001                     	ds	1
   231  000002                     OpenI2C@sync_mode:
   232                           	opt stack 0
   233  000002                     WriteI2C@data_out:
   234                           	opt stack 0
   235                           
   236                           ; 1 bytes @ 0x1
   237  000002                     	ds	1
   238  000003                     ??_delay_10ms:
   239  000003                     ??_butnEvent:
   240  000003                     ??_FMwrite:
   241  000003                     dly@i:
   242                           	opt stack 0
   243  000003                     FMread@data:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x2
   247  000003                     	ds	1
   248  000004                     butnEvent@c:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x3
   252  000004                     	ds	1
   253  000005                     ??_FMread:
   254  000005                     FMwrite@firstByt:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x4
   258  000005                     	ds	1
   259  000006                     FMwrite@secndByt:
   260                           	opt stack 0
   261  000006                     butnEvent@c_516:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x5
   265  000006                     	ds	1
   266  000007                     FMwrite@adr:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x6
   270  000007                     	ds	1
   271  000008                     setBitInRegister@bitRegister:
   272                           	opt stack 0
   273  000008                     butnEvent@c_517:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x7
   277  000008                     	ds	1
   278  000009                     FMread@regAddr:
   279                           	opt stack 0
   280  000009                     setBitInRegister@bitState:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0x8
   284  000009                     	ds	1
   285  00000A                     ??_setBitInRegister:
   286  00000A                     FMread@firstByt:
   287                           	opt stack 0
   288  00000A                     butnEvent@c_518:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x9
   292  00000A                     	ds	1
   293  00000B                     FMread@secndByt:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0xA
   297  00000B                     	ds	1
   298  00000C                     ?_frequency:
   299                           	opt stack 0
   300  00000C                     butnEvent@c_527:
   301                           	opt stack 0
   302  00000C                     FMready@rdy:
   303                           	opt stack 0
   304  00000C                     FMvers@vsn:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0xB
   308  00000C                     	ds	2
   309  00000E                     ??_frequency:
   310  00000E                     ??_FMready:
   311  00000E                     butnEvent@c_528:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0xD
   315  00000E                     	ds	2
   316  000010                     butnEvent@c_535:
   317                           	opt stack 0
   318  000010                     FMready@sts:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0xF
   322  000010                     	ds	1
   323  000011                     setBitInRegister@address:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x10
   327  000011                     	ds	1
   328  000012                     ??_readLOInjection:
   329  000012                     setSeekDirection@direction:
   330                           	opt stack 0
   331  000012                     setHardmute@bitState:
   332                           	opt stack 0
   333  000012                     butnEvent@timereturn:
   334                           	opt stack 0
   335  000012                     FMinit@dat:
   336                           	opt stack 0
   337  000012                     FMfrequenc@f:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x11
   341  000012                     	ds	1
   342  000013                     frequency@data:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x12
   346  000013                     	ds	1
   347  000014                     ??_FMfrequenc:
   348  000014                     FMinit@ad:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x13
   352  000014                     	ds	1
   353  000015                     readLOInjection@loHi:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x14
   357  000015                     	ds	1
   358  000016                     readLOInjection@temp:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x15
   362  000016                     	ds	2
   363  000018                     readLOInjection@rssi_val:
   364                           	opt stack 0
   365  000018                     FMfrequenc@cn:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x17
   369  000018                     	ds	1
   370  000019                     readLOInjection@status:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x18
   374  000019                     	ds	1
   375  00001A                     FMfrequenc@dat:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x19
   379  00001A                     	ds	1
   380  00001B                     tuneWithAutoHiLo@curChannel:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x1A
   384  00001B                     	ds	1
   385  00001C                     
   386                           ; 1 bytes @ 0x1B
   387  00001C                     	ds	1
   388  00001D                     tuneWithAutoHiLo@temp:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x1C
   392  00001D                     	ds	2
   393  00001F                     tuneWithAutoHiLo@rssi_lo:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0x1E
   397  00001F                     	ds	1
   398  000020                     tuneWithAutoHiLo@rssi_hi:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x1F
   402  000020                     	ds	1
   403  000021                     tuneWithAutoHiLo@status:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x20
   407  000021                     	ds	2
   408  000023                     seek@curChannel:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x22
   412  000023                     	ds	2
   413  000025                     seek@direction:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x24
   417  000025                     	ds	1
   418  000026                     seek@temp:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x25
   422  000026                     	ds	2
   423  000028                     seek@status:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x27
   427  000028                     	ds	2
   428  00002A                     VolumeUp@dir:
   429                           	opt stack 0
   430  00002A                     VolumeDown@dir:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x29
   434  00002A                     	ds	1
   435  00002B                     ??_main:
   436                           
   437                           ; 1 bytes @ 0x2A
   438  00002B                     	ds	2
   439  00002D                     main@evt:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x2C
   443  00002D                     	ds	2
   444  00002F                     main@ui:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x2E
   448  00002F                     	ds	2
   449                           tblptru	equ	0xFF8
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           
   453 ;;
   454 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   455 ;;
   456 ;; *************** function _main *****************
   457 ;; Defined at:
   458 ;;		line 842 in file "main.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;		None
   461 ;; Auto vars:     Size  Location     Type
   462 ;;  ui              2   46[COMRAM] unsigned int 
   463 ;;  evt             2   44[COMRAM] int 
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   473 ;;      Params:         0       0       0       0
   474 ;;      Locals:         4       0       0       0
   475 ;;      Temps:          2       0       0       0
   476 ;;      Totals:         6       0       0       0
   477 ;;Total ram usage:        6 bytes
   478 ;; Hardware stack levels required when called:    8
   479 ;; This function calls:
   480 ;;		_FMfrequenc
   481 ;;		_FMinit
   482 ;;		_FMvers
   483 ;;		_Init
   484 ;;		_MuteHard
   485 ;;		_SeekDOWN
   486 ;;		_SeekUP
   487 ;;		_VolumeDown
   488 ;;		_VolumeUp
   489 ;;		_butnEvent
   490 ;;		_dly
   491 ;;		_errfm
   492 ;;		_nextChannel
   493 ;;		_previousChannel
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text0
   500  0009E0                     __ptext0:
   501                           	opt stack 0
   502  0009E0                     _main:
   503                           	opt stack 23
   504                           
   505                           ;main.c: 843: int evt;
   506                           ;main.c: 844: unsigned int ui;
   507                           ;main.c: 845: dly(20);
   508                           
   509                           ;incstack = 0
   510  0009E0  0E00               	movlw	0
   511  0009E2  6E02               	movwf	dly@d+1,c
   512  0009E4  0E14               	movlw	20
   513  0009E6  6E01               	movwf	dly@d,c
   514  0009E8  EC60  F007         	call	_dly	;wreg free
   515                           
   516                           ;main.c: 846: Init();
   517  0009EC  EC90  F006         	call	_Init	;wreg free
   518                           
   519                           ;main.c: 849: FMvers(&ui);
   520  0009F0  0E2F               	movlw	low main@ui
   521  0009F2  6E0C               	movwf	FMvers@vsn,c
   522  0009F4  0E00               	movlw	high main@ui
   523  0009F6  6E0D               	movwf	FMvers@vsn+1,c
   524  0009F8  EC1A  F008         	call	_FMvers	;wreg free
   525                           
   526                           ;main.c: 850: if (ui != 0x1010) errfm();
   527  0009FC  0E10               	movlw	16
   528  0009FE  182F               	xorwf	main@ui,w,c
   529  000A00  E103               	bnz	u1760
   530  000A02  0E10               	movlw	16
   531  000A04  1830               	xorwf	main@ui+1,w,c
   532  000A06  A4D8               	btfss	status,2,c
   533  000A08                     u1760:
   534  000A08  EC22  F008         	call	_errfm	;wreg free
   535                           
   536                           ;main.c: 851: if (FMinit() != 0) errfm();
   537  000A0C  EC54  F005         	call	_FMinit	;wreg free
   538  000A10  0900               	iorlw	0
   539  000A12  A4D8               	btfss	status,2,c
   540  000A14  EC22  F008         	call	_errfm	;wreg free
   541                           
   542                           ;main.c: 852: FMfrequenc(964);
   543  000A18  0E03               	movlw	3
   544  000A1A  6E13               	movwf	FMfrequenc@f+1,c
   545  000A1C  0EC4               	movlw	196
   546  000A1E  6E12               	movwf	FMfrequenc@f,c
   547  000A20  EC57  F006         	call	_FMfrequenc	;wreg free
   548  000A24                     l2294:
   549                           
   550                           ;main.c: 855: evt = butnEvent();
   551  000A24  ECAD  F001         	call	_butnEvent	;wreg free
   552  000A28  C001  F02D         	movff	?_butnEvent,main@evt
   553  000A2C  C002  F02E         	movff	?_butnEvent+1,main@evt+1
   554                           
   555                           ;main.c: 856: switch (evt) {
   556  000A30  D019               	goto	l2314
   557  000A32                     l2296:
   558  000A32  ECAC  F007         	call	_nextChannel	;wreg free
   559                           
   560                           ;main.c: 858: break;
   561  000A36  D7F6               	goto	l2294
   562  000A38                     l2298:
   563  000A38  EC9D  F007         	call	_previousChannel	;wreg free
   564                           
   565                           ;main.c: 860: break;
   566  000A3C  D7F3               	goto	l2294
   567  000A3E                     l2300:
   568  000A3E  ECCA  F007         	call	_VolumeUp	;wreg free
   569                           
   570                           ;main.c: 862: break;
   571  000A42  D7F0               	goto	l2294
   572  000A44                     l2302:
   573  000A44  ECD8  F007         	call	_VolumeDown	;wreg free
   574                           
   575                           ;main.c: 864: break;
   576  000A48  D7ED               	goto	l2294
   577  000A4A                     l2304:
   578  000A4A  0E00               	movlw	0
   579  000A4C  EC23  F008         	call	_MuteHard
   580                           
   581                           ;main.c: 866: break;
   582  000A50  D7E9               	goto	l2294
   583  000A52                     l2306:
   584  000A52  ECFF  F007         	call	_SeekUP	;wreg free
   585                           
   586                           ;main.c: 868: break;
   587  000A56  D7E6               	goto	l2294
   588  000A58                     l2308:
   589  000A58  EC08  F008         	call	_SeekDOWN	;wreg free
   590                           
   591                           ;main.c: 870: break;
   592  000A5C  D7E3               	goto	l2294
   593  000A5E                     l2310:
   594  000A5E  EC22  F008         	call	_errfm	;wreg free
   595                           
   596                           ;main.c: 876: }
   597                           
   598                           ;main.c: 875: default: break;
   599                           
   600                           ;main.c: 873: break;
   601  000A62  D7E0               	goto	l2294
   602  000A64                     l2314:
   603  000A64  C02D  F02B         	movff	main@evt,??_main
   604  000A68  C02E  F02C         	movff	main@evt+1,??_main+1
   605                           
   606                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   607                           ; Switch size 1, requested type "space"
   608                           ; Number of cases is 1, Range of values is 0 to 0
   609                           ; switch strategies available:
   610                           ; Name         Instructions Cycles
   611                           ; simple_byte            4     3 (average)
   612                           ;	Chosen strategy is simple_byte
   613  000A6C  502C               	movf	??_main+1,w,c
   614  000A6E  0A00               	xorlw	0	; case 0
   615  000A70  A4D8               	btfss	status,2,c
   616  000A72  D7D8               	goto	l2294
   617                           
   618                           ; Switch size 1, requested type "space"
   619                           ; Number of cases is 8, Range of values is 1 to 8
   620                           ; switch strategies available:
   621                           ; Name         Instructions Cycles
   622                           ; simple_byte           25    13 (average)
   623                           ;	Chosen strategy is simple_byte
   624  000A74  502B               	movf	??_main,w,c
   625  000A76  0A01               	xorlw	1	; case 1
   626  000A78  B4D8               	btfsc	status,2,c
   627  000A7A  D7DB               	goto	l2296
   628  000A7C  0A03               	xorlw	3	; case 2
   629  000A7E  B4D8               	btfsc	status,2,c
   630  000A80  D7DB               	goto	l2298
   631  000A82  0A01               	xorlw	1	; case 3
   632  000A84  B4D8               	btfsc	status,2,c
   633  000A86  D7DB               	goto	l2300
   634  000A88  0A07               	xorlw	7	; case 4
   635  000A8A  B4D8               	btfsc	status,2,c
   636  000A8C  D7DB               	goto	l2302
   637  000A8E  0A01               	xorlw	1	; case 5
   638  000A90  B4D8               	btfsc	status,2,c
   639  000A92  D7DB               	goto	l2304
   640  000A94  0A03               	xorlw	3	; case 6
   641  000A96  B4D8               	btfsc	status,2,c
   642  000A98  D7DC               	goto	l2306
   643  000A9A  0A01               	xorlw	1	; case 7
   644  000A9C  B4D8               	btfsc	status,2,c
   645  000A9E  D7DC               	goto	l2308
   646  000AA0  0A0F               	xorlw	15	; case 8
   647  000AA2  B4D8               	btfsc	status,2,c
   648  000AA4  D7DC               	goto	l2310
   649                           
   650                           ;main.c: 877: }
   651  000AA6  D7BE               	goto	l2294
   652  000AA8                     __end_of_main:
   653                           	opt stack 0
   654                           tblptru	equ	0xFF8
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           status	equ	0xFD8
   658                           
   659 ;; *************** function _previousChannel *****************
   660 ;; Defined at:
   661 ;;		line 748 in file "main.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;		None
   664 ;; Auto vars:     Size  Location     Type
   665 ;;		None
   666 ;; Return value:  Size  Location     Type
   667 ;;                  1    wreg      unsigned char 
   668 ;; Registers used:
   669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   675 ;;      Params:         0       0       0       0
   676 ;;      Locals:         0       0       0       0
   677 ;;      Temps:          0       0       0       0
   678 ;;      Totals:         0       0       0       0
   679 ;;Total ram usage:        0 bytes
   680 ;; Hardware stack levels used:    1
   681 ;; Hardware stack levels required when called:    5
   682 ;; This function calls:
   683 ;;		_FMfrequenc
   684 ;;		_delay_10ms
   685 ;; This function is called by:
   686 ;;		_main
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           	psect	text1
   691  000F3A                     __ptext1:
   692                           	opt stack 0
   693  000F3A                     _previousChannel:
   694                           	opt stack 25
   695                           
   696                           ;main.c: 750: FMfrequenc(958);
   697                           
   698                           ;incstack = 0
   699  000F3A  0E03               	movlw	3
   700  000F3C  6E13               	movwf	FMfrequenc@f+1,c
   701  000F3E  0EBE               	movlw	190
   702  000F40  6E12               	movwf	FMfrequenc@f,c
   703  000F42  EC57  F006         	call	_FMfrequenc	;wreg free
   704                           
   705                           ;main.c: 751: PORTCbits.RC7 = 1;
   706  000F46  8E82               	bsf	3970,7,c	;volatile
   707                           
   708                           ;main.c: 752: delay_10ms(10);
   709  000F48  0E00               	movlw	0
   710  000F4A  6E02               	movwf	delay_10ms@n+1,c
   711  000F4C  0E0A               	movlw	10
   712  000F4E  6E01               	movwf	delay_10ms@n,c
   713  000F50  EC8C  F007         	call	_delay_10ms	;wreg free
   714                           
   715                           ;main.c: 753: PORTCbits.RC7 = 0;
   716  000F54  9E82               	bcf	3970,7,c	;volatile
   717  000F56  0012               	return	
   718  000F58                     __end_of_previousChannel:
   719                           	opt stack 0
   720                           tblptru	equ	0xFF8
   721                           postinc0	equ	0xFEE
   722                           wreg	equ	0xFE8
   723                           status	equ	0xFD8
   724                           
   725 ;; *************** function _nextChannel *****************
   726 ;; Defined at:
   727 ;;		line 738 in file "main.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;		None
   730 ;; Auto vars:     Size  Location     Type
   731 ;;		None
   732 ;; Return value:  Size  Location     Type
   733 ;;                  1    wreg      unsigned char 
   734 ;; Registers used:
   735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   741 ;;      Params:         0       0       0       0
   742 ;;      Locals:         0       0       0       0
   743 ;;      Temps:          0       0       0       0
   744 ;;      Totals:         0       0       0       0
   745 ;;Total ram usage:        0 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; Hardware stack levels required when called:    5
   748 ;; This function calls:
   749 ;;		_FMfrequenc
   750 ;;		_delay_10ms
   751 ;; This function is called by:
   752 ;;		_main
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           	psect	text2
   757  000F58                     __ptext2:
   758                           	opt stack 0
   759  000F58                     _nextChannel:
   760                           	opt stack 25
   761                           
   762                           ;main.c: 739: FMfrequenc(964);
   763                           
   764                           ;incstack = 0
   765  000F58  0E03               	movlw	3
   766  000F5A  6E13               	movwf	FMfrequenc@f+1,c
   767  000F5C  0EC4               	movlw	196
   768  000F5E  6E12               	movwf	FMfrequenc@f,c
   769  000F60  EC57  F006         	call	_FMfrequenc	;wreg free
   770                           
   771                           ;main.c: 740: PORTCbits.RC6 = 1;
   772  000F64  8C82               	bsf	3970,6,c	;volatile
   773                           
   774                           ;main.c: 741: delay_10ms(10);
   775  000F66  0E00               	movlw	0
   776  000F68  6E02               	movwf	delay_10ms@n+1,c
   777  000F6A  0E0A               	movlw	10
   778  000F6C  6E01               	movwf	delay_10ms@n,c
   779  000F6E  EC8C  F007         	call	_delay_10ms	;wreg free
   780                           
   781                           ;main.c: 742: PORTCbits.RC6 = 0;
   782  000F72  9C82               	bcf	3970,6,c	;volatile
   783  000F74  0012               	return	
   784  000F76                     __end_of_nextChannel:
   785                           	opt stack 0
   786                           tblptru	equ	0xFF8
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           status	equ	0xFD8
   790                           
   791 ;; *************** function _FMfrequenc *****************
   792 ;; Defined at:
   793 ;;		line 673 in file "main.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;  f               2   17[COMRAM] unsigned int 
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  dat             2   25[COMRAM] unsigned int 
   798 ;;  cn              2   23[COMRAM] unsigned int 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      unsigned char 
   801 ;; Registers used:
   802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   808 ;;      Params:         2       0       0       0
   809 ;;      Locals:         4       0       0       0
   810 ;;      Temps:          4       0       0       0
   811 ;;      Totals:        10       0       0       0
   812 ;;Total ram usage:       10 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    4
   815 ;; This function calls:
   816 ;;		_FMready
   817 ;;		_FMwrite
   818 ;;		_dly
   819 ;; This function is called by:
   820 ;;		_nextChannel
   821 ;;		_previousChannel
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text3
   827  000CAE                     __ptext3:
   828                           	opt stack 0
   829  000CAE                     _FMfrequenc:
   830                           	opt stack 25
   831                           
   832                           ;main.c: 675: unsigned int dat;
   833                           ;main.c: 676: unsigned int cn;
   834                           ;main.c: 678: cn = f - 690;
   835                           
   836                           ;incstack = 0
   837  000CAE  0E4E               	movlw	78
   838  000CB0  2412               	addwf	FMfrequenc@f,w,c
   839  000CB2  6E18               	movwf	FMfrequenc@cn,c
   840  000CB4  0EFD               	movlw	253
   841  000CB6  2013               	addwfc	FMfrequenc@f+1,w,c
   842  000CB8  6E19               	movwf	FMfrequenc@cn+1,c
   843                           
   844                           ;main.c: 681: regImg[2] &= ~0x0200;
   845  000CBA  9236               	bcf	_regImg+5,1,c
   846                           
   847                           ;main.c: 682: if (FMwrite(2) != 0) return 1;
   848  000CBC  0E02               	movlw	2
   849  000CBE  EC16  F006         	call	_FMwrite
   850  000CC2  0900               	iorlw	0
   851  000CC4  A4D8               	btfss	status,2,c
   852  000CC6  0012               	return	
   853                           
   854                           ;main.c: 683: regImg[2] &= 0xfe00;
   855                           
   856                           ;	Return value of _FMfrequenc is never used
   857  000CC8  0E00               	movlw	0
   858  000CCA  1635               	andwf	_regImg+4,f,c
   859  000CCC  0EFE               	movlw	254
   860  000CCE  1636               	andwf	_regImg+5,f,c
   861                           
   862                           ;main.c: 684: regImg[2] |= (cn | 0x0200);
   863  000CD0  0E00               	movlw	0
   864  000CD2  6E14               	movwf	??_FMfrequenc& (0+255),c
   865  000CD4  0E02               	movlw	2
   866  000CD6  6E15               	movwf	(??_FMfrequenc+1)& (0+255),c
   867  000CD8  C018  F016         	movff	FMfrequenc@cn,??_FMfrequenc+2
   868  000CDC  C019  F017         	movff	FMfrequenc@cn+1,??_FMfrequenc+3
   869  000CE0  5014               	movf	??_FMfrequenc,w,c
   870  000CE2  1216               	iorwf	??_FMfrequenc+2,f,c
   871  000CE4  5015               	movf	??_FMfrequenc+1,w,c
   872  000CE6  1217               	iorwf	??_FMfrequenc+3,f,c
   873  000CE8  5016               	movf	??_FMfrequenc+2,w,c
   874  000CEA  1235               	iorwf	_regImg+4,f,c
   875  000CEC  5017               	movf	??_FMfrequenc+3,w,c
   876  000CEE  1236               	iorwf	_regImg+5,f,c
   877                           
   878                           ;main.c: 685: if (FMwrite(2) != 0) return 1;
   879  000CF0  0E02               	movlw	2
   880  000CF2  EC16  F006         	call	_FMwrite
   881  000CF6  0900               	iorlw	0
   882  000CF8  A4D8               	btfss	status,2,c
   883  000CFA  0012               	return	
   884                           
   885                           ;main.c: 687: dly(2);
   886                           
   887                           ;main.c: 686: do {
   888                           
   889                           ;	Return value of _FMfrequenc is never used
   890  000CFC  0E00               	movlw	0
   891  000CFE  6E02               	movwf	dly@d+1,c
   892  000D00  0E02               	movlw	2
   893  000D02  6E01               	movwf	dly@d,c
   894  000D04  EC60  F007         	call	_dly	;wreg free
   895                           
   896                           ;main.c: 688: if (FMready(&dat) != 0) return 1;
   897  000D08  0E1A               	movlw	low FMfrequenc@dat
   898  000D0A  6E0C               	movwf	FMready@rdy,c
   899  000D0C  0E00               	movlw	high FMfrequenc@dat
   900  000D0E  6E0D               	movwf	FMready@rdy+1,c
   901  000D10  EC1C  F007         	call	_FMready	;wreg free
   902  000D14  0900               	iorlw	0
   903  000D16  A4D8               	btfss	status,2,c
   904  000D18  0012               	return	
   905                           
   906                           ;main.c: 689: } while (!dat);
   907                           
   908                           ;	Return value of _FMfrequenc is never used
   909  000D1A  501A               	movf	FMfrequenc@dat,w,c
   910  000D1C  101B               	iorwf	FMfrequenc@dat+1,w,c
   911  000D1E  D7EC               	goto	L1
   912  000D20                     __end_of_FMfrequenc:
   913                           	opt stack 0
   914                           tblptru	equ	0xFF8
   915                           postinc0	equ	0xFEE
   916                           wreg	equ	0xFE8
   917                           status	equ	0xFD8
   918                           
   919 ;; *************** function _errfm *****************
   920 ;; Defined at:
   921 ;;		line 817 in file "main.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		None
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   935 ;;      Params:         0       0       0       0
   936 ;;      Locals:         0       0       0       0
   937 ;;      Temps:          0       0       0       0
   938 ;;      Totals:         0       0       0       0
   939 ;;Total ram usage:        0 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; This function calls:
   942 ;;		Nothing
   943 ;; This function is called by:
   944 ;;		_main
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           	psect	text4
   949  001044                     __ptext4:
   950                           	opt stack 0
   951  001044                     _errfm:
   952                           	opt stack 30
   953  001044                     l293:
   954  001044  D7FF               	goto	l293
   955  001046                     __end_of_errfm:
   956                           	opt stack 0
   957                           tblptru	equ	0xFF8
   958                           postinc0	equ	0xFEE
   959                           wreg	equ	0xFE8
   960                           status	equ	0xFD8
   961                           
   962 ;; *************** function _butnEvent *****************
   963 ;; Defined at:
   964 ;;		line 98 in file "main.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;		None
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  c               2    9[COMRAM] int 
   969 ;;  c               2    5[COMRAM] int 
   970 ;;  c               2   15[COMRAM] int 
   971 ;;  c               2   13[COMRAM] int 
   972 ;;  c               2   11[COMRAM] int 
   973 ;;  c               2    7[COMRAM] int 
   974 ;;  c               2    3[COMRAM] int 
   975 ;;  timereturn      2   17[COMRAM] int 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  2    0[COMRAM] int 
   978 ;; Registers used:
   979 ;;		wreg, status,2, status,0
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   985 ;;      Params:         2       0       0       0
   986 ;;      Locals:        16       0       0       0
   987 ;;      Temps:          1       0       0       0
   988 ;;      Totals:        19       0       0       0
   989 ;;Total ram usage:       19 bytes
   990 ;; Hardware stack levels used:    1
   991 ;; This function calls:
   992 ;;		Nothing
   993 ;; This function is called by:
   994 ;;		_main
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text5
   999  00035A                     __ptext5:
  1000                           	opt stack 0
  1001  00035A                     _butnEvent:
  1002                           	opt stack 30
  1003                           
  1004                           ;main.c: 99: int timereturn;
  1005                           ;main.c: 100: if (PORTAbits.RA0 == 0)
  1006                           
  1007                           ;incstack = 0
  1008  00035A  B080               	btfsc	3968,0,c	;volatile
  1009  00035C  D04F               	goto	l95
  1010                           
  1011                           ;main.c: 101: {
  1012                           ;main.c: 102: for (int c = 0; c <= 10; c++)_delay((unsigned long)((5)*(8000000/4000.0)))
      +                          ;
  1013  00035E  0E00               	movlw	0
  1014  000360  6E05               	movwf	butnEvent@c+1,c
  1015  000362  0E00               	movlw	0
  1016  000364  6E04               	movwf	butnEvent@c,c
  1017  000366  BE05               	btfsc	butnEvent@c+1,7,c
  1018  000368  D006               	goto	l1972
  1019  00036A  5005               	movf	butnEvent@c+1,w,c
  1020  00036C  E112               	bnz	l97
  1021  00036E  0E0B               	movlw	11
  1022  000370  5C04               	subwf	butnEvent@c,w,c
  1023  000372  B0D8               	btfsc	status,0,c
  1024  000374  D00E               	goto	l97
  1025  000376                     l1972:
  1026  000376  0E0D               	movlw	13
  1027  000378  6E03               	movwf	??_butnEvent& (0+255),c
  1028  00037A  0EFC               	movlw	252
  1029  00037C                     u1787:
  1030  00037C  2EE8               	decfsz	wreg,f,c
  1031  00037E  D7FE               	goto	u1787
  1032  000380  2E03               	decfsz	??_butnEvent& (0+255),f,c
  1033  000382  D7FC               	goto	u1787
  1034  000384  4A04               	infsnz	butnEvent@c,f,c
  1035  000386  2A05               	incf	butnEvent@c+1,f,c
  1036  000388  BE05               	btfsc	butnEvent@c+1,7,c
  1037  00038A  D7F5               	goto	l1972
  1038  00038C  5005               	movf	butnEvent@c+1,w,c
  1039  00038E  E101               	bnz	u1360
  1040  000390  D7EE               	goto	L2
  1041  000392                     u1360:
  1042  000392                     l97:
  1043                           
  1044                           ;main.c: 103: if (PORTAbits.RA0 == 0)
  1045  000392  B080               	btfsc	3968,0,c	;volatile
  1046  000394  D02A               	goto	l1994
  1047                           
  1048                           ;main.c: 104: {
  1049                           ;main.c: 105: timereturn = 1;
  1050  000396  0E00               	movlw	0
  1051  000398  6E13               	movwf	butnEvent@timereturn+1,c
  1052  00039A  0E01               	movlw	1
  1053  00039C  6E12               	movwf	butnEvent@timereturn,c
  1054                           
  1055                           ;main.c: 106: for (int c = 0; c <= 10; c++)_delay((unsigned long)((7)*(8000000/4000.0)))
      +                          ;
  1056  00039E  0E00               	movlw	0
  1057  0003A0  6E07               	movwf	butnEvent@c_516+1,c
  1058  0003A2  0E00               	movlw	0
  1059  0003A4  6E06               	movwf	butnEvent@c_516,c
  1060  0003A6  BE07               	btfsc	butnEvent@c_516+1,7,c
  1061  0003A8  D006               	goto	l1982
  1062  0003AA  5007               	movf	butnEvent@c_516+1,w,c
  1063  0003AC  E113               	bnz	l100
  1064  0003AE  0E0B               	movlw	11
  1065  0003B0  5C06               	subwf	butnEvent@c_516,w,c
  1066  0003B2  B0D8               	btfsc	status,0,c
  1067  0003B4  D00F               	goto	l100
  1068  0003B6                     l1982:
  1069  0003B6  0E13               	movlw	19
  1070  0003B8  6E03               	movwf	??_butnEvent& (0+255),c
  1071  0003BA  0E2D               	movlw	45
  1072  0003BC                     u1797:
  1073  0003BC  2EE8               	decfsz	wreg,f,c
  1074  0003BE  D7FE               	goto	u1797
  1075  0003C0  2E03               	decfsz	??_butnEvent& (0+255),f,c
  1076  0003C2  D7FC               	goto	u1797
  1077  0003C4  F000               	nop	
  1078  0003C6  4A06               	infsnz	butnEvent@c_516,f,c
  1079  0003C8  2A07               	incf	butnEvent@c_516+1,f,c
  1080  0003CA  BE07               	btfsc	butnEvent@c_516+1,7,c
  1081  0003CC  D7F4               	goto	l1982
  1082  0003CE  5007               	movf	butnEvent@c_516+1,w,c
  1083  0003D0  E101               	bnz	u1390
  1084  0003D2  D7ED               	goto	L3
  1085  0003D4                     u1390:
  1086  0003D4                     l100:
  1087                           
  1088                           ;main.c: 107: if (PORTAbits.RA0 == 0) {
  1089  0003D4  B080               	btfsc	3968,0,c	;volatile
  1090  0003D6  D004               	goto	l1988
  1091                           
  1092                           ;main.c: 108: timereturn = 6;
  1093  0003D8  0E00               	movlw	0
  1094  0003DA  6E13               	movwf	butnEvent@timereturn+1,c
  1095  0003DC  0E06               	movlw	6
  1096  0003DE  6E12               	movwf	butnEvent@timereturn,c
  1097  0003E0                     l1988:
  1098                           
  1099                           ;main.c: 109: }
  1100                           ;main.c: 111: return timereturn;
  1101  0003E0  C012  F001         	movff	butnEvent@timereturn,?_butnEvent
  1102  0003E4  C013  F002         	movff	butnEvent@timereturn+1,?_butnEvent+1
  1103  0003E8  0012               	return	
  1104  0003EA                     l1994:
  1105                           
  1106                           ;main.c: 114: timereturn = 0;
  1107  0003EA  0E00               	movlw	0
  1108  0003EC  6E13               	movwf	butnEvent@timereturn+1,c
  1109  0003EE  0E00               	movlw	0
  1110  0003F0  6E12               	movwf	butnEvent@timereturn,c
  1111                           
  1112                           ;main.c: 115: return timereturn;
  1113  0003F2  C012  F001         	movff	butnEvent@timereturn,?_butnEvent
  1114  0003F6  C013  F002         	movff	butnEvent@timereturn+1,?_butnEvent+1
  1115  0003FA  0012               	return	
  1116  0003FC                     l95:
  1117                           
  1118                           ;main.c: 116: }
  1119                           ;main.c: 117: }
  1120                           ;main.c: 119: if (PORTAbits.RA1 == 0)
  1121  0003FC  B280               	btfsc	3968,1,c	;volatile
  1122  0003FE  D04E               	goto	l104
  1123                           
  1124                           ;main.c: 120: {
  1125                           ;main.c: 121: for (int c = 0; c <= 10; c++)_delay((unsigned long)((5)*(8000000/4000.0)))
      +                          ;
  1126  000400  0E00               	movlw	0
  1127  000402  6E09               	movwf	butnEvent@c_517+1,c
  1128  000404  0E00               	movlw	0
  1129  000406  6E08               	movwf	butnEvent@c_517,c
  1130  000408  BE09               	btfsc	butnEvent@c_517+1,7,c
  1131  00040A  D006               	goto	l2006
  1132  00040C  5009               	movf	butnEvent@c_517+1,w,c
  1133  00040E  E112               	bnz	l106
  1134  000410  0E0B               	movlw	11
  1135  000412  5C08               	subwf	butnEvent@c_517,w,c
  1136  000414  B0D8               	btfsc	status,0,c
  1137  000416  D00E               	goto	l106
  1138  000418                     l2006:
  1139  000418  0E0D               	movlw	13
  1140  00041A  6E03               	movwf	??_butnEvent& (0+255),c
  1141  00041C  0EFC               	movlw	252
  1142  00041E                     u1807:
  1143  00041E  2EE8               	decfsz	wreg,f,c
  1144  000420  D7FE               	goto	u1807
  1145  000422  2E03               	decfsz	??_butnEvent& (0+255),f,c
  1146  000424  D7FC               	goto	u1807
  1147  000426  4A08               	infsnz	butnEvent@c_517,f,c
  1148  000428  2A09               	incf	butnEvent@c_517+1,f,c
  1149  00042A  BE09               	btfsc	butnEvent@c_517+1,7,c
  1150  00042C  D7F5               	goto	l2006
  1151  00042E  5009               	movf	butnEvent@c_517+1,w,c
  1152  000430  E101               	bnz	u1430
  1153  000432  D7EE               	goto	L4
  1154  000434                     u1430:
  1155  000434                     l106:
  1156                           
  1157                           ;main.c: 122: if (PORTAbits.RA1 == 0)
  1158  000434  B280               	btfsc	3968,1,c	;volatile
  1159  000436  D029               	goto	l2028
  1160                           
  1161                           ;main.c: 123: {
  1162                           ;main.c: 124: timereturn = 2;
  1163  000438  0E00               	movlw	0
  1164  00043A  6E13               	movwf	butnEvent@timereturn+1,c
  1165  00043C  0E02               	movlw	2
  1166  00043E  6E12               	movwf	butnEvent@timereturn,c
  1167                           
  1168                           ;main.c: 125: for (int c = 0; c <= 10; c++)_delay((unsigned long)((12)*(8000000/4000.0))
      +                          );
  1169  000440  0E00               	movlw	0
  1170  000442  6E0B               	movwf	butnEvent@c_518+1,c
  1171  000444  0E00               	movlw	0
  1172  000446  6E0A               	movwf	butnEvent@c_518,c
  1173  000448  BE0B               	btfsc	butnEvent@c_518+1,7,c
  1174  00044A  D006               	goto	l2016
  1175  00044C  500B               	movf	butnEvent@c_518+1,w,c
  1176  00044E  E112               	bnz	l109
  1177  000450  0E0B               	movlw	11
  1178  000452  5C0A               	subwf	butnEvent@c_518,w,c
  1179  000454  B0D8               	btfsc	status,0,c
  1180  000456  D00E               	goto	l109
  1181  000458                     l2016:
  1182  000458  0E20               	movlw	32
  1183  00045A  6E03               	movwf	??_butnEvent& (0+255),c
  1184  00045C  0E2A               	movlw	42
  1185  00045E                     u1817:
  1186  00045E  2EE8               	decfsz	wreg,f,c
  1187  000460  D7FE               	goto	u1817
  1188  000462  2E03               	decfsz	??_butnEvent& (0+255),f,c
  1189  000464  D7FC               	goto	u1817
  1190  000466  4A0A               	infsnz	butnEvent@c_518,f,c
  1191  000468  2A0B               	incf	butnEvent@c_518+1,f,c
  1192  00046A  BE0B               	btfsc	butnEvent@c_518+1,7,c
  1193  00046C  D7F5               	goto	l2016
  1194  00046E  500B               	movf	butnEvent@c_518+1,w,c
  1195  000470  E101               	bnz	u1460
  1196  000472  D7EE               	goto	L5
  1197  000474                     u1460:
  1198  000474                     l109:
  1199                           
  1200                           ;main.c: 126: if (PORTAbits.RA1 == 0) {
  1201  000474  B280               	btfsc	3968,1,c	;volatile
  1202  000476  D004               	goto	l2022
  1203                           
  1204                           ;main.c: 127: timereturn = 7;
  1205  000478  0E00               	movlw	0
  1206  00047A  6E13               	movwf	butnEvent@timereturn+1,c
  1207  00047C  0E07               	movlw	7
  1208  00047E  6E12               	movwf	butnEvent@timereturn,c
  1209  000480                     l2022:
  1210                           
  1211                           ;main.c: 128: }
  1212                           ;main.c: 130: return timereturn;
  1213  000480  C012  F001         	movff	butnEvent@timereturn,?_butnEvent
  1214  000484  C013  F002         	movff	butnEvent@timereturn+1,?_butnEvent+1
  1215  000488  0012               	return	
  1216  00048A                     l2028:
  1217                           
  1218                           ;main.c: 133: timereturn = 0;
  1219  00048A  0E00               	movlw	0
  1220  00048C  6E13               	movwf	butnEvent@timereturn+1,c
  1221  00048E  0E00               	movlw	0
  1222  000490  6E12               	movwf	butnEvent@timereturn,c
  1223                           
  1224                           ;main.c: 134: return timereturn;
  1225  000492  C012  F001         	movff	butnEvent@timereturn,?_butnEvent
  1226  000496  C013  F002         	movff	butnEvent@timereturn+1,?_butnEvent+1
  1227  00049A  0012               	return	
  1228  00049C                     l104:
  1229                           
  1230                           ;main.c: 135: }
  1231                           ;main.c: 136: }
  1232                           ;main.c: 138: if (PORTBbits.RB0 == 0)
  1233  00049C  B081               	btfsc	3969,0,c	;volatile
  1234  00049E  D026               	goto	l112
  1235                           
  1236                           ;main.c: 139: {
  1237                           ;main.c: 140: for (int c = 0; c <= 10; c++)_delay((unsigned long)((5)*(8000000/4000.0)))
      +                          ;
  1238  0004A0  0E00               	movlw	0
  1239  0004A2  6E0D               	movwf	butnEvent@c_527+1,c
  1240  0004A4  0E00               	movlw	0
  1241  0004A6  6E0C               	movwf	butnEvent@c_527,c
  1242  0004A8  BE0D               	btfsc	butnEvent@c_527+1,7,c
  1243  0004AA  D006               	goto	l2040
  1244  0004AC  500D               	movf	butnEvent@c_527+1,w,c
  1245  0004AE  E112               	bnz	l114
  1246  0004B0  0E0B               	movlw	11
  1247  0004B2  5C0C               	subwf	butnEvent@c_527,w,c
  1248  0004B4  B0D8               	btfsc	status,0,c
  1249  0004B6  D00E               	goto	l114
  1250  0004B8                     l2040:
  1251  0004B8  0E0D               	movlw	13
  1252  0004BA  6E03               	movwf	??_butnEvent& (0+255),c
  1253  0004BC  0EFC               	movlw	252
  1254  0004BE                     u1827:
  1255  0004BE  2EE8               	decfsz	wreg,f,c
  1256  0004C0  D7FE               	goto	u1827
  1257  0004C2  2E03               	decfsz	??_butnEvent& (0+255),f,c
  1258  0004C4  D7FC               	goto	u1827
  1259  0004C6  4A0C               	infsnz	butnEvent@c_527,f,c
  1260  0004C8  2A0D               	incf	butnEvent@c_527+1,f,c
  1261  0004CA  BE0D               	btfsc	butnEvent@c_527+1,7,c
  1262  0004CC  D7F5               	goto	l2040
  1263  0004CE  500D               	movf	butnEvent@c_527+1,w,c
  1264  0004D0  E101               	bnz	u1500
  1265  0004D2  D7EE               	goto	L6
  1266  0004D4                     u1500:
  1267  0004D4                     l114:
  1268                           
  1269                           ;main.c: 141: if (PORTBbits.RB0 == 0)
  1270  0004D4  B081               	btfsc	3969,0,c	;volatile
  1271  0004D6  D005               	goto	l2050
  1272                           
  1273                           ;main.c: 142: {
  1274                           ;main.c: 143: return 3;
  1275  0004D8  0E00               	movlw	0
  1276  0004DA  6E02               	movwf	?_butnEvent+1,c
  1277  0004DC  0E03               	movlw	3
  1278  0004DE  6E01               	movwf	?_butnEvent,c
  1279  0004E0  0012               	return	
  1280  0004E2                     l2050:
  1281                           
  1282                           ;main.c: 145: return 0;
  1283  0004E2  0E00               	movlw	0
  1284  0004E4  6E02               	movwf	?_butnEvent+1,c
  1285  0004E6  0E00               	movlw	0
  1286  0004E8  6E01               	movwf	?_butnEvent,c
  1287  0004EA  0012               	return	
  1288  0004EC                     l112:
  1289                           
  1290                           ;main.c: 146: }
  1291                           ;main.c: 147: }
  1292                           ;main.c: 149: if (PORTBbits.RB5 == 0)
  1293  0004EC  BA81               	btfsc	3969,5,c	;volatile
  1294  0004EE  D026               	goto	l117
  1295                           
  1296                           ;main.c: 150: {
  1297                           ;main.c: 151: for (int c = 0; c <= 10; c++)_delay((unsigned long)((5)*(8000000/4000.0)))
      +                          ;
  1298  0004F0  0E00               	movlw	0
  1299  0004F2  6E0F               	movwf	butnEvent@c_528+1,c
  1300  0004F4  0E00               	movlw	0
  1301  0004F6  6E0E               	movwf	butnEvent@c_528,c
  1302  0004F8  BE0F               	btfsc	butnEvent@c_528+1,7,c
  1303  0004FA  D006               	goto	l2060
  1304  0004FC  500F               	movf	butnEvent@c_528+1,w,c
  1305  0004FE  E112               	bnz	l119
  1306  000500  0E0B               	movlw	11
  1307  000502  5C0E               	subwf	butnEvent@c_528,w,c
  1308  000504  B0D8               	btfsc	status,0,c
  1309  000506  D00E               	goto	l119
  1310  000508                     l2060:
  1311  000508  0E0D               	movlw	13
  1312  00050A  6E03               	movwf	??_butnEvent& (0+255),c
  1313  00050C  0EFC               	movlw	252
  1314  00050E                     u1837:
  1315  00050E  2EE8               	decfsz	wreg,f,c
  1316  000510  D7FE               	goto	u1837
  1317  000512  2E03               	decfsz	??_butnEvent& (0+255),f,c
  1318  000514  D7FC               	goto	u1837
  1319  000516  4A0E               	infsnz	butnEvent@c_528,f,c
  1320  000518  2A0F               	incf	butnEvent@c_528+1,f,c
  1321  00051A  BE0F               	btfsc	butnEvent@c_528+1,7,c
  1322  00051C  D7F5               	goto	l2060
  1323  00051E  500F               	movf	butnEvent@c_528+1,w,c
  1324  000520  E101               	bnz	u1540
  1325  000522  D7EE               	goto	L7
  1326  000524                     u1540:
  1327  000524                     l119:
  1328                           
  1329                           ;main.c: 152: if (PORTBbits.RB5 == 0)
  1330  000524  BA81               	btfsc	3969,5,c	;volatile
  1331  000526  D005               	goto	l2070
  1332                           
  1333                           ;main.c: 153: {
  1334                           ;main.c: 154: return 4;
  1335  000528  0E00               	movlw	0
  1336  00052A  6E02               	movwf	?_butnEvent+1,c
  1337  00052C  0E04               	movlw	4
  1338  00052E  6E01               	movwf	?_butnEvent,c
  1339  000530  0012               	return	
  1340  000532                     l2070:
  1341                           
  1342                           ;main.c: 156: return 0;
  1343  000532  0E00               	movlw	0
  1344  000534  6E02               	movwf	?_butnEvent+1,c
  1345  000536  0E00               	movlw	0
  1346  000538  6E01               	movwf	?_butnEvent,c
  1347  00053A  0012               	return	
  1348  00053C                     l117:
  1349                           
  1350                           ;main.c: 157: }
  1351                           ;main.c: 158: }
  1352                           ;main.c: 160: if (PORTGbits.RG0 == 0)
  1353  00053C  B086               	btfsc	3974,0,c	;volatile
  1354  00053E  D025               	goto	l2094
  1355                           
  1356                           ;main.c: 161: {
  1357                           ;main.c: 162: for (int c = 0; c <= 10; c++)_delay((unsigned long)((5)*(8000000/4000.0)))
      +                          ;
  1358  000540  0E00               	movlw	0
  1359  000542  6E11               	movwf	butnEvent@c_535+1,c
  1360  000544  0E00               	movlw	0
  1361  000546  6E10               	movwf	butnEvent@c_535,c
  1362  000548  BE11               	btfsc	butnEvent@c_535+1,7,c
  1363  00054A  D006               	goto	l2080
  1364  00054C  5011               	movf	butnEvent@c_535+1,w,c
  1365  00054E  E112               	bnz	l124
  1366  000550  0E0B               	movlw	11
  1367  000552  5C10               	subwf	butnEvent@c_535,w,c
  1368  000554  B0D8               	btfsc	status,0,c
  1369  000556  D00E               	goto	l124
  1370  000558                     l2080:
  1371  000558  0E0D               	movlw	13
  1372  00055A  6E03               	movwf	??_butnEvent& (0+255),c
  1373  00055C  0EFC               	movlw	252
  1374  00055E                     u1847:
  1375  00055E  2EE8               	decfsz	wreg,f,c
  1376  000560  D7FE               	goto	u1847
  1377  000562  2E03               	decfsz	??_butnEvent& (0+255),f,c
  1378  000564  D7FC               	goto	u1847
  1379  000566  4A10               	infsnz	butnEvent@c_535,f,c
  1380  000568  2A11               	incf	butnEvent@c_535+1,f,c
  1381  00056A  BE11               	btfsc	butnEvent@c_535+1,7,c
  1382  00056C  D7F5               	goto	l2080
  1383  00056E  5011               	movf	butnEvent@c_535+1,w,c
  1384  000570  E101               	bnz	u1580
  1385  000572  D7EE               	goto	L8
  1386  000574                     u1580:
  1387  000574                     l124:
  1388                           
  1389                           ;main.c: 163: if (PORTGbits.RG0 == 0)
  1390  000574  B086               	btfsc	3974,0,c	;volatile
  1391  000576  D005               	goto	l2090
  1392                           
  1393                           ;main.c: 164: {
  1394                           ;main.c: 165: return 5;
  1395  000578  0E00               	movlw	0
  1396  00057A  6E02               	movwf	?_butnEvent+1,c
  1397  00057C  0E05               	movlw	5
  1398  00057E  6E01               	movwf	?_butnEvent,c
  1399  000580  0012               	return	
  1400  000582                     l2090:
  1401                           
  1402                           ;main.c: 167: return 0;
  1403  000582  0E00               	movlw	0
  1404  000584  6E02               	movwf	?_butnEvent+1,c
  1405  000586  0E00               	movlw	0
  1406  000588  D7FA               	goto	L9
  1407  00058A                     l2094:
  1408                           
  1409                           ;main.c: 168: }
  1410                           ;main.c: 169: }
  1411                           ;main.c: 170: return 0;
  1412  00058A  0E00               	movlw	0
  1413  00058C  6E02               	movwf	?_butnEvent+1,c
  1414  00058E  0E00               	movlw	0
  1415  000590  6E01               	movwf	?_butnEvent,c
  1416  000592  0012               	return	
  1417  000594                     __end_of_butnEvent:
  1418                           	opt stack 0
  1419                           tblptru	equ	0xFF8
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           status	equ	0xFD8
  1423                           
  1424 ;; *************** function _VolumeUp *****************
  1425 ;; Defined at:
  1426 ;;		line 758 in file "main.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;  dir             1   41[COMRAM] unsigned char 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      unsigned char 
  1433 ;; Registers used:
  1434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1440 ;;      Params:         0       0       0       0
  1441 ;;      Locals:         1       0       0       0
  1442 ;;      Temps:          0       0       0       0
  1443 ;;      Totals:         1       0       0       0
  1444 ;;Total ram usage:        1 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    7
  1447 ;; This function calls:
  1448 ;;		_delay_10ms
  1449 ;;		_seek
  1450 ;; This function is called by:
  1451 ;;		_main
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           	psect	text6
  1456  000F94                     __ptext6:
  1457                           	opt stack 0
  1458  000F94                     _VolumeUp:
  1459                           	opt stack 23
  1460                           
  1461                           ;main.c: 759: char dir = 'u';
  1462                           
  1463                           ;incstack = 0
  1464  000F94  0E75               	movlw	117
  1465  000F96  6E2A               	movwf	VolumeUp@dir,c
  1466                           
  1467                           ;main.c: 760: seek(dir);
  1468  000F98  502A               	movf	VolumeUp@dir,w,c
  1469  000F9A  ECA0  F003         	call	_seek
  1470                           
  1471                           ;main.c: 763: PORTCbits.RC6 = 1;
  1472  000F9E  8C82               	bsf	3970,6,c	;volatile
  1473                           
  1474                           ;main.c: 764: delay_10ms(10);
  1475  000FA0  0E00               	movlw	0
  1476  000FA2  6E02               	movwf	delay_10ms@n+1,c
  1477  000FA4  0E0A               	movlw	10
  1478  000FA6  6E01               	movwf	delay_10ms@n,c
  1479  000FA8  EC8C  F007         	call	_delay_10ms	;wreg free
  1480                           
  1481                           ;main.c: 765: PORTCbits.RC6 = 0;
  1482  000FAC  9C82               	bcf	3970,6,c	;volatile
  1483  000FAE  0012               	return	
  1484  000FB0                     __end_of_VolumeUp:
  1485                           	opt stack 0
  1486                           tblptru	equ	0xFF8
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           status	equ	0xFD8
  1490                           
  1491 ;; *************** function _VolumeDown *****************
  1492 ;; Defined at:
  1493 ;;		line 770 in file "main.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;  dir             1   41[COMRAM] unsigned char 
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      unsigned char 
  1500 ;; Registers used:
  1501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1507 ;;      Params:         0       0       0       0
  1508 ;;      Locals:         1       0       0       0
  1509 ;;      Temps:          0       0       0       0
  1510 ;;      Totals:         1       0       0       0
  1511 ;;Total ram usage:        1 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    7
  1514 ;; This function calls:
  1515 ;;		_delay_10ms
  1516 ;;		_seek
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text7
  1523  000FB0                     __ptext7:
  1524                           	opt stack 0
  1525  000FB0                     _VolumeDown:
  1526                           	opt stack 23
  1527                           
  1528                           ;main.c: 771: char dir = 'd';
  1529                           
  1530                           ;incstack = 0
  1531  000FB0  0E64               	movlw	100
  1532  000FB2  6E2A               	movwf	VolumeDown@dir,c
  1533                           
  1534                           ;main.c: 772: seek(dir);
  1535  000FB4  502A               	movf	VolumeDown@dir,w,c
  1536  000FB6  ECA0  F003         	call	_seek
  1537                           
  1538                           ;main.c: 775: PORTCbits.RC7 = 1;
  1539  000FBA  8E82               	bsf	3970,7,c	;volatile
  1540                           
  1541                           ;main.c: 776: delay_10ms(10);
  1542  000FBC  0E00               	movlw	0
  1543  000FBE  6E02               	movwf	delay_10ms@n+1,c
  1544  000FC0  0E0A               	movlw	10
  1545  000FC2  6E01               	movwf	delay_10ms@n,c
  1546  000FC4  EC8C  F007         	call	_delay_10ms	;wreg free
  1547                           
  1548                           ;main.c: 777: PORTCbits.RC7 = 0;
  1549  000FC8  9E82               	bcf	3970,7,c	;volatile
  1550  000FCA  0012               	return	
  1551  000FCC                     __end_of_VolumeDown:
  1552                           	opt stack 0
  1553                           tblptru	equ	0xFF8
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _seek *****************
  1559 ;; Defined at:
  1560 ;;		line 380 in file "main.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  direction       1    wreg     unsigned char 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  direction       1   36[COMRAM] unsigned char 
  1565 ;;  status          2   39[COMRAM] unsigned int 
  1566 ;;  temp            2   37[COMRAM] unsigned short 
  1567 ;;  curChannel      2   34[COMRAM] unsigned short 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  2  194[None  ] unsigned short 
  1570 ;; Registers used:
  1571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1577 ;;      Params:         0       0       0       0
  1578 ;;      Locals:         7       0       0       0
  1579 ;;      Temps:          0       0       0       0
  1580 ;;      Totals:         7       0       0       0
  1581 ;;Total ram usage:        7 bytes
  1582 ;; Hardware stack levels used:    1
  1583 ;; Hardware stack levels required when called:    6
  1584 ;; This function calls:
  1585 ;;		_FMread
  1586 ;;		_FMwrite
  1587 ;;		_frequency
  1588 ;;		_setBitInRegister
  1589 ;;		_setHardmute
  1590 ;;		_setSeekDirection
  1591 ;;		_tuneWithAutoHiLo
  1592 ;; This function is called by:
  1593 ;;		_VolumeUp
  1594 ;;		_VolumeDown
  1595 ;; This function uses a non-reentrant model
  1596 ;;
  1597                           
  1598                           	psect	text8
  1599  000740                     __ptext8:
  1600                           	opt stack 0
  1601  000740                     _seek:
  1602                           	opt stack 23
  1603                           
  1604                           ;incstack = 0
  1605                           ;seek@direction stored from wreg
  1606  000740  6E25               	movwf	seek@direction,c
  1607                           
  1608                           ;main.c: 395: unsigned short curChannel;
  1609                           ;main.c: 396: unsigned short temp = 0;
  1610  000742  0E00               	movlw	0
  1611  000744  6E27               	movwf	seek@temp+1,c
  1612  000746  0E00               	movlw	0
  1613  000748  6E26               	movwf	seek@temp,c
  1614                           
  1615                           ;main.c: 397: unsigned int status;
  1616                           ;main.c: 400: setHardmute(1);
  1617  00074A  0E01               	movlw	1
  1618  00074C  EC79  F007         	call	_setHardmute
  1619                           
  1620                           ;main.c: 402: setBitInRegister(tune_bit[0], tune_bit[1], 0);
  1621  000750  0E56               	movlw	low (_tune_bit+2)
  1622  000752  6EF6               	movwf	tblptrl,c
  1623  000754  0E03               	movlw	high (_tune_bit+2)
  1624  000756  6EF7               	movwf	tblptrh,c
  1625  000758                     	if	0	;tblptru may be non-zero
  1626  000758                     	endif
  1627  000758                     	if	0	;tblptru may be non-zero
  1628  000758                     	endif
  1629  000758  0008               	tblrd		*
  1630  00075A  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  1631  00075E  0E00               	movlw	0
  1632  000760  6E09               	movwf	setBitInRegister@bitState,c
  1633  000762  0E54               	movlw	low _tune_bit
  1634  000764  6EF6               	movwf	tblptrl,c
  1635  000766                     	if	1	;There is more than 1 active tblptr byte
  1636  000766  0E03               	movlw	high _tune_bit
  1637  000768  6EF7               	movwf	tblptrh,c
  1638  00076A                     	endif
  1639  00076A                     	if	0	;There are less than 3 active tblptr bytes
  1640  00076A                     	endif
  1641  00076A  0008               	tblrd		*
  1642  00076C  50F5               	movf	tablat,w,c
  1643  00076E  ECB7  F005         	call	_setBitInRegister
  1644                           
  1645                           ;main.c: 407: setBitInRegister(seek_bit[0], seek_bit[1], 0);
  1646  000772  0E4A               	movlw	low (_seek_bit+2)
  1647  000774  6EF6               	movwf	tblptrl,c
  1648  000776  0E03               	movlw	high (_seek_bit+2)
  1649  000778  6EF7               	movwf	tblptrh,c
  1650  00077A                     	if	0	;tblptru may be non-zero
  1651  00077A                     	endif
  1652  00077A                     	if	0	;tblptru may be non-zero
  1653  00077A                     	endif
  1654  00077A  0008               	tblrd		*
  1655  00077C  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  1656  000780  0E00               	movlw	0
  1657  000782  6E09               	movwf	setBitInRegister@bitState,c
  1658  000784  0E48               	movlw	low _seek_bit
  1659  000786  6EF6               	movwf	tblptrl,c
  1660  000788                     	if	1	;There is more than 1 active tblptr byte
  1661  000788  0E03               	movlw	high _seek_bit
  1662  00078A  6EF7               	movwf	tblptrh,c
  1663  00078C                     	endif
  1664  00078C                     	if	0	;There are less than 3 active tblptr bytes
  1665  00078C                     	endif
  1666  00078C  0008               	tblrd		*
  1667  00078E  50F5               	movf	tablat,w,c
  1668  000790  ECB7  F005         	call	_setBitInRegister
  1669                           
  1670                           ;main.c: 410: setSeekDirection(direction);
  1671  000794  5025               	movf	seek@direction,w,c
  1672  000796  ECEF  F006         	call	_setSeekDirection
  1673                           
  1674                           ;main.c: 413: setBitInRegister(seek_bit[0], seek_bit[1], 1);
  1675  00079A  0E4A               	movlw	low (_seek_bit+2)
  1676  00079C  6EF6               	movwf	tblptrl,c
  1677  00079E  0E03               	movlw	high (_seek_bit+2)
  1678  0007A0  6EF7               	movwf	tblptrh,c
  1679  0007A2                     	if	0	;tblptru may be non-zero
  1680  0007A2                     	endif
  1681  0007A2                     	if	0	;tblptru may be non-zero
  1682  0007A2                     	endif
  1683  0007A2  0008               	tblrd		*
  1684  0007A4  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  1685  0007A8  0E01               	movlw	1
  1686  0007AA  6E09               	movwf	setBitInRegister@bitState,c
  1687  0007AC  0E48               	movlw	low _seek_bit
  1688  0007AE  6EF6               	movwf	tblptrl,c
  1689  0007B0                     	if	1	;There is more than 1 active tblptr byte
  1690  0007B0  0E03               	movlw	high _seek_bit
  1691  0007B2  6EF7               	movwf	tblptrh,c
  1692  0007B4                     	endif
  1693  0007B4                     	if	0	;There are less than 3 active tblptr bytes
  1694  0007B4                     	endif
  1695  0007B4  0008               	tblrd		*
  1696  0007B6  50F5               	movf	tablat,w,c
  1697  0007B8  ECB7  F005         	call	_setBitInRegister
  1698                           
  1699                           ;main.c: 415: while (temp == 0) {
  1700  0007BC  D00E               	goto	l195
  1701  0007BE                     l1910:
  1702                           
  1703                           ;main.c: 416: if (FMread(0x13, &status) != 0) return 1;
  1704  0007BE  0E28               	movlw	low seek@status
  1705  0007C0  6E03               	movwf	FMread@data,c
  1706  0007C2  0E00               	movlw	high seek@status
  1707  0007C4  6E04               	movwf	FMread@data+1,c
  1708  0007C6  0E13               	movlw	19
  1709  0007C8  EC8B  F004         	call	_FMread
  1710  0007CC  0900               	iorlw	0
  1711  0007CE  A4D8               	btfss	status,2,c
  1712  0007D0  0012               	return	
  1713                           
  1714                           ;main.c: 417: temp = status & 0x0020;
  1715                           
  1716                           ;	Return value of _seek is never used
  1717  0007D2  0E20               	movlw	32
  1718  0007D4  1428               	andwf	seek@status,w,c
  1719  0007D6  6E26               	movwf	seek@temp,c
  1720  0007D8  6A27               	clrf	seek@temp+1,c
  1721  0007DA                     l195:
  1722  0007DA  5026               	movf	seek@temp,w,c
  1723  0007DC  1027               	iorwf	seek@temp+1,w,c
  1724  0007DE  B4D8               	btfsc	status,2,c
  1725  0007E0  D7EE               	goto	l1910
  1726                           
  1727                           ;main.c: 418: }
  1728                           ;main.c: 421: if (FMread(0x13, &status) != 0) return 1;
  1729  0007E2  0E28               	movlw	low seek@status
  1730  0007E4  6E03               	movwf	FMread@data,c
  1731  0007E6  0E00               	movlw	high seek@status
  1732  0007E8  6E04               	movwf	FMread@data+1,c
  1733  0007EA  0E13               	movlw	19
  1734  0007EC  EC8B  F004         	call	_FMread
  1735  0007F0  0900               	iorlw	0
  1736  0007F2  A4D8               	btfss	status,2,c
  1737  0007F4  0012               	return	
  1738                           
  1739                           ;main.c: 422: temp = status & 0x0010;
  1740                           
  1741                           ;	Return value of _seek is never used
  1742  0007F6  0E10               	movlw	16
  1743  0007F8  1428               	andwf	seek@status,w,c
  1744  0007FA  6E26               	movwf	seek@temp,c
  1745  0007FC  6A27               	clrf	seek@temp+1,c
  1746                           
  1747                           ;main.c: 425: if (temp != 0)
  1748  0007FE  5026               	movf	seek@temp,w,c
  1749  000800  1027               	iorwf	seek@temp+1,w,c
  1750  000802  A4D8               	btfss	status,2,c
  1751                           
  1752                           ;main.c: 426: tuneWithAutoHiLo();
  1753  000804  ECCA  F002         	call	_tuneWithAutoHiLo	;wreg free
  1754                           
  1755                           ;main.c: 429: setHardmute(0);
  1756  000808  0E00               	movlw	0
  1757  00080A  EC79  F007         	call	_setHardmute
  1758                           
  1759                           ;main.c: 431: curChannel = frequency() - 690;
  1760  00080E  EC3F  F007         	call	_frequency	;wreg free
  1761  000812  0E4E               	movlw	78
  1762  000814  240C               	addwf	?_frequency,w,c
  1763  000816  6E23               	movwf	seek@curChannel,c
  1764  000818  0EFD               	movlw	253
  1765  00081A  200D               	addwfc	?_frequency+1,w,c
  1766  00081C  6E24               	movwf	seek@curChannel+1,c
  1767                           
  1768                           ;main.c: 432: regImg[2] = regImg[2] & 0xFE00;
  1769  00081E  0E00               	movlw	0
  1770  000820  1435               	andwf	_regImg+4,w,c
  1771  000822  6E35               	movwf	_regImg+4,c
  1772  000824  0EFE               	movlw	254
  1773  000826  1436               	andwf	_regImg+5,w,c
  1774  000828  6E36               	movwf	_regImg+5,c
  1775                           
  1776                           ;main.c: 433: regImg[2] |= curChannel;
  1777  00082A  5023               	movf	seek@curChannel,w,c
  1778  00082C  1235               	iorwf	_regImg+4,f,c
  1779  00082E  5024               	movf	seek@curChannel+1,w,c
  1780  000830  1236               	iorwf	_regImg+5,f,c
  1781                           
  1782                           ;main.c: 434: FMwrite(2);
  1783  000832  0E02               	movlw	2
  1784  000834  EC16  F006         	call	_FMwrite
  1785                           
  1786                           ;main.c: 436: return frequency();
  1787                           ;	Return value of _seek is never used
  1788  000838  EC3F  F007         	call	_frequency	;wreg free
  1789  00083C  0012               	return	
  1790  00083E                     __end_of_seek:
  1791                           	opt stack 0
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           status	equ	0xFD8
  1799                           
  1800 ;; *************** function _tuneWithAutoHiLo *****************
  1801 ;; Defined at:
  1802 ;;		line 485 in file "main.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;		None
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  status          2   32[COMRAM] unsigned int 
  1807 ;;  temp            2   28[COMRAM] unsigned short 
  1808 ;;  curChannel      2   26[COMRAM] unsigned short 
  1809 ;;  rssi_hi         1   31[COMRAM] unsigned char 
  1810 ;;  rssi_lo         1   30[COMRAM] unsigned char 
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      void 
  1813 ;; Registers used:
  1814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1820 ;;      Params:         0       0       0       0
  1821 ;;      Locals:         8       0       0       0
  1822 ;;      Temps:          0       0       0       0
  1823 ;;      Totals:         8       0       0       0
  1824 ;;Total ram usage:        8 bytes
  1825 ;; Hardware stack levels used:    1
  1826 ;; Hardware stack levels required when called:    5
  1827 ;; This function calls:
  1828 ;;		_FMread
  1829 ;;		_FMwrite
  1830 ;;		_frequency
  1831 ;;		_readLOInjection
  1832 ;;		_setBitInRegister
  1833 ;;		_setHardmute
  1834 ;; This function is called by:
  1835 ;;		_seek
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text9
  1840  000594                     __ptext9:
  1841                           	opt stack 0
  1842  000594                     _tuneWithAutoHiLo:
  1843                           	opt stack 23
  1844                           
  1845                           ;main.c: 513: unsigned char rssi_lo, rssi_hi;
  1846                           ;main.c: 514: unsigned short curChannel, temp = 0;
  1847                           
  1848                           ;incstack = 0
  1849  000594  0E00               	movlw	0
  1850  000596  6E1E               	movwf	tuneWithAutoHiLo@temp+1,c
  1851  000598  0E00               	movlw	0
  1852  00059A  6E1D               	movwf	tuneWithAutoHiLo@temp,c
  1853                           
  1854                           ;main.c: 515: unsigned int status;
  1855                           ;main.c: 518: setHardmute(1);
  1856  00059C  0E01               	movlw	1
  1857  00059E  EC79  F007         	call	_setHardmute
  1858                           
  1859                           ;main.c: 520: setBitInRegister(tune_bit[0], tune_bit[1], 0);
  1860  0005A2  0E56               	movlw	low (_tune_bit+2)
  1861  0005A4  6EF6               	movwf	tblptrl,c
  1862  0005A6  0E03               	movlw	high (_tune_bit+2)
  1863  0005A8  6EF7               	movwf	tblptrh,c
  1864  0005AA                     	if	0	;tblptru may be non-zero
  1865  0005AA                     	endif
  1866  0005AA                     	if	0	;tblptru may be non-zero
  1867  0005AA                     	endif
  1868  0005AA  0008               	tblrd		*
  1869  0005AC  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  1870  0005B0  0E00               	movlw	0
  1871  0005B2  6E09               	movwf	setBitInRegister@bitState,c
  1872  0005B4  0E54               	movlw	low _tune_bit
  1873  0005B6  6EF6               	movwf	tblptrl,c
  1874  0005B8                     	if	1	;There is more than 1 active tblptr byte
  1875  0005B8  0E03               	movlw	high _tune_bit
  1876  0005BA  6EF7               	movwf	tblptrh,c
  1877  0005BC                     	endif
  1878  0005BC                     	if	0	;There are less than 3 active tblptr bytes
  1879  0005BC                     	endif
  1880  0005BC  0008               	tblrd		*
  1881  0005BE  50F5               	movf	tablat,w,c
  1882  0005C0  ECB7  F005         	call	_setBitInRegister
  1883                           
  1884                           ;main.c: 523: setBitInRegister(seek_bit[0], seek_bit[1], 0);
  1885  0005C4  0E4A               	movlw	low (_seek_bit+2)
  1886  0005C6  6EF6               	movwf	tblptrl,c
  1887  0005C8  0E03               	movlw	high (_seek_bit+2)
  1888  0005CA  6EF7               	movwf	tblptrh,c
  1889  0005CC                     	if	0	;tblptru may be non-zero
  1890  0005CC                     	endif
  1891  0005CC                     	if	0	;tblptru may be non-zero
  1892  0005CC                     	endif
  1893  0005CC  0008               	tblrd		*
  1894  0005CE  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  1895  0005D2  0E00               	movlw	0
  1896  0005D4  6E09               	movwf	setBitInRegister@bitState,c
  1897  0005D6  0E48               	movlw	low _seek_bit
  1898  0005D8  6EF6               	movwf	tblptrl,c
  1899  0005DA                     	if	1	;There is more than 1 active tblptr byte
  1900  0005DA  0E03               	movlw	high _seek_bit
  1901  0005DC  6EF7               	movwf	tblptrh,c
  1902  0005DE                     	endif
  1903  0005DE                     	if	0	;There are less than 3 active tblptr bytes
  1904  0005DE                     	endif
  1905  0005DE  0008               	tblrd		*
  1906  0005E0  50F5               	movf	tablat,w,c
  1907  0005E2  ECB7  F005         	call	_setBitInRegister
  1908                           
  1909                           ;main.c: 526: curChannel = frequency() - 690;
  1910  0005E6  EC3F  F007         	call	_frequency	;wreg free
  1911  0005EA  0E4E               	movlw	78
  1912  0005EC  240C               	addwf	?_frequency,w,c
  1913  0005EE  6E1B               	movwf	tuneWithAutoHiLo@curChannel,c
  1914  0005F0  0EFD               	movlw	253
  1915  0005F2  200D               	addwfc	?_frequency+1,w,c
  1916  0005F4  6E1C               	movwf	tuneWithAutoHiLo@curChannel+1,c
  1917                           
  1918                           ;main.c: 527: regImg[2] = regImg[2] & 0xFE00;
  1919  0005F6  0E00               	movlw	0
  1920  0005F8  1435               	andwf	_regImg+4,w,c
  1921  0005FA  6E35               	movwf	_regImg+4,c
  1922  0005FC  0EFE               	movlw	254
  1923  0005FE  1436               	andwf	_regImg+5,w,c
  1924  000600  6E36               	movwf	_regImg+5,c
  1925                           
  1926                           ;main.c: 528: regImg[2] |= curChannel;
  1927  000602  501B               	movf	tuneWithAutoHiLo@curChannel,w,c
  1928  000604  1235               	iorwf	_regImg+4,f,c
  1929  000606  501C               	movf	tuneWithAutoHiLo@curChannel+1,w,c
  1930  000608  1236               	iorwf	_regImg+5,f,c
  1931                           
  1932                           ;main.c: 529: FMwrite(2);
  1933  00060A  0E02               	movlw	2
  1934  00060C  EC16  F006         	call	_FMwrite
  1935                           
  1936                           ;main.c: 532: rssi_lo = readLOInjection(0);
  1937  000610  0E00               	movlw	0
  1938  000612  EC1F  F004         	call	_readLOInjection
  1939  000616  6E1F               	movwf	tuneWithAutoHiLo@rssi_lo,c
  1940                           
  1941                           ;main.c: 535: rssi_hi = readLOInjection(1);
  1942  000618  0E01               	movlw	1
  1943  00061A  EC1F  F004         	call	_readLOInjection
  1944  00061E  6E20               	movwf	tuneWithAutoHiLo@rssi_hi,c
  1945                           
  1946                           ;main.c: 538: if (rssi_hi > rssi_lo) {
  1947  000620  5020               	movf	tuneWithAutoHiLo@rssi_hi,w,c
  1948  000622  5C1F               	subwf	tuneWithAutoHiLo@rssi_lo,w,c
  1949  000624  B0D8               	btfsc	status,0,c
  1950  000626  D034               	goto	l1864
  1951                           
  1952                           ;main.c: 540: setBitInRegister(hiloctrl1_bit[0], hiloctrl1_bit[1], 1);
  1953  000628  0E3E               	movlw	low (_hiloctrl1_bit+2)
  1954  00062A  6EF6               	movwf	tblptrl,c
  1955  00062C  0E03               	movlw	high (_hiloctrl1_bit+2)
  1956  00062E  6EF7               	movwf	tblptrh,c
  1957  000630                     	if	0	;tblptru may be non-zero
  1958  000630                     	endif
  1959  000630                     	if	0	;tblptru may be non-zero
  1960  000630                     	endif
  1961  000630  0008               	tblrd		*
  1962  000632  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  1963  000636  0E01               	movlw	1
  1964  000638  6E09               	movwf	setBitInRegister@bitState,c
  1965  00063A  0E3C               	movlw	low _hiloctrl1_bit
  1966  00063C  6EF6               	movwf	tblptrl,c
  1967  00063E                     	if	1	;There is more than 1 active tblptr byte
  1968  00063E  0E03               	movlw	high _hiloctrl1_bit
  1969  000640  6EF7               	movwf	tblptrh,c
  1970  000642                     	endif
  1971  000642                     	if	0	;There are less than 3 active tblptr bytes
  1972  000642                     	endif
  1973  000642  0008               	tblrd		*
  1974  000644  50F5               	movf	tablat,w,c
  1975  000646  ECB7  F005         	call	_setBitInRegister
  1976                           
  1977                           ;main.c: 541: setBitInRegister(hiloctrl2_bit[0], hiloctrl2_bit[1], 1);
  1978  00064A  0E42               	movlw	low (_hiloctrl2_bit+2)
  1979  00064C  6EF6               	movwf	tblptrl,c
  1980  00064E  0E03               	movlw	high (_hiloctrl2_bit+2)
  1981  000650  6EF7               	movwf	tblptrh,c
  1982  000652                     	if	0	;tblptru may be non-zero
  1983  000652                     	endif
  1984  000652                     	if	0	;tblptru may be non-zero
  1985  000652                     	endif
  1986  000652  0008               	tblrd		*
  1987  000654  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  1988  000658  0E01               	movlw	1
  1989  00065A  6E09               	movwf	setBitInRegister@bitState,c
  1990  00065C  0E40               	movlw	low _hiloctrl2_bit
  1991  00065E  6EF6               	movwf	tblptrl,c
  1992  000660                     	if	1	;There is more than 1 active tblptr byte
  1993  000660  0E03               	movlw	high _hiloctrl2_bit
  1994  000662  6EF7               	movwf	tblptrh,c
  1995  000664                     	endif
  1996  000664                     	if	0	;There are less than 3 active tblptr bytes
  1997  000664                     	endif
  1998  000664  0008               	tblrd		*
  1999  000666  50F5               	movf	tablat,w,c
  2000  000668  ECB7  F005         	call	_setBitInRegister
  2001                           
  2002                           ;main.c: 542: setBitInRegister(hiloside_bit[0], hiloside_bit[1], 0);
  2003  00066C  0E46               	movlw	low (_hiloside_bit+2)
  2004  00066E  6EF6               	movwf	tblptrl,c
  2005  000670  0E03               	movlw	high (_hiloside_bit+2)
  2006  000672  6EF7               	movwf	tblptrh,c
  2007  000674                     	if	0	;tblptru may be non-zero
  2008  000674                     	endif
  2009  000674                     	if	0	;tblptru may be non-zero
  2010  000674                     	endif
  2011  000674  0008               	tblrd		*
  2012  000676  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  2013  00067A  0E00               	movlw	0
  2014  00067C  6E09               	movwf	setBitInRegister@bitState,c
  2015  00067E  0E44               	movlw	low _hiloside_bit
  2016  000680  6EF6               	movwf	tblptrl,c
  2017  000682                     	if	1	;There is more than 1 active tblptr byte
  2018  000682  0E03               	movlw	high _hiloside_bit
  2019  000684  6EF7               	movwf	tblptrh,c
  2020  000686                     	endif
  2021  000686                     	if	0	;There are less than 3 active tblptr bytes
  2022  000686                     	endif
  2023  000686  0008               	tblrd		*
  2024  000688  50F5               	movf	tablat,w,c
  2025  00068A  ECB7  F005         	call	_setBitInRegister
  2026                           
  2027                           ;main.c: 543: } else {
  2028  00068E  D033               	goto	l215
  2029  000690                     l1864:
  2030                           
  2031                           ;main.c: 545: setBitInRegister(hiloctrl1_bit[0], hiloctrl1_bit[1], 0);
  2032  000690  0E3E               	movlw	low (_hiloctrl1_bit+2)
  2033  000692  6EF6               	movwf	tblptrl,c
  2034  000694  0E03               	movlw	high (_hiloctrl1_bit+2)
  2035  000696  6EF7               	movwf	tblptrh,c
  2036  000698                     	if	0	;tblptru may be non-zero
  2037  000698                     	endif
  2038  000698                     	if	0	;tblptru may be non-zero
  2039  000698                     	endif
  2040  000698  0008               	tblrd		*
  2041  00069A  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  2042  00069E  0E00               	movlw	0
  2043  0006A0  6E09               	movwf	setBitInRegister@bitState,c
  2044  0006A2  0E3C               	movlw	low _hiloctrl1_bit
  2045  0006A4  6EF6               	movwf	tblptrl,c
  2046  0006A6                     	if	1	;There is more than 1 active tblptr byte
  2047  0006A6  0E03               	movlw	high _hiloctrl1_bit
  2048  0006A8  6EF7               	movwf	tblptrh,c
  2049  0006AA                     	endif
  2050  0006AA                     	if	0	;There are less than 3 active tblptr bytes
  2051  0006AA                     	endif
  2052  0006AA  0008               	tblrd		*
  2053  0006AC  50F5               	movf	tablat,w,c
  2054  0006AE  ECB7  F005         	call	_setBitInRegister
  2055                           
  2056                           ;main.c: 546: setBitInRegister(hiloctrl2_bit[0], hiloctrl2_bit[1], 0);
  2057  0006B2  0E42               	movlw	low (_hiloctrl2_bit+2)
  2058  0006B4  6EF6               	movwf	tblptrl,c
  2059  0006B6  0E03               	movlw	high (_hiloctrl2_bit+2)
  2060  0006B8  6EF7               	movwf	tblptrh,c
  2061  0006BA                     	if	0	;tblptru may be non-zero
  2062  0006BA                     	endif
  2063  0006BA                     	if	0	;tblptru may be non-zero
  2064  0006BA                     	endif
  2065  0006BA  0008               	tblrd		*
  2066  0006BC  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  2067  0006C0  0E00               	movlw	0
  2068  0006C2  6E09               	movwf	setBitInRegister@bitState,c
  2069  0006C4  0E40               	movlw	low _hiloctrl2_bit
  2070  0006C6  6EF6               	movwf	tblptrl,c
  2071  0006C8                     	if	1	;There is more than 1 active tblptr byte
  2072  0006C8  0E03               	movlw	high _hiloctrl2_bit
  2073  0006CA  6EF7               	movwf	tblptrh,c
  2074  0006CC                     	endif
  2075  0006CC                     	if	0	;There are less than 3 active tblptr bytes
  2076  0006CC                     	endif
  2077  0006CC  0008               	tblrd		*
  2078  0006CE  50F5               	movf	tablat,w,c
  2079  0006D0  ECB7  F005         	call	_setBitInRegister
  2080                           
  2081                           ;main.c: 547: setBitInRegister(hiloside_bit[0], hiloside_bit[1], 1);
  2082  0006D4  0E46               	movlw	low (_hiloside_bit+2)
  2083  0006D6  6EF6               	movwf	tblptrl,c
  2084  0006D8  0E03               	movlw	high (_hiloside_bit+2)
  2085  0006DA  6EF7               	movwf	tblptrh,c
  2086  0006DC                     	if	0	;tblptru may be non-zero
  2087  0006DC                     	endif
  2088  0006DC                     	if	0	;tblptru may be non-zero
  2089  0006DC                     	endif
  2090  0006DC  0008               	tblrd		*
  2091  0006DE  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  2092  0006E2  0E01               	movlw	1
  2093  0006E4  6E09               	movwf	setBitInRegister@bitState,c
  2094  0006E6  0E44               	movlw	low _hiloside_bit
  2095  0006E8  6EF6               	movwf	tblptrl,c
  2096  0006EA                     	if	1	;There is more than 1 active tblptr byte
  2097  0006EA  0E03               	movlw	high _hiloside_bit
  2098  0006EC  6EF7               	movwf	tblptrh,c
  2099  0006EE                     	endif
  2100  0006EE                     	if	0	;There are less than 3 active tblptr bytes
  2101  0006EE                     	endif
  2102  0006EE  0008               	tblrd		*
  2103  0006F0  50F5               	movf	tablat,w,c
  2104  0006F2  ECB7  F005         	call	_setBitInRegister
  2105  0006F6                     l215:
  2106                           
  2107                           ;main.c: 548: }
  2108                           ;main.c: 551: setBitInRegister(tune_bit[0], tune_bit[1], 1);
  2109  0006F6  0E56               	movlw	low (_tune_bit+2)
  2110  0006F8  6EF6               	movwf	tblptrl,c
  2111  0006FA  0E03               	movlw	high (_tune_bit+2)
  2112  0006FC  6EF7               	movwf	tblptrh,c
  2113  0006FE                     	if	0	;tblptru may be non-zero
  2114  0006FE                     	endif
  2115  0006FE                     	if	0	;tblptru may be non-zero
  2116  0006FE                     	endif
  2117  0006FE  0008               	tblrd		*
  2118  000700  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  2119  000704  0E01               	movlw	1
  2120  000706  6E09               	movwf	setBitInRegister@bitState,c
  2121  000708  0E54               	movlw	low _tune_bit
  2122  00070A  6EF6               	movwf	tblptrl,c
  2123  00070C                     	if	1	;There is more than 1 active tblptr byte
  2124  00070C  0E03               	movlw	high _tune_bit
  2125  00070E  6EF7               	movwf	tblptrh,c
  2126  000710                     	endif
  2127  000710                     	if	0	;There are less than 3 active tblptr bytes
  2128  000710                     	endif
  2129  000710  0008               	tblrd		*
  2130  000712  50F5               	movf	tablat,w,c
  2131  000714  ECB7  F005         	call	_setBitInRegister
  2132                           
  2133                           ;main.c: 554: while (temp == 0) {
  2134  000718  D00B               	goto	l216
  2135  00071A                     l1866:
  2136                           
  2137                           ;main.c: 555: if (FMread(0x13, &status) == 0);
  2138  00071A  0E21               	movlw	low tuneWithAutoHiLo@status
  2139  00071C  6E03               	movwf	FMread@data,c
  2140  00071E  0E00               	movlw	high tuneWithAutoHiLo@status
  2141  000720  6E04               	movwf	FMread@data+1,c
  2142  000722  0E13               	movlw	19
  2143  000724  EC8B  F004         	call	_FMread
  2144                           
  2145                           ;main.c: 556: temp = status & 0x0020;
  2146  000728  0E20               	movlw	32
  2147  00072A  1421               	andwf	tuneWithAutoHiLo@status,w,c
  2148  00072C  6E1D               	movwf	tuneWithAutoHiLo@temp,c
  2149  00072E  6A1E               	clrf	tuneWithAutoHiLo@temp+1,c
  2150  000730                     l216:
  2151  000730  501D               	movf	tuneWithAutoHiLo@temp,w,c
  2152  000732  101E               	iorwf	tuneWithAutoHiLo@temp+1,w,c
  2153  000734  B4D8               	btfsc	status,2,c
  2154  000736  D7F1               	goto	l1866
  2155                           
  2156                           ;main.c: 557: }
  2157                           ;main.c: 559: setHardmute(0);
  2158  000738  0E00               	movlw	0
  2159  00073A  EC79  F007         	call	_setHardmute
  2160  00073E  0012               	return		;funcret
  2161  000740                     __end_of_tuneWithAutoHiLo:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           status	equ	0xFD8
  2170                           
  2171 ;; *************** function _setHardmute *****************
  2172 ;; Defined at:
  2173 ;;		line 374 in file "main.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;  bitState        1    wreg     unsigned char 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  bitState        1   17[COMRAM] unsigned char 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2187 ;;      Params:         0       0       0       0
  2188 ;;      Locals:         1       0       0       0
  2189 ;;      Temps:          0       0       0       0
  2190 ;;      Totals:         1       0       0       0
  2191 ;;Total ram usage:        1 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    4
  2194 ;; This function calls:
  2195 ;;		_setBitInRegister
  2196 ;; This function is called by:
  2197 ;;		_seek
  2198 ;;		_tuneWithAutoHiLo
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text10
  2203  000EF2                     __ptext10:
  2204                           	opt stack 0
  2205  000EF2                     _setHardmute:
  2206                           	opt stack 23
  2207                           
  2208                           ;incstack = 0
  2209                           ;setHardmute@bitState stored from wreg
  2210  000EF2  6E12               	movwf	setHardmute@bitState,c
  2211                           
  2212                           ;main.c: 375: setBitInRegister(hardmute_bit[0], hardmute_bit[1], bitState);
  2213  000EF4  0E3A               	movlw	low (_hardmute_bit+2)
  2214  000EF6  6EF6               	movwf	tblptrl,c
  2215  000EF8  0E03               	movlw	high (_hardmute_bit+2)
  2216  000EFA  6EF7               	movwf	tblptrh,c
  2217  000EFC                     	if	0	;tblptru may be non-zero
  2218  000EFC                     	endif
  2219  000EFC                     	if	0	;tblptru may be non-zero
  2220  000EFC                     	endif
  2221  000EFC  0008               	tblrd		*
  2222  000EFE  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  2223  000F02  C012  F009         	movff	setHardmute@bitState,setBitInRegister@bitState
  2224  000F06  0E38               	movlw	low _hardmute_bit
  2225  000F08  6EF6               	movwf	tblptrl,c
  2226  000F0A                     	if	1	;There is more than 1 active tblptr byte
  2227  000F0A  0E03               	movlw	high _hardmute_bit
  2228  000F0C  6EF7               	movwf	tblptrh,c
  2229  000F0E                     	endif
  2230  000F0E                     	if	0	;There are less than 3 active tblptr bytes
  2231  000F0E                     	endif
  2232  000F0E  0008               	tblrd		*
  2233  000F10  50F5               	movf	tablat,w,c
  2234  000F12  ECB7  F005         	call	_setBitInRegister
  2235  000F16  0012               	return		;funcret
  2236  000F18                     __end_of_setHardmute:
  2237                           	opt stack 0
  2238                           tblptru	equ	0xFF8
  2239                           tblptrh	equ	0xFF7
  2240                           tblptrl	equ	0xFF6
  2241                           tablat	equ	0xFF5
  2242                           postinc0	equ	0xFEE
  2243                           wreg	equ	0xFE8
  2244                           status	equ	0xFD8
  2245                           
  2246 ;; *************** function _readLOInjection *****************
  2247 ;; Defined at:
  2248 ;;		line 441 in file "main.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  loHi            1    wreg     unsigned char 
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;  loHi            1   20[COMRAM] unsigned char 
  2253 ;;  status          2   24[COMRAM] unsigned int 
  2254 ;;  temp            2   21[COMRAM] unsigned short 
  2255 ;;  rssi_val        1   23[COMRAM] unsigned char 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  1    wreg      unsigned char 
  2258 ;; Registers used:
  2259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2265 ;;      Params:         0       0       0       0
  2266 ;;      Locals:         6       0       0       0
  2267 ;;      Temps:          3       0       0       0
  2268 ;;      Totals:         9       0       0       0
  2269 ;;Total ram usage:        9 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    4
  2272 ;; This function calls:
  2273 ;;		_FMread
  2274 ;;		_FMwrite
  2275 ;;		_setBitInRegister
  2276 ;; This function is called by:
  2277 ;;		_tuneWithAutoHiLo
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text11
  2282  00083E                     __ptext11:
  2283                           	opt stack 0
  2284  00083E                     _readLOInjection:
  2285                           	opt stack 23
  2286                           
  2287                           ;incstack = 0
  2288                           ;readLOInjection@loHi stored from wreg
  2289  00083E  6E15               	movwf	readLOInjection@loHi,c
  2290                           
  2291                           ;main.c: 451: unsigned char rssi_val = 0;
  2292  000840  0E00               	movlw	0
  2293  000842  6E18               	movwf	readLOInjection@rssi_val,c
  2294                           
  2295                           ;main.c: 452: unsigned short temp = 0;
  2296  000844  0E00               	movlw	0
  2297  000846  6E17               	movwf	readLOInjection@temp+1,c
  2298  000848  0E00               	movlw	0
  2299  00084A  6E16               	movwf	readLOInjection@temp,c
  2300                           
  2301                           ;main.c: 453: unsigned int status;
  2302                           ;main.c: 455: if (loHi == 1)
  2303  00084C  0415               	decf	readLOInjection@loHi,w,c
  2304  00084E  A4D8               	btfss	status,2,c
  2305  000850  D006               	goto	l1792
  2306                           
  2307                           ;main.c: 456: regImg[11] = regImg[11] | ~(0x7FFA);
  2308  000852  0E05               	movlw	5
  2309  000854  1047               	iorwf	_regImg+22,w,c
  2310  000856  6E47               	movwf	_regImg+22,c
  2311  000858  0E80               	movlw	128
  2312  00085A  1048               	iorwf	_regImg+23,w,c
  2313  00085C  D005               	goto	L10
  2314  00085E                     l1792:
  2315                           
  2316                           ;main.c: 457: else
  2317                           ;main.c: 458: regImg[11] = regImg[11] & 0x7FFA;
  2318  00085E  0EFA               	movlw	250
  2319  000860  1447               	andwf	_regImg+22,w,c
  2320  000862  6E47               	movwf	_regImg+22,c
  2321  000864  0E7F               	movlw	127
  2322  000866  1448               	andwf	_regImg+23,w,c
  2323  000868                     L10:
  2324  000868  6E48               	movwf	_regImg+23,c
  2325                           
  2326                           ;main.c: 460: FMwrite(11);
  2327  00086A  0E0B               	movlw	11
  2328  00086C  EC16  F006         	call	_FMwrite
  2329                           
  2330                           ;main.c: 463: setBitInRegister(tune_bit[0], tune_bit[1], 1);
  2331  000870  0E56               	movlw	low (_tune_bit+2)
  2332  000872  6EF6               	movwf	tblptrl,c
  2333  000874  0E03               	movlw	high (_tune_bit+2)
  2334  000876  6EF7               	movwf	tblptrh,c
  2335  000878                     	if	0	;tblptru may be non-zero
  2336  000878                     	endif
  2337  000878                     	if	0	;tblptru may be non-zero
  2338  000878                     	endif
  2339  000878  0008               	tblrd		*
  2340  00087A  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  2341  00087E  0E01               	movlw	1
  2342  000880  6E09               	movwf	setBitInRegister@bitState,c
  2343  000882  0E54               	movlw	low _tune_bit
  2344  000884  6EF6               	movwf	tblptrl,c
  2345  000886                     	if	1	;There is more than 1 active tblptr byte
  2346  000886  0E03               	movlw	high _tune_bit
  2347  000888  6EF7               	movwf	tblptrh,c
  2348  00088A                     	endif
  2349  00088A                     	if	0	;There are less than 3 active tblptr bytes
  2350  00088A                     	endif
  2351  00088A  0008               	tblrd		*
  2352  00088C  50F5               	movf	tablat,w,c
  2353  00088E  ECB7  F005         	call	_setBitInRegister
  2354                           
  2355                           ;main.c: 467: while (temp == 0) {
  2356  000892  D010               	goto	l206
  2357  000894                     l1798:
  2358                           
  2359                           ;main.c: 468: if (FMread(0x13, &status) != 0) return 1;
  2360  000894  0E19               	movlw	low readLOInjection@status
  2361  000896  6E03               	movwf	FMread@data,c
  2362  000898  0E00               	movlw	high readLOInjection@status
  2363  00089A  6E04               	movwf	FMread@data+1,c
  2364  00089C  0E13               	movlw	19
  2365  00089E  EC8B  F004         	call	_FMread
  2366  0008A2  0900               	iorlw	0
  2367  0008A4  B4D8               	btfsc	status,2,c
  2368  0008A6  D002               	goto	l1804
  2369  0008A8  0E01               	movlw	1
  2370  0008AA  0012               	return	
  2371  0008AC                     l1804:
  2372                           
  2373                           ;main.c: 469: temp = status & 0x0020;
  2374  0008AC  0E20               	movlw	32
  2375  0008AE  1419               	andwf	readLOInjection@status,w,c
  2376  0008B0  6E16               	movwf	readLOInjection@temp,c
  2377  0008B2  6A17               	clrf	readLOInjection@temp+1,c
  2378  0008B4                     l206:
  2379  0008B4  5016               	movf	readLOInjection@temp,w,c
  2380  0008B6  1017               	iorwf	readLOInjection@temp+1,w,c
  2381  0008B8  B4D8               	btfsc	status,2,c
  2382  0008BA  D7EC               	goto	l1798
  2383                           
  2384                           ;main.c: 470: }
  2385                           ;main.c: 474: if (FMread(0x13, &status) != 0) return 1;
  2386  0008BC  0E19               	movlw	low readLOInjection@status
  2387  0008BE  6E03               	movwf	FMread@data,c
  2388  0008C0  0E00               	movlw	high readLOInjection@status
  2389  0008C2  6E04               	movwf	FMread@data+1,c
  2390  0008C4  0E13               	movlw	19
  2391  0008C6  EC8B  F004         	call	_FMread
  2392  0008CA  0900               	iorlw	0
  2393  0008CC  B4D8               	btfsc	status,2,c
  2394  0008CE  D002               	goto	l1812
  2395  0008D0  0E01               	movlw	1
  2396  0008D2  0012               	return	
  2397  0008D4                     l1812:
  2398                           
  2399                           ;main.c: 475: rssi_val = (status & 0xFE00) >> 9;
  2400  0008D4  C019  F012         	movff	readLOInjection@status,??_readLOInjection
  2401  0008D8  C01A  F013         	movff	readLOInjection@status+1,??_readLOInjection+1
  2402  0008DC  0E09               	movlw	9
  2403  0008DE  6E14               	movwf	(??_readLOInjection+2)& (0+255),c
  2404  0008E0                     u1155:
  2405  0008E0  90D8               	bcf	status,0,c
  2406  0008E2  3213               	rrcf	??_readLOInjection+1,f,c
  2407  0008E4  3212               	rrcf	??_readLOInjection,f,c
  2408  0008E6  2E14               	decfsz	(??_readLOInjection+2)& (0+255),f,c
  2409  0008E8  D7FB               	goto	u1155
  2410  0008EA  5012               	movf	??_readLOInjection,w,c
  2411  0008EC  0B7F               	andlw	127
  2412  0008EE  6E18               	movwf	readLOInjection@rssi_val,c
  2413                           
  2414                           ;main.c: 478: setBitInRegister(tune_bit[0], tune_bit[1], 0);
  2415  0008F0  0E56               	movlw	low (_tune_bit+2)
  2416  0008F2  6EF6               	movwf	tblptrl,c
  2417  0008F4  0E03               	movlw	high (_tune_bit+2)
  2418  0008F6  6EF7               	movwf	tblptrh,c
  2419  0008F8                     	if	0	;tblptru may be non-zero
  2420  0008F8                     	endif
  2421  0008F8                     	if	0	;tblptru may be non-zero
  2422  0008F8                     	endif
  2423  0008F8  0008               	tblrd		*
  2424  0008FA  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  2425  0008FE  0E00               	movlw	0
  2426  000900  6E09               	movwf	setBitInRegister@bitState,c
  2427  000902  0E54               	movlw	low _tune_bit
  2428  000904  6EF6               	movwf	tblptrl,c
  2429  000906                     	if	1	;There is more than 1 active tblptr byte
  2430  000906  0E03               	movlw	high _tune_bit
  2431  000908  6EF7               	movwf	tblptrh,c
  2432  00090A                     	endif
  2433  00090A                     	if	0	;There are less than 3 active tblptr bytes
  2434  00090A                     	endif
  2435  00090A  0008               	tblrd		*
  2436  00090C  50F5               	movf	tablat,w,c
  2437  00090E  ECB7  F005         	call	_setBitInRegister
  2438                           
  2439                           ;main.c: 480: return rssi_val;
  2440  000912  5018               	movf	readLOInjection@rssi_val,w,c
  2441  000914  0012               	return	
  2442  000916                     __end_of_readLOInjection:
  2443                           	opt stack 0
  2444                           tblptru	equ	0xFF8
  2445                           tblptrh	equ	0xFF7
  2446                           tblptrl	equ	0xFF6
  2447                           tablat	equ	0xFF5
  2448                           postinc0	equ	0xFEE
  2449                           wreg	equ	0xFE8
  2450                           status	equ	0xFD8
  2451                           
  2452 ;; *************** function _frequency *****************
  2453 ;; Defined at:
  2454 ;;		line 562 in file "main.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;		None
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  data            2   18[COMRAM] unsigned int 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  2   11[COMRAM] unsigned short 
  2461 ;; Registers used:
  2462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2468 ;;      Params:         2       0       0       0
  2469 ;;      Locals:         2       0       0       0
  2470 ;;      Temps:          5       0       0       0
  2471 ;;      Totals:         9       0       0       0
  2472 ;;Total ram usage:        9 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    3
  2475 ;; This function calls:
  2476 ;;		_FMread
  2477 ;; This function is called by:
  2478 ;;		_seek
  2479 ;;		_tuneWithAutoHiLo
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text12
  2484  000E7E                     __ptext12:
  2485                           	opt stack 0
  2486  000E7E                     _frequency:
  2487                           	opt stack 24
  2488                           
  2489                           ;main.c: 563: unsigned int data;
  2490                           ;main.c: 564: FMread(0x13, &data);
  2491                           
  2492                           ;incstack = 0
  2493  000E7E  0E13               	movlw	low frequency@data
  2494  000E80  6E03               	movwf	FMread@data,c
  2495  000E82  0E00               	movlw	high frequency@data
  2496  000E84  6E04               	movwf	FMread@data+1,c
  2497  000E86  0E13               	movlw	19
  2498  000E88  EC8B  F004         	call	_FMread
  2499                           
  2500                           ;main.c: 565: return (((data & 0xFF80) >> 7) + 690);
  2501  000E8C  0EFF               	movlw	255
  2502  000E8E  6E0E               	movwf	??_frequency& (0+255),c
  2503  000E90  0E01               	movlw	1
  2504  000E92  6E0F               	movwf	(??_frequency+1)& (0+255),c
  2505  000E94  C013  F010         	movff	frequency@data,??_frequency+2
  2506  000E98  C014  F011         	movff	frequency@data+1,??_frequency+3
  2507  000E9C  0E07               	movlw	7
  2508  000E9E  6E12               	movwf	(??_frequency+4)& (0+255),c
  2509  000EA0                     u1105:
  2510  000EA0  90D8               	bcf	status,0,c
  2511  000EA2  3211               	rrcf	??_frequency+3,f,c
  2512  000EA4  3210               	rrcf	??_frequency+2,f,c
  2513  000EA6  2E12               	decfsz	(??_frequency+4)& (0+255),f,c
  2514  000EA8  D7FB               	goto	u1105
  2515  000EAA  500E               	movf	??_frequency,w,c
  2516  000EAC  1610               	andwf	??_frequency+2,f,c
  2517  000EAE  500F               	movf	??_frequency+1,w,c
  2518  000EB0  1611               	andwf	??_frequency+3,f,c
  2519  000EB2  0EB2               	movlw	178
  2520  000EB4  2410               	addwf	??_frequency+2,w,c
  2521  000EB6  6E0C               	movwf	?_frequency,c
  2522  000EB8  0E02               	movlw	2
  2523  000EBA  2011               	addwfc	??_frequency+3,w,c
  2524  000EBC  6E0D               	movwf	?_frequency+1,c
  2525  000EBE  0012               	return	
  2526  000EC0                     __end_of_frequency:
  2527                           	opt stack 0
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           postinc0	equ	0xFEE
  2533                           wreg	equ	0xFE8
  2534                           status	equ	0xFD8
  2535                           
  2536 ;; *************** function _setSeekDirection *****************
  2537 ;; Defined at:
  2538 ;;		line 366 in file "main.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;  direction       1    wreg     unsigned char 
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;  direction       1   17[COMRAM] unsigned char 
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  1    wreg      void 
  2545 ;; Registers used:
  2546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2552 ;;      Params:         0       0       0       0
  2553 ;;      Locals:         1       0       0       0
  2554 ;;      Temps:          0       0       0       0
  2555 ;;      Totals:         1       0       0       0
  2556 ;;Total ram usage:        1 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; Hardware stack levels required when called:    4
  2559 ;; This function calls:
  2560 ;;		_setBitInRegister
  2561 ;; This function is called by:
  2562 ;;		_seek
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           	psect	text13
  2567  000DDE                     __ptext13:
  2568                           	opt stack 0
  2569  000DDE                     _setSeekDirection:
  2570                           	opt stack 24
  2571                           
  2572                           ;incstack = 0
  2573                           ;setSeekDirection@direction stored from wreg
  2574  000DDE  6E12               	movwf	setSeekDirection@direction,c
  2575                           
  2576                           ;main.c: 368: if (direction == 'd')
  2577  000DE0  0E64               	movlw	100
  2578  000DE2  1812               	xorwf	setSeekDirection@direction,w,c
  2579  000DE4  A4D8               	btfss	status,2,c
  2580  000DE6  D012               	goto	l1836
  2581                           
  2582                           ;main.c: 369: setBitInRegister(seekup_bit[0], seekup_bit[1], 0);
  2583  000DE8  0E4E               	movlw	low (_seekup_bit+2)
  2584  000DEA  6EF6               	movwf	tblptrl,c
  2585  000DEC  0E03               	movlw	high (_seekup_bit+2)
  2586  000DEE  6EF7               	movwf	tblptrh,c
  2587  000DF0                     	if	0	;tblptru may be non-zero
  2588  000DF0                     	endif
  2589  000DF0                     	if	0	;tblptru may be non-zero
  2590  000DF0                     	endif
  2591  000DF0  0008               	tblrd		*
  2592  000DF2  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  2593  000DF6  0E00               	movlw	0
  2594  000DF8  6E09               	movwf	setBitInRegister@bitState,c
  2595  000DFA  0E4C               	movlw	low _seekup_bit
  2596  000DFC  6EF6               	movwf	tblptrl,c
  2597  000DFE                     	if	1	;There is more than 1 active tblptr byte
  2598  000DFE  0E03               	movlw	high _seekup_bit
  2599  000E00  6EF7               	movwf	tblptrh,c
  2600  000E02                     	endif
  2601  000E02                     	if	0	;There are less than 3 active tblptr bytes
  2602  000E02                     	endif
  2603  000E02  0008               	tblrd		*
  2604  000E04  50F5               	movf	tablat,w,c
  2605  000E06  ECB7  F005         	call	_setBitInRegister
  2606  000E0A  0012               	return	
  2607  000E0C                     l1836:
  2608                           
  2609                           ;main.c: 370: else if (direction == 'u')
  2610  000E0C  0E75               	movlw	117
  2611  000E0E  1812               	xorwf	setSeekDirection@direction,w,c
  2612  000E10  A4D8               	btfss	status,2,c
  2613  000E12  0012               	return	
  2614                           
  2615                           ;main.c: 371: setBitInRegister(seekup_bit[0], seekup_bit[1], 1);
  2616  000E14  0E4E               	movlw	low (_seekup_bit+2)
  2617  000E16  6EF6               	movwf	tblptrl,c
  2618  000E18  0E03               	movlw	high (_seekup_bit+2)
  2619  000E1A  6EF7               	movwf	tblptrh,c
  2620  000E1C                     	if	0	;tblptru may be non-zero
  2621  000E1C                     	endif
  2622  000E1C                     	if	0	;tblptru may be non-zero
  2623  000E1C                     	endif
  2624  000E1C  0008               	tblrd		*
  2625  000E1E  CFF5 F008          	movff	tablat,setBitInRegister@bitRegister
  2626  000E22  0E01               	movlw	1
  2627  000E24  6E09               	movwf	setBitInRegister@bitState,c
  2628  000E26  0E4C               	movlw	low _seekup_bit
  2629  000E28  6EF6               	movwf	tblptrl,c
  2630  000E2A                     	if	1	;There is more than 1 active tblptr byte
  2631  000E2A  0E03               	movlw	high _seekup_bit
  2632  000E2C  6EF7               	movwf	tblptrh,c
  2633  000E2E                     	endif
  2634  000E2E                     	if	0	;There are less than 3 active tblptr bytes
  2635  000E2E                     	endif
  2636  000E2E  0008               	tblrd		*
  2637  000E30  50F5               	movf	tablat,w,c
  2638  000E32  ECB7  F005         	call	_setBitInRegister
  2639  000E36  0012               	return	
  2640  000E38                     __end_of_setSeekDirection:
  2641                           	opt stack 0
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           postinc0	equ	0xFEE
  2647                           wreg	equ	0xFE8
  2648                           status	equ	0xFD8
  2649                           
  2650 ;; *************** function _setBitInRegister *****************
  2651 ;; Defined at:
  2652 ;;		line 354 in file "main.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  address         1    wreg     unsigned char 
  2655 ;;  bitRegister     1    7[COMRAM] unsigned char 
  2656 ;;  bitState        1    8[COMRAM] unsigned char 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  address         1   16[COMRAM] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2668 ;;      Params:         2       0       0       0
  2669 ;;      Locals:         1       0       0       0
  2670 ;;      Temps:          7       0       0       0
  2671 ;;      Totals:        10       0       0       0
  2672 ;;Total ram usage:       10 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    3
  2675 ;; This function calls:
  2676 ;;		_FMwrite
  2677 ;; This function is called by:
  2678 ;;		_setSeekDirection
  2679 ;;		_setHardmute
  2680 ;;		_seek
  2681 ;;		_readLOInjection
  2682 ;;		_tuneWithAutoHiLo
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           	psect	text14
  2687  000B6E                     __ptext14:
  2688                           	opt stack 0
  2689  000B6E                     _setBitInRegister:
  2690                           	opt stack 23
  2691                           
  2692                           ;incstack = 0
  2693                           ;setBitInRegister@address stored from wreg
  2694  000B6E  6E11               	movwf	setBitInRegister@address,c
  2695                           
  2696                           ;main.c: 356: if (bitState == 1)
  2697  000B70  0409               	decf	setBitInRegister@bitState,w,c
  2698  000B72  A4D8               	btfss	status,2,c
  2699  000B74  D02A               	goto	l1774
  2700                           
  2701                           ;main.c: 357: regImg[address] = regImg[address] | (1 << bitRegister);
  2702  000B76  5011               	movf	setBitInRegister@address,w,c
  2703  000B78  0D02               	mullw	2
  2704  000B7A  0E31               	movlw	low _regImg
  2705  000B7C  24F3               	addwf	prodl,w,c
  2706  000B7E  6ED9               	movwf	fsr2l,c
  2707  000B80  0E00               	movlw	high _regImg
  2708  000B82  20F4               	addwfc	prodh,w,c
  2709  000B84  6EDA               	movwf	fsr2h,c
  2710  000B86  CFDE F00A          	movff	postinc2,??_setBitInRegister
  2711  000B8A  CFDD F00B          	movff	postdec2,??_setBitInRegister+1
  2712  000B8E  C008  F00C         	movff	setBitInRegister@bitRegister,??_setBitInRegister+2
  2713  000B92  0E01               	movlw	1
  2714  000B94  6E0D               	movwf	(??_setBitInRegister+3)& (0+255),c
  2715  000B96  0E00               	movlw	0
  2716  000B98  6E0E               	movwf	(??_setBitInRegister+4)& (0+255),c
  2717  000B9A  2A0C               	incf	??_setBitInRegister+2,f,c
  2718  000B9C  D003               	goto	u1084
  2719  000B9E                     u1085:
  2720  000B9E  90D8               	bcf	status,0,c
  2721  000BA0  360D               	rlcf	??_setBitInRegister+3,f,c
  2722  000BA2  360E               	rlcf	??_setBitInRegister+4,f,c
  2723  000BA4                     u1084:
  2724  000BA4  2E0C               	decfsz	??_setBitInRegister+2,f,c
  2725  000BA6  D7FB               	goto	u1085
  2726  000BA8  500A               	movf	??_setBitInRegister,w,c
  2727  000BAA  120D               	iorwf	??_setBitInRegister+3,f,c
  2728  000BAC  500B               	movf	??_setBitInRegister+1,w,c
  2729  000BAE  120E               	iorwf	??_setBitInRegister+4,f,c
  2730  000BB0  5011               	movf	setBitInRegister@address,w,c
  2731  000BB2  0D02               	mullw	2
  2732  000BB4  0E31               	movlw	low _regImg
  2733  000BB6  24F3               	addwf	prodl,w,c
  2734  000BB8  6ED9               	movwf	fsr2l,c
  2735  000BBA  0E00               	movlw	high _regImg
  2736  000BBC  20F4               	addwfc	prodh,w,c
  2737  000BBE  6EDA               	movwf	fsr2h,c
  2738  000BC0  C00D  FFDE         	movff	??_setBitInRegister+3,postinc2
  2739  000BC4  C00E  FFDD         	movff	??_setBitInRegister+4,postdec2
  2740  000BC8  D02D               	goto	l1776
  2741  000BCA                     l1774:
  2742                           
  2743                           ;main.c: 358: else
  2744                           ;main.c: 359: regImg[address] = regImg[address] & ~(1 << bitRegister);
  2745  000BCA  5011               	movf	setBitInRegister@address,w,c
  2746  000BCC  0D02               	mullw	2
  2747  000BCE  0E31               	movlw	low _regImg
  2748  000BD0  24F3               	addwf	prodl,w,c
  2749  000BD2  6ED9               	movwf	fsr2l,c
  2750  000BD4  0E00               	movlw	high _regImg
  2751  000BD6  20F4               	addwfc	prodh,w,c
  2752  000BD8  6EDA               	movwf	fsr2h,c
  2753  000BDA  CFDE F00A          	movff	postinc2,??_setBitInRegister
  2754  000BDE  CFDD F00B          	movff	postdec2,??_setBitInRegister+1
  2755  000BE2  C008  F00C         	movff	setBitInRegister@bitRegister,??_setBitInRegister+2
  2756  000BE6  0E01               	movlw	1
  2757  000BE8  6E0D               	movwf	(??_setBitInRegister+3)& (0+255),c
  2758  000BEA  0E00               	movlw	0
  2759  000BEC  6E0E               	movwf	(??_setBitInRegister+4)& (0+255),c
  2760  000BEE  2A0C               	incf	??_setBitInRegister+2,f,c
  2761  000BF0  D003               	goto	u1094
  2762  000BF2                     u1095:
  2763  000BF2  90D8               	bcf	status,0,c
  2764  000BF4  360D               	rlcf	??_setBitInRegister+3,f,c
  2765  000BF6  360E               	rlcf	??_setBitInRegister+4,f,c
  2766  000BF8                     u1094:
  2767  000BF8  2E0C               	decfsz	??_setBitInRegister+2,f,c
  2768  000BFA  D7FB               	goto	u1095
  2769  000BFC  1C0D               	comf	??_setBitInRegister+3,w,c
  2770  000BFE  6E0F               	movwf	(??_setBitInRegister+5)& (0+255),c
  2771  000C00  1C0E               	comf	??_setBitInRegister+4,w,c
  2772  000C02  6E10               	movwf	(??_setBitInRegister+6)& (0+255),c
  2773  000C04  500A               	movf	??_setBitInRegister,w,c
  2774  000C06  160F               	andwf	??_setBitInRegister+5,f,c
  2775  000C08  500B               	movf	??_setBitInRegister+1,w,c
  2776  000C0A  1610               	andwf	??_setBitInRegister+6,f,c
  2777  000C0C  5011               	movf	setBitInRegister@address,w,c
  2778  000C0E  0D02               	mullw	2
  2779  000C10  0E31               	movlw	low _regImg
  2780  000C12  24F3               	addwf	prodl,w,c
  2781  000C14  6ED9               	movwf	fsr2l,c
  2782  000C16  0E00               	movlw	high _regImg
  2783  000C18  20F4               	addwfc	prodh,w,c
  2784  000C1A  6EDA               	movwf	fsr2h,c
  2785  000C1C  C00F  FFDE         	movff	??_setBitInRegister+5,postinc2
  2786  000C20  C010  FFDD         	movff	??_setBitInRegister+6,postdec2
  2787  000C24                     l1776:
  2788                           
  2789                           ;main.c: 361: FMwrite(address);
  2790  000C24  5011               	movf	setBitInRegister@address,w,c
  2791  000C26  EC16  F006         	call	_FMwrite
  2792  000C2A  0012               	return		;funcret
  2793  000C2C                     __end_of_setBitInRegister:
  2794                           	opt stack 0
  2795                           tblptru	equ	0xFF8
  2796                           tblptrh	equ	0xFF7
  2797                           tblptrl	equ	0xFF6
  2798                           tablat	equ	0xFF5
  2799                           prodh	equ	0xFF4
  2800                           prodl	equ	0xFF3
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           postinc2	equ	0xFDE
  2804                           postdec2	equ	0xFDD
  2805                           fsr2h	equ	0xFDA
  2806                           fsr2l	equ	0xFD9
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function _SeekUP *****************
  2810 ;; Defined at:
  2811 ;;		line 788 in file "main.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;		None
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;		None
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      unsigned char 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2825 ;;      Params:         0       0       0       0
  2826 ;;      Locals:         0       0       0       0
  2827 ;;      Temps:          0       0       0       0
  2828 ;;      Totals:         0       0       0       0
  2829 ;;Total ram usage:        0 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    1
  2832 ;; This function calls:
  2833 ;;		_delay_10ms
  2834 ;; This function is called by:
  2835 ;;		_main
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text15
  2840  000FFE                     __ptext15:
  2841                           	opt stack 0
  2842  000FFE                     _SeekUP:
  2843                           	opt stack 29
  2844                           
  2845                           ;main.c: 790: PORTCbits.RC7 = 1;
  2846                           
  2847                           ;incstack = 0
  2848  000FFE  8E82               	bsf	3970,7,c	;volatile
  2849                           
  2850                           ;main.c: 791: delay_10ms(10);
  2851  001000  0E00               	movlw	0
  2852  001002  6E02               	movwf	delay_10ms@n+1,c
  2853  001004  0E0A               	movlw	10
  2854  001006  6E01               	movwf	delay_10ms@n,c
  2855  001008  EC8C  F007         	call	_delay_10ms	;wreg free
  2856                           
  2857                           ;main.c: 792: PORTCbits.RC7 = 0;
  2858  00100C  9E82               	bcf	3970,7,c	;volatile
  2859  00100E  0012               	return	
  2860  001010                     __end_of_SeekUP:
  2861                           	opt stack 0
  2862                           tblptru	equ	0xFF8
  2863                           tblptrh	equ	0xFF7
  2864                           tblptrl	equ	0xFF6
  2865                           tablat	equ	0xFF5
  2866                           prodh	equ	0xFF4
  2867                           prodl	equ	0xFF3
  2868                           postinc0	equ	0xFEE
  2869                           wreg	equ	0xFE8
  2870                           postinc2	equ	0xFDE
  2871                           postdec2	equ	0xFDD
  2872                           fsr2h	equ	0xFDA
  2873                           fsr2l	equ	0xFD9
  2874                           status	equ	0xFD8
  2875                           
  2876 ;; *************** function _SeekDOWN *****************
  2877 ;; Defined at:
  2878 ;;		line 797 in file "main.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;		None
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;		None
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  1    wreg      unsigned char 
  2885 ;; Registers used:
  2886 ;;		wreg, status,2, status,0, cstack
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2892 ;;      Params:         0       0       0       0
  2893 ;;      Locals:         0       0       0       0
  2894 ;;      Temps:          0       0       0       0
  2895 ;;      Totals:         0       0       0       0
  2896 ;;Total ram usage:        0 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    1
  2899 ;; This function calls:
  2900 ;;		_delay_10ms
  2901 ;; This function is called by:
  2902 ;;		_main
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text16
  2907  001010                     __ptext16:
  2908                           	opt stack 0
  2909  001010                     _SeekDOWN:
  2910                           	opt stack 29
  2911                           
  2912                           ;main.c: 799: PORTCbits.RC7 = 1;
  2913                           
  2914                           ;incstack = 0
  2915  001010  8E82               	bsf	3970,7,c	;volatile
  2916                           
  2917                           ;main.c: 800: delay_10ms(10);
  2918  001012  0E00               	movlw	0
  2919  001014  6E02               	movwf	delay_10ms@n+1,c
  2920  001016  0E0A               	movlw	10
  2921  001018  6E01               	movwf	delay_10ms@n,c
  2922  00101A  EC8C  F007         	call	_delay_10ms	;wreg free
  2923                           
  2924                           ;main.c: 801: PORTCbits.RC7 = 0;
  2925  00101E  9E82               	bcf	3970,7,c	;volatile
  2926  001020  0012               	return	
  2927  001022                     __end_of_SeekDOWN:
  2928                           	opt stack 0
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           postinc0	equ	0xFEE
  2936                           wreg	equ	0xFE8
  2937                           postinc2	equ	0xFDE
  2938                           postdec2	equ	0xFDD
  2939                           fsr2h	equ	0xFDA
  2940                           fsr2l	equ	0xFD9
  2941                           status	equ	0xFD8
  2942                           
  2943 ;; *************** function _delay_10ms *****************
  2944 ;; Defined at:
  2945 ;;		line 880 in file "main.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  n               2    0[COMRAM] unsigned int 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;		None
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      void 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2959 ;;      Params:         2       0       0       0
  2960 ;;      Locals:         0       0       0       0
  2961 ;;      Temps:          1       0       0       0
  2962 ;;      Totals:         3       0       0       0
  2963 ;;Total ram usage:        3 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; This function calls:
  2966 ;;		Nothing
  2967 ;; This function is called by:
  2968 ;;		_nextChannel
  2969 ;;		_previousChannel
  2970 ;;		_VolumeUp
  2971 ;;		_VolumeDown
  2972 ;;		_SeekUP
  2973 ;;		_SeekDOWN
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text17
  2978  000F18                     __ptext17:
  2979                           	opt stack 0
  2980  000F18                     _delay_10ms:
  2981                           	opt stack 29
  2982                           
  2983                           ;main.c: 881: while (n-- != 0) {
  2984                           
  2985                           ;incstack = 0
  2986  000F18  D007               	goto	l1962
  2987  000F1A                     l1960:
  2988                           
  2989                           ;main.c: 882: _delay((unsigned long)((12)*(8000000/4000.0)));
  2990  000F1A  0E20               	movlw	32
  2991  000F1C  6E03               	movwf	??_delay_10ms& (0+255),c
  2992  000F1E  0E2A               	movlw	42
  2993  000F20                     u1857:
  2994  000F20  2EE8               	decfsz	wreg,f,c
  2995  000F22  D7FE               	goto	u1857
  2996  000F24  2E03               	decfsz	??_delay_10ms& (0+255),f,c
  2997  000F26  D7FC               	goto	u1857
  2998  000F28                     l1962:
  2999  000F28  0601               	decf	delay_10ms@n,f,c
  3000  000F2A  A0D8               	btfss	status,0,c
  3001  000F2C  0602               	decf	delay_10ms@n+1,f,c
  3002  000F2E  2801               	incf	delay_10ms@n,w,c
  3003  000F30  E1F4               	bnz	l1960
  3004  000F32  2802               	incf	delay_10ms@n+1,w,c
  3005  000F34  B4D8               	btfsc	status,2,c
  3006  000F36  0012               	return	
  3007  000F38  D7F0               	goto	l1960
  3008  000F3A                     __end_of_delay_10ms:
  3009                           	opt stack 0
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           postinc0	equ	0xFEE
  3017                           wreg	equ	0xFE8
  3018                           postinc2	equ	0xFDE
  3019                           postdec2	equ	0xFDD
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _MuteHard *****************
  3025 ;; Defined at:
  3026 ;;		line 782 in file "main.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  down            1    wreg     unsigned char 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  down            1    0[COMRAM] unsigned char 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      unsigned char 
  3033 ;; Registers used:
  3034 ;;		wreg
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3040 ;;      Params:         0       0       0       0
  3041 ;;      Locals:         0       0       0       0
  3042 ;;      Temps:          0       0       0       0
  3043 ;;      Totals:         0       0       0       0
  3044 ;;Total ram usage:        0 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; This function calls:
  3047 ;;		Nothing
  3048 ;; This function is called by:
  3049 ;;		_main
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           	psect	text18
  3054  001046                     __ptext18:
  3055                           	opt stack 0
  3056  001046                     _MuteHard:
  3057                           	opt stack 30
  3058                           
  3059                           ;main.c: 785: return 0;
  3060                           ;	Return value of _MuteHard is never used
  3061                           
  3062                           ;incstack = 0
  3063  001046  0012               	return		;funcret
  3064  001048                     __end_of_MuteHard:
  3065                           	opt stack 0
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           prodh	equ	0xFF4
  3071                           prodl	equ	0xFF3
  3072                           postinc0	equ	0xFEE
  3073                           wreg	equ	0xFE8
  3074                           postinc2	equ	0xFDE
  3075                           postdec2	equ	0xFDD
  3076                           fsr2h	equ	0xFDA
  3077                           fsr2l	equ	0xFD9
  3078                           status	equ	0xFD8
  3079                           
  3080 ;; *************** function _Init *****************
  3081 ;; Defined at:
  3082 ;;		line 207 in file "main.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;		None
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  i               2    0        int 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      void 
  3089 ;; Registers used:
  3090 ;;		wreg, status,2, status,0, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3096 ;;      Params:         0       0       0       0
  3097 ;;      Locals:         0       0       0       0
  3098 ;;      Temps:          0       0       0       0
  3099 ;;      Totals:         0       0       0       0
  3100 ;;Total ram usage:        0 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    1
  3103 ;; This function calls:
  3104 ;;		_OpenI2C
  3105 ;; This function is called by:
  3106 ;;		_main
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           	psect	text19
  3111  000D20                     __ptext19:
  3112                           	opt stack 0
  3113  000D20                     _Init:
  3114                           	opt stack 29
  3115                           
  3116                           ;main.c: 209: int i;
  3117                           ;main.c: 211: OSCCON = 0b01110010;
  3118                           
  3119                           ;incstack = 0
  3120  000D20  0E72               	movlw	114
  3121  000D22  6ED3               	movwf	4051,c	;volatile
  3122                           
  3123                           ;main.c: 212: LCDSE0 = 0b11111111;
  3124  000D24  010F               	movlb	15	; () banked
  3125  000D26  695A               	setf	90,b	;volatile
  3126                           
  3127                           ; BSR set to: 15
  3128                           ;main.c: 213: LCDSE1 = 0b11111111;
  3129  000D28  010F               	movlb	15	; () banked
  3130  000D2A  695B               	setf	91,b	;volatile
  3131                           
  3132                           ; BSR set to: 15
  3133                           ;main.c: 214: LCDSE2 = 0b11111111;
  3134  000D2C  010F               	movlb	15	; () banked
  3135  000D2E  695C               	setf	92,b	;volatile
  3136                           
  3137                           ;main.c: 215: LCDSE3 = 0b00000000;
  3138  000D30  0E00               	movlw	0
  3139  000D32  010F               	movlb	15	; () banked
  3140  000D34  6F5D               	movwf	93,b	;volatile
  3141                           
  3142                           ;main.c: 216: LCDCON = 0b10001000;
  3143  000D36  0E88               	movlw	136
  3144  000D38  010F               	movlb	15	; () banked
  3145  000D3A  6F59               	movwf	89,b	;volatile
  3146                           
  3147                           ;main.c: 217: LCDPS = 0b00110110;
  3148  000D3C  0E36               	movlw	54
  3149  000D3E  010F               	movlb	15	; () banked
  3150  000D40  6F58               	movwf	88,b	;volatile
  3151                           
  3152                           ;main.c: 218: ADCON1 = 0b00111111;
  3153  000D42  0E3F               	movlw	63
  3154  000D44  6EC1               	movwf	4033,c	;volatile
  3155                           
  3156                           ;main.c: 219: TRISA = 0b00000011;
  3157  000D46  0E03               	movlw	3
  3158  000D48  6E92               	movwf	3986,c	;volatile
  3159                           
  3160                           ;main.c: 220: TRISB = 0b00100001;
  3161  000D4A  0E21               	movlw	33
  3162  000D4C  6E93               	movwf	3987,c	;volatile
  3163                           
  3164                           ;main.c: 221: TRISC = 0b00011000;
  3165  000D4E  0E18               	movlw	24
  3166  000D50  6E94               	movwf	3988,c	;volatile
  3167                           
  3168                           ; BSR set to: 15
  3169                           ;main.c: 222: TRISG = 0b11111111;
  3170  000D52  6898               	setf	3992,c	;volatile
  3171                           
  3172                           ;main.c: 223: PORTA = 0;
  3173  000D54  0E00               	movlw	0
  3174  000D56  6E80               	movwf	3968,c	;volatile
  3175                           
  3176                           ;main.c: 224: PORTB = 0;
  3177  000D58  0E00               	movlw	0
  3178  000D5A  6E81               	movwf	3969,c	;volatile
  3179                           
  3180                           ;main.c: 225: PORTC = 0;
  3181  000D5C  0E00               	movlw	0
  3182  000D5E  6E82               	movwf	3970,c	;volatile
  3183                           
  3184                           ; BSR set to: 15
  3185                           ;main.c: 226: INTCONbits.TMR0IF = 0;
  3186  000D60  94F2               	bcf	intcon,2,c	;volatile
  3187                           
  3188                           ;main.c: 228: T0CON = 0b00001000;
  3189  000D62  0E08               	movlw	8
  3190  000D64  6ED5               	movwf	4053,c	;volatile
  3191                           
  3192                           ;main.c: 229: TMR0H = 0;
  3193  000D66  0E00               	movlw	0
  3194  000D68  6ED7               	movwf	4055,c	;volatile
  3195                           
  3196                           ;main.c: 230: TMR0L = 0;
  3197  000D6A  0E00               	movlw	0
  3198  000D6C  6ED6               	movwf	4054,c	;volatile
  3199                           
  3200                           ; BSR set to: 15
  3201                           ;main.c: 231: T0CONbits.TMR0ON = 1;
  3202  000D6E  8ED5               	bsf	4053,7,c	;volatile
  3203                           
  3204                           ; BSR set to: 15
  3205                           ;main.c: 232: OpenI2C(0b00001000, 0b10000000);
  3206  000D70  0E80               	movlw	128
  3207  000D72  6E01               	movwf	OpenI2C@slew,c
  3208  000D74  0E08               	movlw	8
  3209  000D76  ECBB  F007         	call	_OpenI2C
  3210                           
  3211                           ;main.c: 233: SSPADD = 0x3F;
  3212  000D7A  0E3F               	movlw	63
  3213  000D7C  6EC8               	movwf	4040,c	;volatile
  3214  000D7E  0012               	return	
  3215  000D80                     __end_of_Init:
  3216                           	opt stack 0
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           prodh	equ	0xFF4
  3222                           prodl	equ	0xFF3
  3223                           intcon	equ	0xFF2
  3224                           postinc0	equ	0xFEE
  3225                           wreg	equ	0xFE8
  3226                           postinc2	equ	0xFDE
  3227                           postdec2	equ	0xFDD
  3228                           fsr2h	equ	0xFDA
  3229                           fsr2l	equ	0xFD9
  3230                           status	equ	0xFD8
  3231                           
  3232 ;; *************** function _OpenI2C *****************
  3233 ;; Defined at:
  3234 ;;		line 14 in file "/Applications/microchip/xc8/v1.38/sources/pic18/plib/i2c/i2c_open.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  sync_mode       1    wreg     unsigned char 
  3237 ;;  slew            1    0[COMRAM] unsigned char 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  sync_mode       1    1[COMRAM] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3249 ;;      Params:         1       0       0       0
  3250 ;;      Locals:         1       0       0       0
  3251 ;;      Temps:          0       0       0       0
  3252 ;;      Totals:         2       0       0       0
  3253 ;;Total ram usage:        2 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; This function calls:
  3256 ;;		Nothing
  3257 ;; This function is called by:
  3258 ;;		_Init
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text20
  3263  000F76                     __ptext20:
  3264                           	opt stack 0
  3265  000F76                     _OpenI2C:
  3266                           	opt stack 29
  3267                           
  3268                           ;incstack = 0
  3269                           ;OpenI2C@sync_mode stored from wreg
  3270  000F76  6E02               	movwf	OpenI2C@sync_mode,c
  3271  000F78  0E3F               	movlw	63
  3272  000F7A  16C7               	andwf	4039,f,c	;volatile
  3273  000F7C  0E00               	movlw	0
  3274  000F7E  6EC6               	movwf	4038,c	;volatile
  3275  000F80  0E00               	movlw	0
  3276  000F82  6EC5               	movwf	4037,c	;volatile
  3277  000F84  5002               	movf	OpenI2C@sync_mode,w,c
  3278  000F86  12C6               	iorwf	4038,f,c	;volatile
  3279  000F88  5001               	movf	OpenI2C@slew,w,c
  3280  000F8A  12C7               	iorwf	4039,f,c	;volatile
  3281  000F8C  8694               	bsf	3988,3,c	;volatile
  3282  000F8E  8894               	bsf	3988,4,c	;volatile
  3283  000F90  8AC6               	bsf	4038,5,c	;volatile
  3284  000F92  0012               	return		;funcret
  3285  000F94                     __end_of_OpenI2C:
  3286                           	opt stack 0
  3287                           tblptru	equ	0xFF8
  3288                           tblptrh	equ	0xFF7
  3289                           tblptrl	equ	0xFF6
  3290                           tablat	equ	0xFF5
  3291                           prodh	equ	0xFF4
  3292                           prodl	equ	0xFF3
  3293                           intcon	equ	0xFF2
  3294                           postinc0	equ	0xFEE
  3295                           wreg	equ	0xFE8
  3296                           postinc2	equ	0xFDE
  3297                           postdec2	equ	0xFDD
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           
  3302 ;; *************** function _FMvers *****************
  3303 ;; Defined at:
  3304 ;;		line 705 in file "main.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;  vsn             2   11[COMRAM] PTR unsigned int 
  3307 ;;		 -> main@ui(2), 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;		None
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      unsigned char 
  3312 ;; Registers used:
  3313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3319 ;;      Params:         2       0       0       0
  3320 ;;      Locals:         0       0       0       0
  3321 ;;      Temps:          0       0       0       0
  3322 ;;      Totals:         2       0       0       0
  3323 ;;Total ram usage:        2 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    3
  3326 ;; This function calls:
  3327 ;;		_FMread
  3328 ;; This function is called by:
  3329 ;;		_main
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text21
  3334  001034                     __ptext21:
  3335                           	opt stack 0
  3336  001034                     _FMvers:
  3337                           	opt stack 27
  3338                           
  3339                           ;main.c: 706: if (FMread(0x1C, vsn) != 0) return 1;
  3340                           
  3341                           ;incstack = 0
  3342  001034  C00C  F003         	movff	FMvers@vsn,FMread@data
  3343  001038  C00D  F004         	movff	FMvers@vsn+1,FMread@data+1
  3344  00103C  0E1C               	movlw	28
  3345  00103E  EC8B  F004         	call	_FMread
  3346                           
  3347                           ;	Return value of _FMvers is never used
  3348  001042  0012               	return	
  3349  001044                     __end_of_FMvers:
  3350                           	opt stack 0
  3351                           tblptru	equ	0xFF8
  3352                           tblptrh	equ	0xFF7
  3353                           tblptrl	equ	0xFF6
  3354                           tablat	equ	0xFF5
  3355                           prodh	equ	0xFF4
  3356                           prodl	equ	0xFF3
  3357                           intcon	equ	0xFF2
  3358                           postinc0	equ	0xFEE
  3359                           wreg	equ	0xFE8
  3360                           postinc2	equ	0xFDE
  3361                           postdec2	equ	0xFDD
  3362                           fsr2h	equ	0xFDA
  3363                           fsr2l	equ	0xFD9
  3364                           status	equ	0xFD8
  3365                           
  3366 ;; *************** function _FMinit *****************
  3367 ;; Defined at:
  3368 ;;		line 599 in file "main.c"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;		None
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;  dat             2   17[COMRAM] unsigned int 
  3373 ;;  ad              1   19[COMRAM] unsigned char 
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  1    wreg      unsigned char 
  3376 ;; Registers used:
  3377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3383 ;;      Params:         0       0       0       0
  3384 ;;      Locals:         3       0       0       0
  3385 ;;      Temps:          0       0       0       0
  3386 ;;      Totals:         3       0       0       0
  3387 ;;Total ram usage:        3 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    4
  3390 ;; This function calls:
  3391 ;;		_FMready
  3392 ;;		_FMwrite
  3393 ;;		_dly
  3394 ;;		_showFreq
  3395 ;; This function is called by:
  3396 ;;		_main
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text22
  3401  000AA8                     __ptext22:
  3402                           	opt stack 0
  3403  000AA8                     _FMinit:
  3404                           	opt stack 26
  3405                           
  3406                           ;main.c: 601: unsigned char ad;
  3407                           ;main.c: 602: unsigned int dat;
  3408                           ;main.c: 605: for (ad = 0; ad < 18; ad++) regImg[ad] = regDflt[ad];
  3409                           
  3410                           ;incstack = 0
  3411  000AA8  0E00               	movlw	0
  3412  000AAA  6E14               	movwf	FMinit@ad,c
  3413  000AAC                     l2120:
  3414  000AAC  0E11               	movlw	17
  3415  000AAE  6414               	cpfsgt	FMinit@ad,c
  3416  000AB0  D001               	goto	l2124
  3417  000AB2  D018               	goto	l231
  3418  000AB4                     l2124:
  3419  000AB4  5014               	movf	FMinit@ad,w,c
  3420  000AB6  0D02               	mullw	2
  3421  000AB8  0E01               	movlw	low _regDflt
  3422  000ABA  24F3               	addwf	prodl,w,c
  3423  000ABC  6EF6               	movwf	tblptrl,c
  3424  000ABE  0E03               	movlw	high _regDflt
  3425  000AC0  20F4               	addwfc	prodh,w,c
  3426  000AC2  6EF7               	movwf	tblptrh,c
  3427  000AC4                     	if	0	;There are less than 3 active tblptr bytes
  3428  000AC4                     	endif
  3429  000AC4  5014               	movf	FMinit@ad,w,c
  3430  000AC6  0D02               	mullw	2
  3431  000AC8  0E31               	movlw	low _regImg
  3432  000ACA  24F3               	addwf	prodl,w,c
  3433  000ACC  6ED9               	movwf	fsr2l,c
  3434  000ACE  0E00               	movlw	high _regImg
  3435  000AD0  20F4               	addwfc	prodh,w,c
  3436  000AD2  6EDA               	movwf	fsr2h,c
  3437  000AD4  0009               	tblrd		*+
  3438  000AD6  CFF5 FFDE          	movff	tablat,postinc2
  3439  000ADA  0008               	tblrd		*
  3440  000ADC  CFF5 FFDD          	movff	tablat,postdec2
  3441  000AE0  2A14               	incf	FMinit@ad,f,c
  3442  000AE2  D7E4               	goto	l2120
  3443  000AE4                     l231:
  3444                           
  3445                           ;main.c: 607: dat = regImg[0];
  3446  000AE4  C031  F012         	movff	_regImg,FMinit@dat
  3447  000AE8  C032  F013         	movff	_regImg+1,FMinit@dat+1
  3448                           
  3449                           ;main.c: 608: regImg[0] &= ~1;
  3450  000AEC  9031               	bcf	_regImg,0,c
  3451                           
  3452                           ;main.c: 609: if (FMwrite(0) != 0) return 1;
  3453  000AEE  0E00               	movlw	0
  3454  000AF0  EC16  F006         	call	_FMwrite
  3455  000AF4  0900               	iorlw	0
  3456  000AF6  B4D8               	btfsc	status,2,c
  3457  000AF8  D002               	goto	l2138
  3458  000AFA  0E01               	movlw	1
  3459  000AFC  0012               	return	
  3460  000AFE                     l2138:
  3461                           
  3462                           ;main.c: 610: for (ad = 1; ad < 18; ad++) {
  3463  000AFE  0E01               	movlw	1
  3464  000B00  6E14               	movwf	FMinit@ad,c
  3465  000B02                     l2140:
  3466  000B02  0E11               	movlw	17
  3467  000B04  6414               	cpfsgt	FMinit@ad,c
  3468  000B06  D001               	goto	l2144
  3469  000B08  D00A               	goto	l2154
  3470  000B0A                     l2144:
  3471                           
  3472                           ;main.c: 611: if (FMwrite(ad) != 0)return 1;
  3473  000B0A  5014               	movf	FMinit@ad,w,c
  3474  000B0C  EC16  F006         	call	_FMwrite
  3475  000B10  0900               	iorlw	0
  3476  000B12  B4D8               	btfsc	status,2,c
  3477  000B14  D002               	goto	l2150
  3478  000B16  0E01               	movlw	1
  3479  000B18  0012               	return	
  3480  000B1A                     l2150:
  3481  000B1A  2A14               	incf	FMinit@ad,f,c
  3482  000B1C  D7F2               	goto	l2140
  3483  000B1E                     l2154:
  3484                           
  3485                           ;main.c: 612: }
  3486                           ;main.c: 614: regImg[0] = dat | 1;
  3487  000B1E  0E01               	movlw	1
  3488  000B20  1012               	iorwf	FMinit@dat,w,c
  3489  000B22  6E31               	movwf	_regImg,c
  3490  000B24  5013               	movf	FMinit@dat+1,w,c
  3491  000B26  6E32               	movwf	_regImg+1,c
  3492                           
  3493                           ;main.c: 615: if (FMwrite(0) != 0) return 1;
  3494  000B28  0E00               	movlw	0
  3495  000B2A  EC16  F006         	call	_FMwrite
  3496  000B2E  0900               	iorlw	0
  3497  000B30  B4D8               	btfsc	status,2,c
  3498  000B32  D002               	goto	l2162
  3499  000B34  0E01               	movlw	1
  3500  000B36  0012               	return	
  3501  000B38                     l2162:
  3502                           
  3503                           ;main.c: 616: dly(20);
  3504  000B38  0E00               	movlw	0
  3505  000B3A  6E02               	movwf	dly@d+1,c
  3506  000B3C  0E14               	movlw	20
  3507  000B3E  6E01               	movwf	dly@d,c
  3508  000B40  EC60  F007         	call	_dly	;wreg free
  3509                           
  3510                           ;main.c: 617: while (FMready(&dat), !dat) dly(2);
  3511  000B44  D006               	goto	l2166
  3512  000B46                     l2164:
  3513  000B46  0E00               	movlw	0
  3514  000B48  6E02               	movwf	dly@d+1,c
  3515  000B4A  0E02               	movlw	2
  3516  000B4C  6E01               	movwf	dly@d,c
  3517  000B4E  EC60  F007         	call	_dly	;wreg free
  3518  000B52                     l2166:
  3519  000B52  0E12               	movlw	low FMinit@dat
  3520  000B54  6E0C               	movwf	FMready@rdy,c
  3521  000B56  0E00               	movlw	high FMinit@dat
  3522  000B58  6E0D               	movwf	FMready@rdy+1,c
  3523  000B5A  EC1C  F007         	call	_FMready	;wreg free
  3524  000B5E  5012               	movf	FMinit@dat,w,c
  3525  000B60  1013               	iorwf	FMinit@dat+1,w,c
  3526  000B62  B4D8               	btfsc	status,2,c
  3527  000B64  D7F0               	goto	l2164
  3528                           
  3529                           ;main.c: 618: showFreq();
  3530  000B66  EC24  F008         	call	_showFreq	;wreg free
  3531                           
  3532                           ;main.c: 619: return 0;
  3533  000B6A  0E00               	movlw	0
  3534  000B6C  0012               	return	
  3535  000B6E                     __end_of_FMinit:
  3536                           	opt stack 0
  3537                           tblptru	equ	0xFF8
  3538                           tblptrh	equ	0xFF7
  3539                           tblptrl	equ	0xFF6
  3540                           tablat	equ	0xFF5
  3541                           prodh	equ	0xFF4
  3542                           prodl	equ	0xFF3
  3543                           intcon	equ	0xFF2
  3544                           postinc0	equ	0xFEE
  3545                           wreg	equ	0xFE8
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _showFreq *****************
  3553 ;; Defined at:
  3554 ;;		line 833 in file "main.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      unsigned char 
  3561 ;; Registers used:
  3562 ;;		None
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3568 ;;      Params:         0       0       0       0
  3569 ;;      Locals:         0       0       0       0
  3570 ;;      Temps:          0       0       0       0
  3571 ;;      Totals:         0       0       0       0
  3572 ;;Total ram usage:        0 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; This function calls:
  3575 ;;		Nothing
  3576 ;; This function is called by:
  3577 ;;		_FMinit
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text23
  3582  001048                     __ptext23:
  3583                           	opt stack 0
  3584  001048                     _showFreq:
  3585                           	opt stack 29
  3586                           
  3587                           ;main.c: 835: ;
  3588                           ;main.c: 836: return 0;
  3589                           ;	Return value of _showFreq is never used
  3590                           
  3591                           ;incstack = 0
  3592  001048  0012               	return		;funcret
  3593  00104A                     __end_of_showFreq:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           prodh	equ	0xFF4
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           postinc0	equ	0xFEE
  3603                           wreg	equ	0xFE8
  3604                           postinc2	equ	0xFDE
  3605                           postdec2	equ	0xFDD
  3606                           fsr2h	equ	0xFDA
  3607                           fsr2l	equ	0xFD9
  3608                           status	equ	0xFD8
  3609                           
  3610 ;; *************** function _dly *****************
  3611 ;; Defined at:
  3612 ;;		line 176 in file "main.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;  d               2    0[COMRAM] int 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  i               2    2[COMRAM] int 
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		wreg, status,2, status,0
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3626 ;;      Params:         2       0       0       0
  3627 ;;      Locals:         2       0       0       0
  3628 ;;      Temps:          0       0       0       0
  3629 ;;      Totals:         4       0       0       0
  3630 ;;Total ram usage:        4 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; This function calls:
  3633 ;;		Nothing
  3634 ;; This function is called by:
  3635 ;;		_FMinit
  3636 ;;		_FMfrequenc
  3637 ;;		_main
  3638 ;;		_setVolume
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           	psect	text24
  3643  000EC0                     __ptext24:
  3644                           	opt stack 0
  3645  000EC0                     _dly:
  3646                           	opt stack 28
  3647                           
  3648                           ;main.c: 178: int i = 0;
  3649                           
  3650                           ;incstack = 0
  3651  000EC0  0E00               	movlw	0
  3652  000EC2  6E04               	movwf	dly@i+1,c
  3653  000EC4  0E00               	movlw	0
  3654  000EC6  6E03               	movwf	dly@i,c
  3655                           
  3656                           ;main.c: 180: for (; d; --d)
  3657  000EC8  D00F               	goto	l1830
  3658  000ECA                     l1822:
  3659                           
  3660                           ;main.c: 181: for (i = 100; i; --i);
  3661  000ECA  0E00               	movlw	0
  3662  000ECC  6E04               	movwf	dly@i+1,c
  3663  000ECE  0E64               	movlw	100
  3664  000ED0  6E03               	movwf	dly@i,c
  3665  000ED2  D003               	goto	l1826
  3666  000ED4                     l1824:
  3667  000ED4  0603               	decf	dly@i,f,c
  3668  000ED6  A0D8               	btfss	status,0,c
  3669  000ED8  0604               	decf	dly@i+1,f,c
  3670  000EDA                     l1826:
  3671  000EDA  5003               	movf	dly@i,w,c
  3672  000EDC  1004               	iorwf	dly@i+1,w,c
  3673  000EDE  A4D8               	btfss	status,2,c
  3674  000EE0  D7F9               	goto	l1824
  3675  000EE2  0601               	decf	dly@d,f,c
  3676  000EE4  A0D8               	btfss	status,0,c
  3677  000EE6  0602               	decf	dly@d+1,f,c
  3678  000EE8                     l1830:
  3679  000EE8  5001               	movf	dly@d,w,c
  3680  000EEA  1002               	iorwf	dly@d+1,w,c
  3681  000EEC  B4D8               	btfsc	status,2,c
  3682  000EEE  0012               	return	
  3683  000EF0  D7EC               	goto	l1822
  3684  000EF2                     __end_of_dly:
  3685                           	opt stack 0
  3686                           tblptru	equ	0xFF8
  3687                           tblptrh	equ	0xFF7
  3688                           tblptrl	equ	0xFF6
  3689                           tablat	equ	0xFF5
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           intcon	equ	0xFF2
  3693                           postinc0	equ	0xFEE
  3694                           wreg	equ	0xFE8
  3695                           postinc2	equ	0xFDE
  3696                           postdec2	equ	0xFDD
  3697                           fsr2h	equ	0xFDA
  3698                           fsr2l	equ	0xFD9
  3699                           status	equ	0xFD8
  3700                           
  3701 ;; *************** function _FMwrite *****************
  3702 ;; Defined at:
  3703 ;;		line 275 in file "main.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  adr             1    wreg     unsigned char 
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;  adr             1    6[COMRAM] unsigned char 
  3708 ;;  regstr          2    0        unsigned int 
  3709 ;;  secndByt        1    5[COMRAM] unsigned char 
  3710 ;;  firstByt        1    4[COMRAM] unsigned char 
  3711 ;;  rpy             1    0        unsigned char 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      unsigned char 
  3714 ;; Registers used:
  3715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3721 ;;      Params:         0       0       0       0
  3722 ;;      Locals:         3       0       0       0
  3723 ;;      Temps:          2       0       0       0
  3724 ;;      Totals:         5       0       0       0
  3725 ;;Total ram usage:        5 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    2
  3728 ;; This function calls:
  3729 ;;		_IdleI2C
  3730 ;;		_WriteI2C
  3731 ;; This function is called by:
  3732 ;;		_setBitInRegister
  3733 ;;		_seek
  3734 ;;		_readLOInjection
  3735 ;;		_tuneWithAutoHiLo
  3736 ;;		_FMinit
  3737 ;;		_FMfrequenc
  3738 ;;		_setVolume
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           	psect	text25
  3743  000C2C                     __ptext25:
  3744                           	opt stack 0
  3745  000C2C                     _FMwrite:
  3746                           	opt stack 26
  3747                           
  3748                           ;incstack = 0
  3749                           ;FMwrite@adr stored from wreg
  3750  000C2C  6E07               	movwf	FMwrite@adr,c
  3751                           
  3752                           ;main.c: 277: unsigned int regstr;
  3753                           ;main.c: 278: unsigned char firstByt;
  3754                           ;main.c: 279: unsigned char secndByt;
  3755                           ;main.c: 280: unsigned char rpy;
  3756                           ;main.c: 282: firstByt = regImg[adr] >> 8;
  3757  000C2E  5007               	movf	FMwrite@adr,w,c
  3758  000C30  0D02               	mullw	2
  3759  000C32  0E31               	movlw	low _regImg
  3760  000C34  24F3               	addwf	prodl,w,c
  3761  000C36  6ED9               	movwf	fsr2l,c
  3762  000C38  0E00               	movlw	high _regImg
  3763  000C3A  20F4               	addwfc	prodh,w,c
  3764  000C3C  6EDA               	movwf	fsr2h,c
  3765  000C3E  CFDE F003          	movff	postinc2,??_FMwrite
  3766  000C42  CFDD F004          	movff	postdec2,??_FMwrite+1
  3767  000C46  C004  F003         	movff	??_FMwrite+1,??_FMwrite
  3768  000C4A  6A04               	clrf	??_FMwrite+1,c
  3769  000C4C  5003               	movf	??_FMwrite,w,c
  3770  000C4E  6E05               	movwf	FMwrite@firstByt,c
  3771                           
  3772                           ;main.c: 283: secndByt = regImg[adr];
  3773  000C50  5007               	movf	FMwrite@adr,w,c
  3774  000C52  0D02               	mullw	2
  3775  000C54  0E31               	movlw	low _regImg
  3776  000C56  24F3               	addwf	prodl,w,c
  3777  000C58  6ED9               	movwf	fsr2l,c
  3778  000C5A  0E00               	movlw	high _regImg
  3779  000C5C  20F4               	addwfc	prodh,w,c
  3780  000C5E  6EDA               	movwf	fsr2h,c
  3781  000C60  50DF               	movf	indf2,w,c
  3782  000C62  6E06               	movwf	FMwrite@secndByt,c
  3783                           
  3784                           ;main.c: 285: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3785  000C64  80C5               	bsf	4037,0,c	;volatile
  3786  000C66                     l152:
  3787  000C66  B0C5               	btfsc	4037,0,c	;volatile
  3788  000C68  D7FE               	goto	l152
  3789                           
  3790                           ;main.c: 286: IdleI2C();
  3791  000C6A  EC11  F008         	call	_IdleI2C	;wreg free
  3792                           
  3793                           ;main.c: 289: if (WriteI2C(0x20)) return 1;
  3794  000C6E  0E20               	movlw	32
  3795  000C70  ECC0  F006         	call	_WriteI2C
  3796  000C74  0900               	iorlw	0
  3797  000C76  B4D8               	btfsc	status,2,c
  3798  000C78  D002               	goto	l1070
  3799  000C7A  0E01               	movlw	1
  3800  000C7C  0012               	return	
  3801  000C7E                     l1070:
  3802                           
  3803                           ;main.c: 290: IdleI2C();
  3804  000C7E  EC11  F008         	call	_IdleI2C	;wreg free
  3805                           
  3806                           ;main.c: 291: WriteI2C(adr);
  3807  000C82  5007               	movf	FMwrite@adr,w,c
  3808  000C84  ECC0  F006         	call	_WriteI2C
  3809                           
  3810                           ;main.c: 292: IdleI2C();
  3811  000C88  EC11  F008         	call	_IdleI2C	;wreg free
  3812                           
  3813                           ;main.c: 293: WriteI2C(firstByt);
  3814  000C8C  5005               	movf	FMwrite@firstByt,w,c
  3815  000C8E  ECC0  F006         	call	_WriteI2C
  3816                           
  3817                           ;main.c: 294: IdleI2C();
  3818  000C92  EC11  F008         	call	_IdleI2C	;wreg free
  3819                           
  3820                           ;main.c: 295: WriteI2C(secndByt);
  3821  000C96  5006               	movf	FMwrite@secndByt,w,c
  3822  000C98  ECC0  F006         	call	_WriteI2C
  3823                           
  3824                           ;main.c: 296: IdleI2C();
  3825  000C9C  EC11  F008         	call	_IdleI2C	;wreg free
  3826                           
  3827                           ;main.c: 297: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3828  000CA0  84C5               	bsf	4037,2,c	;volatile
  3829  000CA2                     l157:
  3830  000CA2  B4C5               	btfsc	4037,2,c	;volatile
  3831  000CA4  D7FE               	goto	l157
  3832                           
  3833                           ;main.c: 298: IdleI2C();
  3834  000CA6  EC11  F008         	call	_IdleI2C	;wreg free
  3835                           
  3836                           ;main.c: 299: return 0;
  3837  000CAA  0E00               	movlw	0
  3838  000CAC  0012               	return	
  3839  000CAE                     __end_of_FMwrite:
  3840                           	opt stack 0
  3841                           tblptru	equ	0xFF8
  3842                           tblptrh	equ	0xFF7
  3843                           tblptrl	equ	0xFF6
  3844                           tablat	equ	0xFF5
  3845                           prodh	equ	0xFF4
  3846                           prodl	equ	0xFF3
  3847                           intcon	equ	0xFF2
  3848                           postinc0	equ	0xFEE
  3849                           wreg	equ	0xFE8
  3850                           indf2	equ	0xFDF
  3851                           postinc2	equ	0xFDE
  3852                           postdec2	equ	0xFDD
  3853                           fsr2h	equ	0xFDA
  3854                           fsr2l	equ	0xFD9
  3855                           status	equ	0xFD8
  3856                           
  3857 ;; *************** function _FMready *****************
  3858 ;; Defined at:
  3859 ;;		line 579 in file "main.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  rdy             2   11[COMRAM] PTR unsigned int 
  3862 ;;		 -> FMfrequenc@dat(2), setVolume@dat(2), FMinit@dat(2), 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  sts             2   15[COMRAM] unsigned int 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      unsigned char 
  3867 ;; Registers used:
  3868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3874 ;;      Params:         2       0       0       0
  3875 ;;      Locals:         2       0       0       0
  3876 ;;      Temps:          2       0       0       0
  3877 ;;      Totals:         6       0       0       0
  3878 ;;Total ram usage:        6 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    3
  3881 ;; This function calls:
  3882 ;;		_FMread
  3883 ;; This function is called by:
  3884 ;;		_FMinit
  3885 ;;		_FMfrequenc
  3886 ;;		_setVolume
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           	psect	text26
  3891  000E38                     __ptext26:
  3892                           	opt stack 0
  3893  000E38                     _FMready:
  3894                           	opt stack 25
  3895                           
  3896                           ;main.c: 581: unsigned int sts;
  3897                           ;main.c: 583: if (FMread(0x13, &sts) != 0) return 1;
  3898                           
  3899                           ;incstack = 0
  3900  000E38  0E10               	movlw	low FMready@sts
  3901  000E3A  6E03               	movwf	FMread@data,c
  3902  000E3C  0E00               	movlw	high FMready@sts
  3903  000E3E  6E04               	movwf	FMread@data+1,c
  3904  000E40  0E13               	movlw	19
  3905  000E42  EC8B  F004         	call	_FMread
  3906  000E46  0900               	iorlw	0
  3907  000E48  B4D8               	btfsc	status,2,c
  3908  000E4A  D002               	goto	l1878
  3909  000E4C  0E01               	movlw	1
  3910  000E4E  0012               	return	
  3911  000E50                     l1878:
  3912                           
  3913                           ;main.c: 584: sts &= 0x0020;
  3914  000E50  0E20               	movlw	32
  3915  000E52  1610               	andwf	FMready@sts,f,c
  3916  000E54  0E00               	movlw	0
  3917  000E56  1611               	andwf	FMready@sts+1,f,c
  3918                           
  3919                           ;main.c: 585: *rdy = sts ? 1 : 0;
  3920  000E58  5010               	movf	FMready@sts,w,c
  3921  000E5A  1011               	iorwf	FMready@sts+1,w,c
  3922  000E5C  B4D8               	btfsc	status,2,c
  3923  000E5E  D002               	goto	u1230
  3924  000E60  0E01               	movlw	1
  3925  000E62  D001               	goto	u1240
  3926  000E64                     u1230:
  3927  000E64  0E00               	movlw	0
  3928  000E66                     u1240:
  3929  000E66  6E0E               	movwf	??_FMready& (0+255),c
  3930  000E68  6A0F               	clrf	(??_FMready+1)& (0+255),c
  3931  000E6A  C00C  FFD9         	movff	FMready@rdy,fsr2l
  3932  000E6E  C00D  FFDA         	movff	FMready@rdy+1,fsr2h
  3933  000E72  C00E  FFDE         	movff	??_FMready,postinc2
  3934  000E76  C00F  FFDD         	movff	??_FMready+1,postdec2
  3935                           
  3936                           ;main.c: 586: return 0;
  3937  000E7A  0E00               	movlw	0
  3938  000E7C  0012               	return	
  3939  000E7E                     __end_of_FMready:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           postinc0	equ	0xFEE
  3949                           wreg	equ	0xFE8
  3950                           indf2	equ	0xFDF
  3951                           postinc2	equ	0xFDE
  3952                           postdec2	equ	0xFDD
  3953                           fsr2h	equ	0xFDA
  3954                           fsr2l	equ	0xFD9
  3955                           status	equ	0xFD8
  3956                           
  3957 ;; *************** function _FMread *****************
  3958 ;; Defined at:
  3959 ;;		line 317 in file "main.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  regAddr         1    wreg     unsigned char 
  3962 ;;  data            2    2[COMRAM] PTR unsigned int 
  3963 ;;		 -> main@ui(2), FMready@sts(2), frequency@data(2), tuneWithAutoHiLo@status(2), 
  3964 ;;		 -> readLOInjection@status(2), seek@status(2), 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  regAddr         1    8[COMRAM] unsigned char 
  3967 ;;  secndByt        1   10[COMRAM] unsigned char 
  3968 ;;  firstByt        1    9[COMRAM] unsigned char 
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  1    wreg      unsigned char 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3978 ;;      Params:         2       0       0       0
  3979 ;;      Locals:         3       0       0       0
  3980 ;;      Temps:          4       0       0       0
  3981 ;;      Totals:         9       0       0       0
  3982 ;;Total ram usage:        9 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    2
  3985 ;; This function calls:
  3986 ;;		_IdleI2C
  3987 ;;		_ReadI2C
  3988 ;;		_WriteI2C
  3989 ;; This function is called by:
  3990 ;;		_seek
  3991 ;;		_readLOInjection
  3992 ;;		_tuneWithAutoHiLo
  3993 ;;		_frequency
  3994 ;;		_FMready
  3995 ;;		_FMvers
  3996 ;;		_FMid
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text27
  4001  000916                     __ptext27:
  4002                           	opt stack 0
  4003  000916                     _FMread:
  4004                           	opt stack 25
  4005                           
  4006                           ;incstack = 0
  4007                           ;FMread@regAddr stored from wreg
  4008  000916  6E09               	movwf	FMread@regAddr,c
  4009                           
  4010                           ;main.c: 319: unsigned char firstByt;
  4011                           ;main.c: 320: unsigned char secndByt;
  4012                           ;main.c: 322: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  4013  000918  80C5               	bsf	4037,0,c	;volatile
  4014  00091A                     l162:
  4015  00091A  B0C5               	btfsc	4037,0,c	;volatile
  4016  00091C  D7FE               	goto	l162
  4017                           
  4018                           ;main.c: 323: IdleI2C();
  4019  00091E  EC11  F008         	call	_IdleI2C	;wreg free
  4020                           
  4021                           ;main.c: 326: if (WriteI2C(0x20)) return 1;
  4022  000922  0E20               	movlw	32
  4023  000924  ECC0  F006         	call	_WriteI2C
  4024  000928  0900               	iorlw	0
  4025  00092A  B4D8               	btfsc	status,2,c
  4026  00092C  D002               	goto	l1738
  4027  00092E  0E01               	movlw	1
  4028  000930  0012               	return	
  4029  000932                     l1738:
  4030                           
  4031                           ;main.c: 327: IdleI2C();
  4032  000932  EC11  F008         	call	_IdleI2C	;wreg free
  4033                           
  4034                           ;main.c: 328: WriteI2C(regAddr);
  4035  000936  5009               	movf	FMread@regAddr,w,c
  4036  000938  ECC0  F006         	call	_WriteI2C
  4037                           
  4038                           ;main.c: 329: IdleI2C();
  4039  00093C  EC11  F008         	call	_IdleI2C	;wreg free
  4040                           
  4041                           ;main.c: 330: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  4042  000940  82C5               	bsf	4037,1,c	;volatile
  4043  000942                     l167:
  4044  000942  B2C5               	btfsc	4037,1,c	;volatile
  4045  000944  D7FE               	goto	l167
  4046                           
  4047                           ;main.c: 331: IdleI2C();
  4048  000946  EC11  F008         	call	_IdleI2C	;wreg free
  4049                           
  4050                           ;main.c: 332: WriteI2C(0x20 + 0x01);
  4051  00094A  0E21               	movlw	33
  4052  00094C  ECC0  F006         	call	_WriteI2C
  4053                           
  4054                           ;main.c: 333: IdleI2C();
  4055  000950  EC11  F008         	call	_IdleI2C	;wreg free
  4056                           
  4057                           ;main.c: 334: firstByt = ReadI2C();
  4058  000954  ECE6  F007         	call	_ReadI2C	;wreg free
  4059  000958  6E0A               	movwf	FMread@firstByt,c
  4060                           
  4061                           ;main.c: 335: IdleI2C();
  4062  00095A  EC11  F008         	call	_IdleI2C	;wreg free
  4063                           
  4064                           ;main.c: 336: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  4065  00095E  9AC5               	bcf	4037,5,c	;volatile
  4066  000960  88C5               	bsf	4037,4,c	;volatile
  4067  000962                     l170:
  4068  000962  B8C5               	btfsc	4037,4,c	;volatile
  4069  000964  D7FE               	goto	l170
  4070                           
  4071                           ;main.c: 337: IdleI2C();
  4072  000966  EC11  F008         	call	_IdleI2C	;wreg free
  4073                           
  4074                           ;main.c: 338: secndByt = ReadI2C();
  4075  00096A  ECE6  F007         	call	_ReadI2C	;wreg free
  4076  00096E  6E0B               	movwf	FMread@secndByt,c
  4077                           
  4078                           ;main.c: 339: IdleI2C();
  4079  000970  EC11  F008         	call	_IdleI2C	;wreg free
  4080                           
  4081                           ;main.c: 340: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  4082  000974  8AC5               	bsf	4037,5,c	;volatile
  4083  000976  88C5               	bsf	4037,4,c	;volatile
  4084  000978                     l173:
  4085  000978  B8C5               	btfsc	4037,4,c	;volatile
  4086  00097A  D7FE               	goto	l173
  4087                           
  4088                           ;main.c: 341: IdleI2C();
  4089  00097C  EC11  F008         	call	_IdleI2C	;wreg free
  4090                           
  4091                           ;main.c: 342: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  4092  000980  84C5               	bsf	4037,2,c	;volatile
  4093  000982                     l176:
  4094  000982  B4C5               	btfsc	4037,2,c	;volatile
  4095  000984  D7FE               	goto	l176
  4096                           
  4097                           ;main.c: 343: IdleI2C();
  4098  000986  EC11  F008         	call	_IdleI2C	;wreg free
  4099                           
  4100                           ;main.c: 344: *data = firstByt;
  4101  00098A  500A               	movf	FMread@firstByt,w,c
  4102  00098C  6E05               	movwf	??_FMread& (0+255),c
  4103  00098E  6A06               	clrf	(??_FMread+1)& (0+255),c
  4104  000990  C003  FFD9         	movff	FMread@data,fsr2l
  4105  000994  C004  FFDA         	movff	FMread@data+1,fsr2h
  4106  000998  C005  FFDE         	movff	??_FMread,postinc2
  4107  00099C  C006  FFDD         	movff	??_FMread+1,postdec2
  4108                           
  4109                           ;main.c: 345: *data <<= 8;
  4110  0009A0  C003  FFD9         	movff	FMread@data,fsr2l
  4111  0009A4  C004  FFDA         	movff	FMread@data+1,fsr2h
  4112  0009A8  50DE               	movf	postinc2,w,c
  4113  0009AA  6EDD               	movwf	postdec2,c
  4114  0009AC  6ADF               	clrf	indf2,c
  4115                           
  4116                           ;main.c: 346: *data = *data | secndByt;
  4117  0009AE  C003  FFD9         	movff	FMread@data,fsr2l
  4118  0009B2  C004  FFDA         	movff	FMread@data+1,fsr2h
  4119  0009B6  CFDE F005          	movff	postinc2,??_FMread
  4120  0009BA  CFDD F006          	movff	postdec2,??_FMread+1
  4121  0009BE  500B               	movf	FMread@secndByt,w,c
  4122  0009C0  6E07               	movwf	(??_FMread+2)& (0+255),c
  4123  0009C2  6A08               	clrf	(??_FMread+3)& (0+255),c
  4124  0009C4  5005               	movf	??_FMread,w,c
  4125  0009C6  1207               	iorwf	??_FMread+2,f,c
  4126  0009C8  5006               	movf	??_FMread+1,w,c
  4127  0009CA  1208               	iorwf	??_FMread+3,f,c
  4128  0009CC  C003  FFD9         	movff	FMread@data,fsr2l
  4129  0009D0  C004  FFDA         	movff	FMread@data+1,fsr2h
  4130  0009D4  C007  FFDE         	movff	??_FMread+2,postinc2
  4131  0009D8  C008  FFDD         	movff	??_FMread+3,postdec2
  4132                           
  4133                           ;main.c: 348: return 0;
  4134  0009DC  0E00               	movlw	0
  4135  0009DE  0012               	return	
  4136  0009E0                     __end_of_FMread:
  4137                           	opt stack 0
  4138                           tblptru	equ	0xFF8
  4139                           tblptrh	equ	0xFF7
  4140                           tblptrl	equ	0xFF6
  4141                           tablat	equ	0xFF5
  4142                           prodh	equ	0xFF4
  4143                           prodl	equ	0xFF3
  4144                           intcon	equ	0xFF2
  4145                           postinc0	equ	0xFEE
  4146                           wreg	equ	0xFE8
  4147                           indf2	equ	0xFDF
  4148                           postinc2	equ	0xFDE
  4149                           postdec2	equ	0xFDD
  4150                           fsr2h	equ	0xFDA
  4151                           fsr2l	equ	0xFD9
  4152                           status	equ	0xFD8
  4153                           
  4154 ;; *************** function _WriteI2C *****************
  4155 ;; Defined at:
  4156 ;;		line 12 in file "/Applications/microchip/xc8/v1.38/sources/pic18/plib/i2c/i2c_writ.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;  data_out        1    wreg     unsigned char 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  data_out        1    1[COMRAM] unsigned char 
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      char 
  4163 ;; Registers used:
  4164 ;;		wreg, status,2, status,0, cstack
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4170 ;;      Params:         0       0       0       0
  4171 ;;      Locals:         1       0       0       0
  4172 ;;      Temps:          0       0       0       0
  4173 ;;      Totals:         1       0       0       0
  4174 ;;Total ram usage:        1 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; Hardware stack levels required when called:    1
  4177 ;; This function calls:
  4178 ;;		_IdleI2C
  4179 ;; This function is called by:
  4180 ;;		_FMwrite
  4181 ;;		_FMread
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text28
  4186  000D80                     __ptext28:
  4187                           	opt stack 0
  4188  000D80                     _WriteI2C:
  4189                           	opt stack 26
  4190                           
  4191                           ;incstack = 0
  4192                           ;WriteI2C@data_out stored from wreg
  4193  000D80  6E02               	movwf	WriteI2C@data_out,c
  4194  000D82  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  4195  000D86  AEC6               	btfss	4038,7,c	;volatile
  4196  000D88  D002               	goto	l1024
  4197  000D8A  0EFF               	movlw	255
  4198  000D8C  0012               	return	
  4199  000D8E                     l1024:
  4200  000D8E  50C6               	movf	4038,w,c	;volatile
  4201  000D90  0B0F               	andlw	15
  4202  000D92  0A08               	xorlw	8
  4203  000D94  B4D8               	btfsc	status,2,c
  4204  000D96  D00F               	goto	l1042
  4205  000D98  50C6               	movf	4038,w,c	;volatile
  4206  000D9A  0B0F               	andlw	15
  4207  000D9C  0A0B               	xorlw	11
  4208  000D9E  B4D8               	btfsc	status,2,c
  4209  000DA0  D00A               	goto	l1042
  4210  000DA2  88C6               	bsf	4038,4,c	;volatile
  4211  000DA4                     l381:
  4212  000DA4  A69E               	btfss	3998,3,c	;volatile
  4213  000DA6  D7FE               	goto	l381
  4214  000DA8  A4C7               	btfss	4039,2,c	;volatile
  4215  000DAA  B0C7               	btfsc	4039,0,c	;volatile
  4216  000DAC  D002               	goto	l1038
  4217  000DAE  0EFE               	movlw	254
  4218  000DB0  0012               	return	
  4219  000DB2                     l1038:
  4220  000DB2  0E00               	movlw	0
  4221  000DB4  0012               	return	
  4222  000DB6                     l1042:
  4223  000DB6  50C6               	movf	4038,w,c	;volatile
  4224  000DB8  0B0F               	andlw	15
  4225  000DBA  0A08               	xorlw	8
  4226  000DBC  B4D8               	btfsc	status,2,c
  4227  000DBE  D005               	goto	l390
  4228  000DC0  50C6               	movf	4038,w,c	;volatile
  4229  000DC2  0B0F               	andlw	15
  4230  000DC4  0A0B               	xorlw	11
  4231  000DC6  A4D8               	btfss	status,2,c
  4232  000DC8  0012               	return	
  4233  000DCA                     l390:
  4234  000DCA  B0C7               	btfsc	4039,0,c	;volatile
  4235  000DCC  D7FE               	goto	l390
  4236  000DCE  EC11  F008         	call	_IdleI2C	;wreg free
  4237  000DD2  ACC5               	btfss	4037,6,c	;volatile
  4238  000DD4  D002               	goto	l1056
  4239  000DD6  0EFE               	movlw	254
  4240  000DD8  0012               	return	
  4241  000DDA                     l1056:
  4242  000DDA  0E00               	movlw	0
  4243  000DDC  0012               	return	
  4244  000DDE                     __end_of_WriteI2C:
  4245                           	opt stack 0
  4246                           tblptru	equ	0xFF8
  4247                           tblptrh	equ	0xFF7
  4248                           tblptrl	equ	0xFF6
  4249                           tablat	equ	0xFF5
  4250                           prodh	equ	0xFF4
  4251                           prodl	equ	0xFF3
  4252                           intcon	equ	0xFF2
  4253                           postinc0	equ	0xFEE
  4254                           wreg	equ	0xFE8
  4255                           indf2	equ	0xFDF
  4256                           postinc2	equ	0xFDE
  4257                           postdec2	equ	0xFDD
  4258                           fsr2h	equ	0xFDA
  4259                           fsr2l	equ	0xFD9
  4260                           status	equ	0xFD8
  4261                           
  4262 ;; *************** function _IdleI2C *****************
  4263 ;; Defined at:
  4264 ;;		line 24 in file "/Applications/microchip/xc8/v1.38/sources/pic18/plib/i2c/i2c_idle.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;		None
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;		None
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      void 
  4271 ;; Registers used:
  4272 ;;		wreg, status,2, status,0
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4278 ;;      Params:         0       0       0       0
  4279 ;;      Locals:         0       0       0       0
  4280 ;;      Temps:          1       0       0       0
  4281 ;;      Totals:         1       0       0       0
  4282 ;;Total ram usage:        1 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		_FMwrite
  4288 ;;		_FMread
  4289 ;;		_WriteI2C
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text29
  4294  001022                     __ptext29:
  4295                           	opt stack 0
  4296  001022                     _IdleI2C:
  4297                           	opt stack 26
  4298  001022                     l1010:
  4299  001022  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  4300  001026  0E1F               	movlw	31
  4301  001028  1601               	andwf	??_IdleI2C,f,c
  4302  00102A  A4D8               	btfss	status,2,c
  4303  00102C  D7FA               	goto	l1010
  4304  00102E  A4C7               	btfss	4039,2,c	;volatile
  4305  001030  0012               	return	
  4306  001032  D7F7               	goto	l1010
  4307  001034                     __end_of_IdleI2C:
  4308                           	opt stack 0
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           prodh	equ	0xFF4
  4314                           prodl	equ	0xFF3
  4315                           intcon	equ	0xFF2
  4316                           postinc0	equ	0xFEE
  4317                           wreg	equ	0xFE8
  4318                           indf2	equ	0xFDF
  4319                           postinc2	equ	0xFDE
  4320                           postdec2	equ	0xFDD
  4321                           fsr2h	equ	0xFDA
  4322                           fsr2l	equ	0xFD9
  4323                           status	equ	0xFD8
  4324                           
  4325 ;; *************** function _ReadI2C *****************
  4326 ;; Defined at:
  4327 ;;		line 11 in file "/Applications/microchip/xc8/v1.38/sources/pic18/plib/i2c/i2c_read.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;		None
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;		None
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      unsigned char 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2, status,0
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4341 ;;      Params:         0       0       0       0
  4342 ;;      Locals:         0       0       0       0
  4343 ;;      Temps:          0       0       0       0
  4344 ;;      Totals:         0       0       0       0
  4345 ;;Total ram usage:        0 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; This function calls:
  4348 ;;		Nothing
  4349 ;; This function is called by:
  4350 ;;		_FMread
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text30
  4355  000FCC                     __ptext30:
  4356                           	opt stack 0
  4357  000FCC                     _ReadI2C:
  4358                           	opt stack 26
  4359                           
  4360                           ;incstack = 0
  4361  000FCC  50C6               	movf	4038,w,c	;volatile
  4362  000FCE  0B0F               	andlw	15
  4363  000FD0  0A08               	xorlw	8
  4364  000FD2  B4D8               	btfsc	status,2,c
  4365  000FD4  D004               	goto	l356
  4366  000FD6  50C6               	movf	4038,w,c	;volatile
  4367  000FD8  0B0F               	andlw	15
  4368  000FDA  0A0B               	xorlw	11
  4369  000FDC  B4D8               	btfsc	status,2,c
  4370  000FDE                     l356:
  4371  000FDE  86C5               	bsf	4037,3,c	;volatile
  4372  000FE0                     l357:
  4373  000FE0  A0C7               	btfss	4039,0,c	;volatile
  4374  000FE2  D7FE               	goto	l357
  4375  000FE4  50C9               	movf	4041,w,c	;volatile
  4376  000FE6  0012               	return	
  4377  000FE8                     __end_of_ReadI2C:
  4378                           	opt stack 0
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           prodh	equ	0xFF4
  4384                           prodl	equ	0xFF3
  4385                           intcon	equ	0xFF2
  4386                           postinc0	equ	0xFEE
  4387                           wreg	equ	0xFE8
  4388                           indf2	equ	0xFDF
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           fsr2h	equ	0xFDA
  4392                           fsr2l	equ	0xFD9
  4393                           status	equ	0xFD8
  4394                           tblptru	equ	0xFF8
  4395                           tblptrh	equ	0xFF7
  4396                           tblptrl	equ	0xFF6
  4397                           tablat	equ	0xFF5
  4398                           prodh	equ	0xFF4
  4399                           prodl	equ	0xFF3
  4400                           intcon	equ	0xFF2
  4401                           postinc0	equ	0xFEE
  4402                           wreg	equ	0xFE8
  4403                           indf2	equ	0xFDF
  4404                           postinc2	equ	0xFDE
  4405                           postdec2	equ	0xFDD
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410                           	psect	rparam
  4411  0000                     tblptru	equ	0xFF8
  4412                           tblptrh	equ	0xFF7
  4413                           tblptrl	equ	0xFF6
  4414                           tablat	equ	0xFF5
  4415                           prodh	equ	0xFF4
  4416                           prodl	equ	0xFF3
  4417                           intcon	equ	0xFF2
  4418                           postinc0	equ	0xFEE
  4419                           wreg	equ	0xFE8
  4420                           indf2	equ	0xFDF
  4421                           postinc2	equ	0xFDE
  4422                           postdec2	equ	0xFDD
  4423                           fsr2h	equ	0xFDA
  4424                           fsr2l	equ	0xFD9
  4425                           status	equ	0xFD8
>>>>>>> origin/master


Data Sizes:
    Strings     0
    Constant    87
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     48      84
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    FMvers@vsn	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), 

    FMready@rdy	PTR unsigned int  size(2) Largest target is 2
		 -> FMfrequenc@dat(COMRAM[2]), setVolume@dat(COMRAM[2]), FMinit@dat(COMRAM[2]), 

    FMread@data	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), FMready@sts(COMRAM[2]), frequency@data(COMRAM[2]), tuneWithAutoHiLo@status(COMRAM[2]), 
		 -> readLOInjection@status(COMRAM[2]), seek@status(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_VolumeDown
    _main->_VolumeUp
    _previousChannel->_FMfrequenc
    _nextChannel->_FMfrequenc
    _FMfrequenc->_FMready
<<<<<<< HEAD
    _VolumeUp->_setVolume
    _VolumeDown->_setVolume
    _setVolume->_FMready
=======
    _VolumeUp->_seek
    _VolumeDown->_seek
    _seek->_tuneWithAutoHiLo
    _tuneWithAutoHiLo->_readLOInjection
    _setHardmute->_setBitInRegister
    _readLOInjection->_setBitInRegister
    _frequency->_FMread
    _setSeekDirection->_setBitInRegister
    _setBitInRegister->_FMwrite
    _SeekUP->_delay_10ms
    _SeekDOWN->_delay_10ms
>>>>>>> origin/master
    _Init->_OpenI2C
    _FMvers->_FMread
    _FMinit->_FMready
    _FMwrite->_WriteI2C
    _FMready->_FMread
    _FMread->_WriteI2C
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (0) _main                                                 6     6      0    9065
                                             45 COMRAM     6     6      0
=======
 (0) _main                                                 6     6      0   49927
                                             42 COMRAM     6     6      0
                         _FMfrequenc
>>>>>>> origin/master
                             _FMinit
                             _FMvers
                               _Init
                           _MuteHard
                           _SeekDOWN
                             _SeekUP
                         _VolumeDown
                           _VolumeUp
                          _butnEvent
                                _dly
                              _errfm
                        _nextChannel
                    _previousChannel
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _previousChannel                                      0     0      0    1584
                         _FMfrequenc
                         _delay_10ms
 ---------------------------------------------------------------------------------
 (1) _nextChannel                                          0     0      0    1584
                         _FMfrequenc
                         _delay_10ms
 ---------------------------------------------------------------------------------
 (2) _FMfrequenc                                          10     8      2    1306
=======
 (1) _previousChannel                                      0     0      0    2160
                         _FMfrequenc
                         _delay_10ms
 ---------------------------------------------------------------------------------
 (1) _nextChannel                                          0     0      0    2160
                         _FMfrequenc
                         _delay_10ms
 ---------------------------------------------------------------------------------
 (2) _FMfrequenc                                          10     8      2    1754
>>>>>>> origin/master
                                             17 COMRAM    10     8      2
                            _FMready
                            _FMwrite
                                _dly
 ---------------------------------------------------------------------------------
 (1) _errfm                                                0     0      0       0
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _butnEvent                                           13    11      2     230
                                              0 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (1) _VolumeUp                                             0     0      0    1677
=======
 (1) _butnEvent                                           19    17      2     416
                                              0 COMRAM    19    17      2
 ---------------------------------------------------------------------------------
 (1) _VolumeUp                                             1     1      0   19772
                                             41 COMRAM     1     1      0
>>>>>>> origin/master
                         _delay_10ms
                               _seek
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _VolumeDown                                           0     0      0    1677
=======
 (1) _VolumeDown                                           1     1      0   19772
                                             41 COMRAM     1     1      0
>>>>>>> origin/master
                         _delay_10ms
                               _seek
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _setVolume                                           30    28      2    1399
                                             17 COMRAM    28    26      2
                            _FMready
=======
 (2) _seek                                                 7     7      0   19343
                                             34 COMRAM     7     7      0
                             _FMread
>>>>>>> origin/master
                            _FMwrite
                          _frequency
                   _setBitInRegister
                        _setHardmute
                   _setSeekDirection
                   _tuneWithAutoHiLo
 ---------------------------------------------------------------------------------
 (3) _tuneWithAutoHiLo                                     8     8      0   10129
                                             26 COMRAM     8     8      0
                             _FMread
                            _FMwrite
                          _frequency
                    _readLOInjection
                   _setBitInRegister
                        _setHardmute
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _delay_10ms                                           3     1      2     278
=======
 (4) _setHardmute                                          1     1      0    2464
                                             17 COMRAM     1     1      0
                   _setBitInRegister
 ---------------------------------------------------------------------------------
 (4) _readLOInjection                                      9     9      0    3444
                                             17 COMRAM     9     9      0
                             _FMread
                            _FMwrite
                   _setBitInRegister
 ---------------------------------------------------------------------------------
 (4) _frequency                                            9     7      2     798
                                             11 COMRAM     9     7      2
                             _FMread
 ---------------------------------------------------------------------------------
 (3) _setSeekDirection                                     1     1      0    2486
                                             17 COMRAM     1     1      0
                   _setBitInRegister
 ---------------------------------------------------------------------------------
 (5) _setBitInRegister                                    10     8      2    2442
                                              7 COMRAM    10     8      2
                            _FMwrite
 ---------------------------------------------------------------------------------
 (1) _SeekUP                                               0     0      0     406
                         _delay_10ms
 ---------------------------------------------------------------------------------
 (1) _SeekDOWN                                             0     0      0     406
                         _delay_10ms
 ---------------------------------------------------------------------------------
 (2) _delay_10ms                                           3     1      2     406
>>>>>>> origin/master
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _MuteHard                                             1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 2     2      0     108
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _FMvers                                               2     0      2     449
                                             11 COMRAM     2     0      2
                             _FMread
 ---------------------------------------------------------------------------------
 (1) _FMinit                                               3     3      0    1314
=======
 (1) _FMvers                                               2     0      2     833
                                             11 COMRAM     2     0      2
                             _FMread
 ---------------------------------------------------------------------------------
 (1) _FMinit                                               3     3      0    1698
>>>>>>> origin/master
                                             17 COMRAM     3     3      0
                            _FMready
                            _FMwrite
                                _dly
                           _showFreq
 ---------------------------------------------------------------------------------
 (2) _showFreq                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _dly                                                  4     2      2     368
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _FMwrite                                              8     8      0      90
                                              2 COMRAM     5     5      0
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (3) _FMready                                              6     4      2     629
                                             11 COMRAM     6     4      2
                             _FMread
 ---------------------------------------------------------------------------------
 (4) _FMread                                               9     7      2     363
=======
 (3) _FMready                                              6     4      2    1013
                                             11 COMRAM     6     4      2
                             _FMread
 ---------------------------------------------------------------------------------
 (4) _FMread                                               9     7      2     747
>>>>>>> origin/master
                                              2 COMRAM     9     7      2
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _WriteI2C                                             1     1      0      15
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (5) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FMfrequenc
     _FMready
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _dly
   _FMinit
     _FMready
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _dly
     _showFreq
   _FMvers
     _FMread
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
   _Init
     _OpenI2C
   _MuteHard
   _SeekDOWN
     _delay_10ms
   _SeekUP
     _delay_10ms
   _VolumeDown
     _delay_10ms
     _seek
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _frequency
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       _setBitInRegister
         _FMwrite
           _IdleI2C
           _WriteI2C
             _IdleI2C
       _setHardmute
         _setBitInRegister
           _FMwrite
             _IdleI2C
             _WriteI2C
               _IdleI2C
       _setSeekDirection
         _setBitInRegister
           _FMwrite
             _IdleI2C
             _WriteI2C
               _IdleI2C
       _tuneWithAutoHiLo
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _FMwrite
           _IdleI2C
           _WriteI2C
             _IdleI2C
         _frequency
           _FMread
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         _readLOInjection
           _FMread
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _FMwrite
             _IdleI2C
             _WriteI2C
               _IdleI2C
           _setBitInRegister
             _FMwrite
               _IdleI2C
               _WriteI2C
                 _IdleI2C
         _setBitInRegister
           _FMwrite
             _IdleI2C
             _WriteI2C
               _IdleI2C
         _setHardmute
           _setBitInRegister
             _FMwrite
               _IdleI2C
               _WriteI2C
                 _IdleI2C
   _VolumeUp
     _delay_10ms
     _seek
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _frequency
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       _setBitInRegister
         _FMwrite
           _IdleI2C
           _WriteI2C
             _IdleI2C
       _setHardmute
         _setBitInRegister
           _FMwrite
             _IdleI2C
             _WriteI2C
               _IdleI2C
       _setSeekDirection
         _setBitInRegister
           _FMwrite
             _IdleI2C
             _WriteI2C
               _IdleI2C
       _tuneWithAutoHiLo
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
         _FMwrite
           _IdleI2C
           _WriteI2C
             _IdleI2C
         _frequency
           _FMread
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
         _readLOInjection
           _FMread
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
           _FMwrite
             _IdleI2C
             _WriteI2C
               _IdleI2C
           _setBitInRegister
             _FMwrite
               _IdleI2C
               _WriteI2C
                 _IdleI2C
         _setBitInRegister
           _FMwrite
             _IdleI2C
             _WriteI2C
               _IdleI2C
         _setHardmute
           _setBitInRegister
             _FMwrite
               _IdleI2C
               _WriteI2C
                 _IdleI2C
   _butnEvent
   _dly
   _errfm
   _nextChannel
     _FMfrequenc
       _FMready
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _dly
     _delay_10ms
   _previousChannel
     _FMfrequenc
       _FMready
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _dly
     _delay_10ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     30      54       1       88.4%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      54       8        0.0%
DATA                 0      0      54      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
<<<<<<< HEAD
Symbol Table                                                                                   Sat Feb 18 22:33:35 2017

             __CFG_CP$OFF 000000               _SSPSTATbits 000FC7                        l81 03DA  
                      l91 047A                        l83 03C2                        l75 038A  
                      l93 0462                        l77 0372                        l86 042A  
                      l88 0412                        l98 04B2               __CFG_BORV$3 000000  
                     l131 082E                       l141 04F6                       l302 0930  
                     l150 0536                       l126 07F2                       l311 0956  
                     l144 0516                       l136 04CE                       l160 05D0  
                     l216 0AEE                       l147 052C                       l277 0AAC  
                     l278 0AAE                       l931 0ACC                       l945 091A  
                     l963 0942                       l959 093E                       l977 0966  
                     u905 06A6                       u860 0996                       u870 0998  
                     u890 0676                       _dly 09B0                       prod 000FF3  
                     wreg 000FE8              __CFG_WDT$OFF 000000                      l1051 080A  
                    l1511 09CA                      l1601 09E4                      l1523 0982  
                    l1507 09BA                      l1515 09D8                      l1603 09F2  
                    l1509 09C4                      l1613 0356                      l1551 0668  
                    l1703 04C0                      l1623 0380                      l1473 04E6  
                    l1633 03A6                      l1643 03D0                      l1733 05A0  
                    l1653 03F6                      l1663 0420                      l1753 05F6  
                    l1729 0598                      l1673 0446                      l1771 0624  
                    l1763 060A                      l1747 05EA                      l1683 0470  
                    l1851 0760                      l1773 0632                      l1749 05EE  
                    l1693 0496                      l1853 0766                      l1775 063E  
                    l1759 0606                      l1855 076C                      l1863 0780  
                    l1847 074C                      l1857 0772                      l1849 075A  
                    ?_dly 0001                      l1859 077A                      u1100 0412  
                    u1020 0372                      u1140 0462                      u1060 03C2  
                    u1307 035C                      u1180 04B2                      u1317 03AC  
                    u1327 03FC                      u1280 073C                      u1337 044C  
                    u1347 049C                      u1357 09EA                      _Init 08AC  
         __end_of_FMready 09B0                      _main 0712                      dly@d 0001  
                    dly@i 0003                      fsr2h 000FDA                      indf2 000FDF  
                    fsr2l 000FD9           __end_of_FMwrite 083A                      prodh 000FF4  
                    prodl 000FF3                      start 0000             __CFG_IESO$OFF 000000  
         __end_of_IdleI2C 0ADE             __CFG_MCLRE$ON 000000              ___param_bank 000010  
         __end_of_ReadI2C 0AB6           __end_of_OpenI2C 0A9A                     ??_dly 0003  
                   ?_Init 0001                     ?_main 0001                     _T0CON 000FD5  
                   _LCDPS 000F58                     _TMR0H 000FD7                     _TMR0L 000FD6  
                   _PORTA 000F80                     _PORTB 000F81                     _PORTC 000F82  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
                   _TRISG 000F98             __CFG_PWRT$OFF 000000            __CFG_FCMEN$OFF 000000  
         __end_of_regDflt 0325                     _errfm 0AEE               ?_FMfrequenc 0012  
          __CFG_BOREN$OFF 000000                     tablat 000FF5                     status 000FD8  
            ?_nextChannel 0001           __initialization 0AB6              __end_of_Init 090C  
            __end_of_main 07B8                    ??_Init 0003                    ??_main 002E  
           __activetblptr 000002          __end_of_MuteHard 0AF2                    _ADCON1 000FC1  
               ??_FMready 000E                    ?_errfm 0001          __end_of_WriteI2C 096A  
               ??_FMwrite 0003          __end_of_VolumeUp 0A5E                    _LCDCON 000F59  
                  _LCDSE0 000F5A                    _LCDSE1 000F5B                    _LCDSE2 000F5C  
                  _LCDSE3 000F5D               OpenI2C@slew 0001                 ??_IdleI2C 0001  
                  _OSCCON 000FD3                    _FMinit 0594                    _FMread 04CA  
                  _SSPADD 000FC8                    _SSPBUF 000FC9                    _FMvers 0ADE  
               ??_ReadI2C 0001                 ??_OpenI2C 0002            __CFG_XINST$OFF 000000  
     __size_of_FMfrequenc 0072                    _regImg 0034                    clear_0 0ABC  
                  main@ui 0032          __end_of_showFreq 0AF4              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 0AC2             ___rparam_used 000001  
              _VolumeDown 0A5E            __pcstackCOMRAM 0001             __end_of_errfm 0AF0  
          setVolume@F6665 0325           __CFG_OSC$INTIO7 000000                   ??_errfm 0001  
__size_of_previousChannel 001E        __size_of_butnEvent 0190                _delay_10ms 09E2  
                 ?_FMinit 0001                   ?_FMread 0003                   ?_FMvers 000C  
               ?_MuteHard 0001    __end_ofsetVolume@F6665 0338      __size_of_nextChannel 001E  
               ?_WriteI2C 0001        __size_of_setVolume 00B8                 ?_VolumeUp 0001  
               FMinit@dat 0012                   _FMready 096A                   _SSPCON1 000FC6  
                 _SSPCON2 000FC5              ??_FMfrequenc 0014                   _SSPSTAT 000FC7  
                 _FMwrite 07B8                   _IdleI2C 0ACC           __size_of_FMinit 00C6  
         __size_of_FMread 00CA                 FMvers@vsn 000C                   _ReadI2C 0A9A  
         __size_of_FMvers 0010                   _OpenI2C 0A7C                   __Hparam 0000  
                 __Lparam 0000               ?_VolumeDown 0001                ??_MuteHard 0001  
               ?_showFreq 0001              __psmallconst 0300           __CFG_STVREN$OFF 000000  
                 __pcinit 0AB6                ??_WriteI2C 0002         __end_of_butnEvent 04CA  
      __end_of_FMfrequenc 08AC                ??_VolumeUp 002E                   __ramtop 0300  
                 __ptext0 0712                   __ptext1 0A04                   __ptext2 0A22  
                 __ptext3 083A                   __ptext4 0AEE                   __ptext5 033A  
                 __ptext6 0A40                   __ptext7 0A5E                   __ptext8 065A  
                 __ptext9 09E2                 _T0CONbits 000FD5                   _regDflt 0301  
            __size_of_dly 0032                   main@evt 0030      end_of_initialization 0AC2  
       __end_of_setVolume 0712               ?_delay_10ms 0001             __Lmediumconst 0000  
       ??_previousChannel 001C         setVolume@temp_vol 002D               FMfrequenc@f 0012  
              ??_showFreq 0001                   postdec2 000FDD                   postinc0 000FEE  
                 postinc2 000FDE                 _PORTAbits 000F80                 _PORTBbits 000F81  
               _PORTCbits 000F82                 _PORTGbits 000F86                 _TRISCbits 000F94  
     __size_of_VolumeDown 001E            __end_of_FMinit 065A            __end_of_FMread 0594  
          __end_of_FMvers 0AEE       __size_of_delay_10ms 0022                butnEvent@c 0004  
     start_initialization 0AB6               __end_of_dly 09E2          WriteI2C@data_out 0002  
                ??_FMinit 0012                  ??_FMread 0005                  ??_FMvers 000E  
       __size_of_MuteHard 0002           setVolume@volume 0012         __size_of_WriteI2C 005E  
       __size_of_VolumeUp 001E               __pbssCOMRAM 0034                  ?_FMready 000C  
                ?_FMwrite 0001                  ?_IdleI2C 0001                  ?_ReadI2C 0001  
                ?_OpenI2C 0001             ??_nextChannel 001C              ??_VolumeDown 002E  
       __size_of_showFreq 0002                  FMinit@ad 0014               __smallconst 0300  
               _butnEvent 033A           FMwrite@firstByt 0005           _previousChannel 0A04  
                _LCDDATA0 000F60        __end_of_VolumeDown 0A7C           FMwrite@secndByt 0006  
          __size_of_errfm 0002              ??_delay_10ms 0003              MuteHard@down 0001  
          FMread@firstByt 000A                 _setVolume 065A                FMread@data 0003  
                _PIR1bits 000F9E            FMread@secndByt 000B                FMready@rdy 000C  
              FMready@sts 0010       __end_of_nextChannel 0A40        __end_of_delay_10ms 0A04  
              ?_butnEvent 0001   setVolume@volume_setting 002C          __size_of_FMready 0046  
        __size_of_FMwrite 0082          OpenI2C@sync_mode 0002          __size_of_IdleI2C 0012  
        __size_of_ReadI2C 001C                  __Hrparam 0000                ?_setVolume 0012  
        __size_of_OpenI2C 001E                  _MuteHard 0AF0                  __Lrparam 0000  
              FMwrite@adr 0007                  _WriteI2C 090C                  _VolumeUp 0A40  
 __end_of_previousChannel 0A22              setVolume@dat 002A                  __ptext10 0AF0  
                __ptext11 08AC                  __ptext20 090C                  __ptext12 0A7C  
                __ptext21 0ACC                  __ptext13 0ADE                  __ptext22 0A9A  
                __ptext14 0594                  __ptext15 0AF2                  __ptext16 09B0  
                __ptext17 07B8                  __ptext18 096A                  __ptext19 04CA  
             delay_10ms@n 0001             __size_of_Init 0060             __size_of_main 00A6  
           FMread@regAddr 0009               _nextChannel 0A22                  _showFreq 0AF2  
           FMfrequenc@dat 001A               ??_butnEvent 0003                _INTCONbits 000FF2  
     setVolume@volume_map 0017               ??_setVolume 0014              FMfrequenc@cn 0018  
        ?_previousChannel 0001               _SSPCON1bits 000FC6               _SSPCON2bits 000FC5  
              _FMfrequenc 083A            butnEvent@c_516 000C            butnEvent@c_508 0008  
          butnEvent@c_509 000A            butnEvent@c_499 0006  
=======
Symbol Table                                                                                   Sun Feb 19 12:16:34 2017

    readLOInjection@rssi_val 0018                  __CFG_CP$OFF 000000                  _SSPSTATbits 000FC7  
                         l95 03FC                           l97 0392                  __CFG_BORV$3 000000  
                        l100 03D4                          l112 04EC                          l104 049C  
                        l114 04D4                          l106 0434                          l124 0574  
                        l117 053C                          l109 0474                          l206 08B4  
                        l231 0AE4                          l215 06F6                          l119 0524  
                        l152 0C66                          l216 0730                          l170 0962  
                        l162 091A                          l173 0978                          l157 0CA2  
                        l167 0942                          l176 0982                          l195 07DA  
                        l356 0FDE                          l357 0FE0                          l381 0DA4  
                        l293 1044                          l390 0DCA                          _dly 0EC0  
               _softmute_bit 0350                          prod 000FF3                          wreg 000FE8  
               __CFG_WDT$OFF 000000                         l1010 1022                         l1024 0D8E  
                       l1042 0DB6                         l1038 0DB2                         l1070 0C7E  
                       l2022 0480                         l2006 0418                         l1056 0DDA  
                       l2120 0AAC                         l2040 04B8                         l2016 0458  
                       l2050 04E2                         l2140 0B02                         l2124 0AB4  
                       l2060 0508                         l2028 048A                         l2300 0A3E  
                       l2150 0B1A                         l2070 0532                         l2310 0A5E  
                       l2302 0A44                         l2144 0B0A                         l2080 0558  
                       l2304 0A4A                         l2162 0B38                         l2154 0B1E  
                       l2138 0AFE                         l2090 0582                         l2306 0A52  
                       l2314 0A64                         l2164 0B46                         l2308 0A58  
                       l2166 0B52                         l2094 058A                         l1812 08D4  
                       l1804 08AC                         l1822 0ECA                         l1830 0EE8  
                       l1910 07BE                         l2294 0A24                         l1824 0ED4  
                       l2296 0A32                         l1738 0932                         l1826 0EDA  
                       l2298 0A38                         l1836 0E0C                         l1774 0BCA  
                       l1960 0F1A                         l1776 0C24                         l1792 085E  
                       l1864 0690                         ?_dly 0001                         l1962 0F28  
                       l1866 071A                         l1972 0376                         l1878 0E50  
                       l1798 0894                         l1982 03B6                         l1994 03EA  
                       l1988 03E0                         u1105 0EA0                         u1230 0E64  
                       u1240 0E66                         u1155 08E0                         u1084 0BA4  
                       u1500 04D4                         u1085 0B9E                         u1094 0BF8  
                       u1430 0434                         u1095 0BF2                         u1360 0392  
                       u1540 0524                         u1460 0474                         u1390 03D4  
                       u1580 0574                         u1807 041E                         u1760 0A08  
                       u1817 045E                         u1827 04BE                         u1837 050E  
                       u1847 055E                         u1857 0F20                         u1787 037C  
                       u1797 03BC                         _Init 0D20              __end_of_FMready 0E7E  
                       _main 09E0                         _seek 0740                         dly@d 0001  
                       dly@i 0003                         fsr2h 000FDA                         indf2 000FDF  
                       fsr2l 000FD9              __end_of_FMwrite 0CAE                         prodh 000FF4  
                       prodl 000FF3                seek@direction 0025                         start 0000  
              __CFG_IESO$OFF 000000              __end_of_IdleI2C 1034                __CFG_MCLRE$ON 000000  
               ___param_bank 000010              __end_of_ReadI2C 0FE8      tuneWithAutoHiLo@rssi_hi 0020  
            __end_of_OpenI2C 0F94      tuneWithAutoHiLo@rssi_lo 001F                        ??_dly 0003  
                      ?_Init 0001                        ?_main 0001                        ?_seek 0001  
                      _T0CON 000FD5                        _LCDPS 000F58                        _TMR0H 000FD7  
                      _TMR0L 000FD6                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISG 000F98                __CFG_PWRT$OFF 000000  
             __CFG_FCMEN$OFF 000000              __end_of_regDflt 0325                        _errfm 1044  
                ?_FMfrequenc 0012                _hiloctrl1_bit 033C                _hiloctrl2_bit 0340  
             __CFG_BOREN$OFF 000000                        tablat 000FF5                        status 000FD8  
             seek@curChannel 0023                 ?_nextChannel 0001              __initialization 0FE8  
               __end_of_Init 0D80                 __end_of_main 0AA8                 __end_of_seek 083E  
               ?_setHardmute 0001             __end_of_SeekDOWN 1022                       ??_Init 0003  
                     ??_main 002B  setBitInRegister@bitRegister 0008                       ??_seek 0023  
              __activetblptr 000002             __end_of_MuteHard 1048                       _ADCON1 000FC1  
                  ??_FMready 000E                       ?_errfm 0001            ?_setSeekDirection 0001  
           __end_of_WriteI2C 0DDE                    ??_FMwrite 0003             __end_of_VolumeUp 0FB0  
                     _LCDCON 000F59                       _LCDSE0 000F5A                       _LCDSE1 000F5B  
                     _LCDSE2 000F5C                       _LCDSE3 000F5D                  OpenI2C@slew 0001  
                  ??_IdleI2C 0001                       _OSCCON 000FD3           ??_setSeekDirection 0012  
        readLOInjection@loHi 0015                       _FMinit 0AA8                       _FMread 0916  
                     _SSPADD 000FC8          readLOInjection@temp 0016                       _SSPBUF 000FC9  
                     _FMvers 1034                    ??_ReadI2C 0001                    ??_OpenI2C 0002  
                     _SeekUP 0FFE               __CFG_XINST$OFF 000000            ?_tuneWithAutoHiLo 0001  
         ??_tuneWithAutoHiLo 001B   tuneWithAutoHiLo@curChannel 001B          __size_of_FMfrequenc 0072  
                     _regImg 0031                       clear_0 0FEE         __end_of_hardmute_bit 033C  
           __end_of_seek_bit 034C                       main@ui 002F             __end_of_showFreq 104A  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8          butnEvent@timereturn 0012             __end_of_tune_bit 0358  
          ?_setBitInRegister 0008                   __accesstop 0060      __end_of__initialization 0FF4  
         ??_setBitInRegister 000A                ___rparam_used 000001                   _VolumeDown 0FB0  
             __pcstackCOMRAM 0001                __end_of_errfm 1046               setVolume@F6704 0325  
   __size_of_readLOInjection 00D8              __CFG_OSC$INTIO7 000000                      ??_errfm 0001  
   __size_of_previousChannel 001E           __size_of_butnEvent 023A                   _delay_10ms 0F18  
                    ?_FMinit 0001                      ?_FMread 0003                    ?_SeekDOWN 0001  
                    ?_FMvers 000C           __size_of_frequency 0042                      ?_SeekUP 0001  
                  ?_MuteHard 0001         __end_of_hiloside_bit 0348       __end_ofsetVolume@F6704 0338  
       __size_of_nextChannel 001E                    ?_WriteI2C 0001                    ?_VolumeUp 0001  
       __size_of_setHardmute 0026                    FMinit@dat 0012                      _FMready 0E38  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                 ??_FMfrequenc 0014  
                    _SSPSTAT 000FC7                      _FMwrite 0C2C                      _IdleI2C 1022  
                 ??_SeekDOWN 0004              __size_of_FMinit 00C6              __size_of_FMread 00CA  
                  FMvers@vsn 000C                      _ReadI2C 0FCC              __size_of_FMvers 0010  
                    _OpenI2C 0F76                      __Hparam 0000                      __Lparam 0000  
                ?_VolumeDown 0001                   ??_MuteHard 0001              __size_of_SeekUP 0012  
                  ?_showFreq 0001                 __psmallconst 0300              __CFG_STVREN$OFF 000000  
                    __pcinit 0FE8                   ??_WriteI2C 0002            __end_of_butnEvent 0594  
         __end_of_FMfrequenc 0D20                   ??_VolumeUp 002A                      __ramtop 0300  
                    __ptext0 09E0                      __ptext1 0F3A                      __ptext2 0F58  
                    __ptext3 0CAE                      __ptext4 1044                      __ptext5 035A  
                    __ptext6 0F94                      __ptext7 0FB0                      __ptext8 0740  
                    __ptext9 0594                    _T0CONbits 000FD5            __end_of_frequency 0EC0  
                    _regDflt 0301                 __size_of_dly 0032                      main@evt 002D  
          ??_readLOInjection 0012         end_of_initialization 0FF4                  ?_delay_10ms 0001  
               _hardmute_bit 0338                __Lmediumconst 0000                   _seekup_bit 034C  
          ??_previousChannel 001C                  FMfrequenc@f 0012                   ??_showFreq 0001  
                    postdec2 000FDD    __size_of_setSeekDirection 005A                      postinc0 000FEE  
                    postinc2 000FDE                    _PORTAbits 000F80                    _PORTBbits 000F81  
                  _PORTCbits 000F82                    _PORTGbits 000F86    __size_of_tuneWithAutoHiLo 01AC  
                  _TRISCbits 000F94          __size_of_VolumeDown 001C                VolumeDown@dir 002A  
             __end_of_FMinit 0B6E               __end_of_FMread 09E0               __end_of_FMvers 1044  
     tuneWithAutoHiLo@status 0021               __end_of_SeekUP 1010    __size_of_setBitInRegister 00BE  
        setHardmute@bitState 0012          __size_of_delay_10ms 0022                   butnEvent@c 0004  
        start_initialization 0FE8                  __end_of_dly 0EF2             WriteI2C@data_out 0002  
               _hiloside_bit 0344                     ??_FMinit 0012                     ??_FMread 0005  
                   ??_FMvers 000E            __size_of_SeekDOWN 0012                     ??_SeekUP 0004  
          __size_of_MuteHard 0002            __size_of_WriteI2C 005E            __size_of_VolumeUp 001C  
                __pbssCOMRAM 0031                  VolumeUp@dir 002A                     ?_FMready 000C  
      __end_of_hiloctrl1_bit 0340        __end_of_hiloctrl2_bit 0344                   seek@status 0028  
                   ?_FMwrite 0001                     ?_IdleI2C 0001                     ?_ReadI2C 0001  
                   ?_OpenI2C 0001                ??_nextChannel 001C                 ??_VolumeDown 002A  
           _setSeekDirection 0DDE                ??_setHardmute 0012            __size_of_showFreq 0002  
                   FMinit@ad 0014              _readLOInjection 083E                  __smallconst 0300  
                  _butnEvent 035A              FMwrite@firstByt 0005             _tuneWithAutoHiLo 0594  
            _previousChannel 0F3A                    _frequency 0E7E                     _LCDDATA0 000F60  
         __end_of_VolumeDown 0FCC              FMwrite@secndByt 0006               __size_of_errfm 0002  
               ??_delay_10ms 0003                 MuteHard@down 0001                frequency@data 0013  
             FMread@firstByt 000A                   FMread@data 0003                     _PIR1bits 000F9E  
           _setBitInRegister 0B6E               FMread@secndByt 000B                   FMready@rdy 000C  
                 FMready@sts 0010          __end_of_nextChannel 0F76        readLOInjection@status 0019  
         __end_of_delay_10ms 0F3A                   ?_butnEvent 0001          __end_of_setHardmute 0F18  
                 ?_frequency 000C             __size_of_FMready 0046             __size_of_FMwrite 0082  
           OpenI2C@sync_mode 0002                     _SeekDOWN 1010             __size_of_IdleI2C 0012  
       __end_of_softmute_bit 0354             __size_of_ReadI2C 001C                     __Hrparam 0000  
           __size_of_OpenI2C 001E                     _MuteHard 1046                     __Lrparam 0000  
    __end_of_readLOInjection 0916                   FMwrite@adr 0007                     _WriteI2C 0D80  
                   _VolumeUp 0F94      __end_of_previousChannel 0F58    setSeekDirection@direction 0012  
   setBitInRegister@bitState 0009                     __ptext10 0EF2                     __ptext11 083E  
                   __ptext20 0F76                     __ptext12 0E7E                     __ptext21 1034  
                   __ptext13 0DDE                     __ptext30 0FCC                     __ptext22 0AA8  
                   __ptext14 0B6E                     __ptext23 1048                     __ptext15 0FFE  
                   __ptext24 0EC0                     __ptext16 1010                     __ptext25 0C2C  
                   __ptext17 0F18                     __ptext26 0E38                     __ptext18 1046  
                   __ptext27 0916                     __ptext19 0D20                     __ptext28 0D80  
                   __ptext29 1022                  delay_10ms@n 0001                __size_of_Init 0060  
              __size_of_main 00C8                __size_of_seek 00FE                     _seek_bit 0348  
              FMread@regAddr 0009                  _nextChannel 0F58                     _showFreq 1048  
              FMfrequenc@dat 001A                  _setHardmute 0EF2                     _tune_bit 0354  
       tuneWithAutoHiLo@temp 001D                  ??_butnEvent 0003                   _INTCONbits 000FF2  
         __end_of_seekup_bit 0350                  ??_frequency 000E     __end_of_setSeekDirection 0E38  
                   seek@temp 0026      setBitInRegister@address 0011     __end_of_tuneWithAutoHiLo 0740  
               FMfrequenc@cn 0018             ?_readLOInjection 0001             ?_previousChannel 0001  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5     __end_of_setBitInRegister 0C2C  
                 _FMfrequenc 0CAE               butnEvent@c_516 0006               butnEvent@c_517 0008  
             butnEvent@c_518 000A               butnEvent@c_535 0010               butnEvent@c_527 000C  
             butnEvent@c_528 000E  
>>>>>>> origin/master
